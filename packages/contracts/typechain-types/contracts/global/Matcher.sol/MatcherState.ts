/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MatcherStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "globalConfig"
      | "resourceConfigIds"
      | "resourceConfigs"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "globalConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourceConfigIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourceConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "globalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfigIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export interface MatcherState extends BaseContract {
  connect(runner?: ContractRunner | null): MatcherState;
  waitForDeployment(): Promise<this>;

  interface: MatcherStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  globalConfig: TypedContractMethod<[], [string], "view">;

  resourceConfigIds: TypedContractMethod<
    [],
    [[string, string] & { _first: string; _last: string }],
    "view"
  >;

  resourceConfigs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        minPriceByEpoch: bigint;
        maxCollateral: bigint;
        workersCount: bigint;
      }
    ],
    "view"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "globalConfig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resourceConfigIds"
  ): TypedContractMethod<
    [],
    [[string, string] & { _first: string; _last: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "resourceConfigs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        minPriceByEpoch: bigint;
        maxCollateral: bigint;
        workersCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  filters: {};
}
