/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace DealFactory {
  export type DealStruct = {
    core: AddressLike;
    config: AddressLike;
    payment: AddressLike;
    statusController: AddressLike;
    workers: AddressLike;
  };

  export type DealStructOutput = [
    core: string,
    config: string,
    payment: string,
    statusController: string,
    workers: string
  ] & {
    core: string;
    config: string;
    payment: string;
    statusController: string;
    workers: string;
  };
}

export interface DealFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_WORKERS_PER_PROVIDER"
      | "PRICE_PER_EPOCH"
      | "REQUIRED_COLLATERAL"
      | "configImpl"
      | "coreImpl"
      | "createDeal"
      | "defaultPaymentToken"
      | "globalConfig"
      | "isDeal"
      | "paymentImpl"
      | "proxiableUUID"
      | "statusImpl"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "workersImpl"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "DealCreated"
      | "Initialized"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_WORKERS_PER_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PER_EPOCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REQUIRED_COLLATERAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "coreImpl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createDeal",
    values: [BigNumberish, BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPaymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDeal", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "paymentImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "statusImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workersImpl",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_WORKERS_PER_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PER_EPOCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUIRED_COLLATERAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coreImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "statusImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workersImpl",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealCreatedEvent {
  export type InputTuple = [
    deal: DealFactory.DealStruct,
    paymentToken: AddressLike,
    pricePerEpoch: BigNumberish,
    requiredCollateral: BigNumberish,
    minWorkers: BigNumberish,
    maxWorkersPerProvider: BigNumberish,
    targetWorkers: BigNumberish,
    appCID: string,
    effectorWasmsCids: string[],
    epoch: BigNumberish
  ];
  export type OutputTuple = [
    deal: DealFactory.DealStructOutput,
    paymentToken: string,
    pricePerEpoch: bigint,
    requiredCollateral: bigint,
    minWorkers: bigint,
    maxWorkersPerProvider: bigint,
    targetWorkers: bigint,
    appCID: string,
    effectorWasmsCids: string[],
    epoch: bigint
  ];
  export interface OutputObject {
    deal: DealFactory.DealStructOutput;
    paymentToken: string;
    pricePerEpoch: bigint;
    requiredCollateral: bigint;
    minWorkers: bigint;
    maxWorkersPerProvider: bigint;
    targetWorkers: bigint;
    appCID: string;
    effectorWasmsCids: string[];
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DealFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DealFactory;
  waitForDeployment(): Promise<this>;

  interface: DealFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_WORKERS_PER_PROVIDER: TypedContractMethod<[], [bigint], "view">;

  PRICE_PER_EPOCH: TypedContractMethod<[], [bigint], "view">;

  REQUIRED_COLLATERAL: TypedContractMethod<[], [bigint], "view">;

  configImpl: TypedContractMethod<[], [string], "view">;

  coreImpl: TypedContractMethod<[], [string], "view">;

  createDeal: TypedContractMethod<
    [
      minWorkers_: BigNumberish,
      targetWorkers_: BigNumberish,
      appCID_: string,
      effectors: string[]
    ],
    [string],
    "nonpayable"
  >;

  defaultPaymentToken: TypedContractMethod<[], [string], "view">;

  globalConfig: TypedContractMethod<[], [string], "view">;

  isDeal: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  paymentImpl: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  statusImpl: TypedContractMethod<[], [string], "view">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  workersImpl: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_WORKERS_PER_PROVIDER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PER_EPOCH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REQUIRED_COLLATERAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "configImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coreImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createDeal"
  ): TypedContractMethod<
    [
      minWorkers_: BigNumberish,
      targetWorkers_: BigNumberish,
      appCID_: string,
      effectors: string[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultPaymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalConfig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isDeal"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "statusImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "workersImpl"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "DealCreated"
  ): TypedContractEvent<
    DealCreatedEvent.InputTuple,
    DealCreatedEvent.OutputTuple,
    DealCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "DealCreated(tuple,address,uint256,uint256,uint256,uint256,uint256,string,string[],uint256)": TypedContractEvent<
      DealCreatedEvent.InputTuple,
      DealCreatedEvent.OutputTuple,
      DealCreatedEvent.OutputObject
    >;
    DealCreated: TypedContractEvent<
      DealCreatedEvent.InputTuple,
      DealCreatedEvent.OutputTuple,
      DealCreatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
