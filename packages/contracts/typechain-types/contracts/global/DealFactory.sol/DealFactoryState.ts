/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DealFactoryStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_WORKERS_PER_PROVIDER"
      | "PRICE_PER_EPOCH"
      | "REQUIRED_COLLATERAL"
      | "configImpl"
      | "coreImpl"
      | "createDeal"
      | "defaultPaymentToken"
      | "globalConfig"
      | "isDeal"
      | "paymentImpl"
      | "statusImpl"
      | "workersImpl"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_WORKERS_PER_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PER_EPOCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REQUIRED_COLLATERAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "coreImpl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createDeal",
    values: [BigNumberish, BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPaymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDeal", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "paymentImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "statusImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workersImpl",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_WORKERS_PER_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PER_EPOCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REQUIRED_COLLATERAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coreImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "statusImpl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workersImpl",
    data: BytesLike
  ): Result;
}

export interface DealFactoryState extends BaseContract {
  connect(runner?: ContractRunner | null): DealFactoryState;
  waitForDeployment(): Promise<this>;

  interface: DealFactoryStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_WORKERS_PER_PROVIDER: TypedContractMethod<[], [bigint], "view">;

  PRICE_PER_EPOCH: TypedContractMethod<[], [bigint], "view">;

  REQUIRED_COLLATERAL: TypedContractMethod<[], [bigint], "view">;

  configImpl: TypedContractMethod<[], [string], "view">;

  coreImpl: TypedContractMethod<[], [string], "view">;

  createDeal: TypedContractMethod<
    [
      minWorkers_: BigNumberish,
      targetWorkers_: BigNumberish,
      appCID_: string,
      effectors: string[]
    ],
    [string],
    "nonpayable"
  >;

  defaultPaymentToken: TypedContractMethod<[], [string], "view">;

  globalConfig: TypedContractMethod<[], [string], "view">;

  isDeal: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  paymentImpl: TypedContractMethod<[], [string], "view">;

  statusImpl: TypedContractMethod<[], [string], "view">;

  workersImpl: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_WORKERS_PER_PROVIDER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PER_EPOCH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REQUIRED_COLLATERAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "configImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "coreImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createDeal"
  ): TypedContractMethod<
    [
      minWorkers_: BigNumberish,
      targetWorkers_: BigNumberish,
      appCID_: string,
      effectors: string[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultPaymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalConfig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isDeal"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "statusImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "workersImpl"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
