/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface WorkersModuleStateInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "CollateralWithdrawn"
      | "PATCreated"
      | "PATRemoved"
      | "PDTRemoved"
      | "PDTSet"
  ): EventFragment;
}

export namespace CollateralWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PATCreatedEvent {
  export type InputTuple = [id: BytesLike, owner: AddressLike];
  export type OutputTuple = [id: string, owner: string];
  export interface OutputObject {
    id: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PATRemovedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PDTRemovedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PDTSetEvent {
  export type InputTuple = [id: BytesLike, peerId: string, workerId: string];
  export type OutputTuple = [id: string, peerId: string, workerId: string];
  export interface OutputObject {
    id: string;
    peerId: string;
    workerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WorkersModuleState extends BaseContract {
  connect(runner?: ContractRunner | null): WorkersModuleState;
  waitForDeployment(): Promise<this>;

  interface: WorkersModuleStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CollateralWithdrawn"
  ): TypedContractEvent<
    CollateralWithdrawnEvent.InputTuple,
    CollateralWithdrawnEvent.OutputTuple,
    CollateralWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PATCreated"
  ): TypedContractEvent<
    PATCreatedEvent.InputTuple,
    PATCreatedEvent.OutputTuple,
    PATCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PATRemoved"
  ): TypedContractEvent<
    PATRemovedEvent.InputTuple,
    PATRemovedEvent.OutputTuple,
    PATRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PDTRemoved"
  ): TypedContractEvent<
    PDTRemovedEvent.InputTuple,
    PDTRemovedEvent.OutputTuple,
    PDTRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PDTSet"
  ): TypedContractEvent<
    PDTSetEvent.InputTuple,
    PDTSetEvent.OutputTuple,
    PDTSetEvent.OutputObject
  >;

  filters: {
    "CollateralWithdrawn(address,uint256)": TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;
    CollateralWithdrawn: TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;

    "PATCreated(bytes32,address)": TypedContractEvent<
      PATCreatedEvent.InputTuple,
      PATCreatedEvent.OutputTuple,
      PATCreatedEvent.OutputObject
    >;
    PATCreated: TypedContractEvent<
      PATCreatedEvent.InputTuple,
      PATCreatedEvent.OutputTuple,
      PATCreatedEvent.OutputObject
    >;

    "PATRemoved(bytes32)": TypedContractEvent<
      PATRemovedEvent.InputTuple,
      PATRemovedEvent.OutputTuple,
      PATRemovedEvent.OutputObject
    >;
    PATRemoved: TypedContractEvent<
      PATRemovedEvent.InputTuple,
      PATRemovedEvent.OutputTuple,
      PATRemovedEvent.OutputObject
    >;

    "PDTRemoved(bytes32)": TypedContractEvent<
      PDTRemovedEvent.InputTuple,
      PDTRemovedEvent.OutputTuple,
      PDTRemovedEvent.OutputObject
    >;
    PDTRemoved: TypedContractEvent<
      PDTRemovedEvent.InputTuple,
      PDTRemovedEvent.OutputTuple,
      PDTRemovedEvent.OutputObject
    >;

    "PDTSet(bytes32,string,string)": TypedContractEvent<
      PDTSetEvent.InputTuple,
      PDTSetEvent.OutputTuple,
      PDTSetEvent.OutputObject
    >;
    PDTSet: TypedContractEvent<
      PDTSetEvent.InputTuple,
      PDTSetEvent.OutputTuple,
      PDTSetEvent.OutputObject
    >;
  };
}
