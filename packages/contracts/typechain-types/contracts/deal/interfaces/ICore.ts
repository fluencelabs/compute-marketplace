/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ICoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "configModule"
      | "initialize"
      | "moduleByAddress"
      | "moduleByType"
      | "owner"
      | "paymentModule"
      | "statusModule"
      | "transferOwnership"
      | "workersModule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleByType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "statusModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workersModule",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "configModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "statusModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workersModule",
    data: BytesLike
  ): Result;
}

export interface ICore extends BaseContract {
  connect(runner?: ContractRunner | null): ICore;
  waitForDeployment(): Promise<this>;

  interface: ICoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  configModule: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      config_: AddressLike,
      payment_: AddressLike,
      statys_: AddressLike,
      workers_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  moduleByAddress: TypedContractMethod<[module: AddressLike], [bigint], "view">;

  moduleByType: TypedContractMethod<[module: BigNumberish], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentModule: TypedContractMethod<[], [string], "view">;

  statusModule: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  workersModule: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "configModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      config_: AddressLike,
      payment_: AddressLike,
      statys_: AddressLike,
      workers_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "moduleByAddress"
  ): TypedContractMethod<[module: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "moduleByType"
  ): TypedContractMethod<[module: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "statusModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "workersModule"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
