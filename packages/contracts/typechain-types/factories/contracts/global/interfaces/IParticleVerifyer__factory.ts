/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IParticleVerifyer,
  IParticleVerifyerInterface,
} from "../../../../contracts/global/interfaces/IParticleVerifyer";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "air",
            type: "string",
          },
          {
            internalType: "string",
            name: "prevData",
            type: "string",
          },
          {
            internalType: "string",
            name: "params",
            type: "string",
          },
          {
            internalType: "string",
            name: "callResults",
            type: "string",
          },
        ],
        internalType: "struct Particle",
        name: "particle",
        type: "tuple",
      },
    ],
    name: "verifyParticle",
    outputs: [
      {
        internalType: "PATId[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IParticleVerifyer__factory {
  static readonly abi = _abi;
  static createInterface(): IParticleVerifyerInterface {
    return new Interface(_abi) as IParticleVerifyerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IParticleVerifyer {
    return new Contract(address, _abi, runner) as unknown as IParticleVerifyer;
  }
}
