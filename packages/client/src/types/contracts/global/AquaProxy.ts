/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AquaProxy {
  export type ParticleStruct = {
    air: string;
    prevData: string;
    params: string;
    callResults: string;
  };

  export type ParticleStructOutput = [
    air: string,
    prevData: string,
    params: string,
    callResults: string
  ] & { air: string; prevData: string; params: string; callResults: string };
}

export interface AquaProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aquaVMAddress"
      | "aquaVMImplicitAddress"
      | "near"
      | "selfReprsentativeImplicitAddress"
      | "verifyParticle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aquaVMAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aquaVMImplicitAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "near", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selfReprsentativeImplicitAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyParticle",
    values: [AquaProxy.ParticleStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "aquaVMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aquaVMImplicitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "near", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfReprsentativeImplicitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyParticle",
    data: BytesLike
  ): Result;
}

export interface AquaProxy extends BaseContract {
  connect(runner?: ContractRunner | null): AquaProxy;
  waitForDeployment(): Promise<this>;

  interface: AquaProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aquaVMAddress: TypedContractMethod<[], [string], "view">;

  aquaVMImplicitAddress: TypedContractMethod<[], [string], "view">;

  near: TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; wNEAR: string }],
    "view"
  >;

  selfReprsentativeImplicitAddress: TypedContractMethod<[], [string], "view">;

  verifyParticle: TypedContractMethod<
    [particle: AquaProxy.ParticleStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aquaVMAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aquaVMImplicitAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "near"
  ): TypedContractMethod<
    [],
    [[boolean, string] & { initialized: boolean; wNEAR: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "selfReprsentativeImplicitAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyParticle"
  ): TypedContractMethod<
    [particle: AquaProxy.ParticleStruct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
