/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface WorkersModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "exit"
      | "getNextWorkerIndex"
      | "getPATIndex"
      | "getPATOwner"
      | "getPDT"
      | "getUnlockedAmountBy"
      | "join"
      | "joinViaMatcher"
      | "proxiableUUID"
      | "setPDT"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawCollateral"
      | "workersCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "CollateralWithdrawn"
      | "PATCreated"
      | "PATRemoved"
      | "PDTRemoved"
      | "PDTSet"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "exit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getNextWorkerIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPATIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPATOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPDT", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getUnlockedAmountBy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinViaMatcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPDT",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workersCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextWorkerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPATIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPATOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockedAmountBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinViaMatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workersCount",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PATCreatedEvent {
  export type InputTuple = [id: BytesLike, owner: AddressLike];
  export type OutputTuple = [id: string, owner: string];
  export interface OutputObject {
    id: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PATRemovedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PDTRemovedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PDTSetEvent {
  export type InputTuple = [id: BytesLike, peerId: string, workerId: string];
  export type OutputTuple = [id: string, peerId: string, workerId: string];
  export interface OutputObject {
    id: string;
    peerId: string;
    workerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WorkersModule extends BaseContract {
  connect(runner?: ContractRunner | null): WorkersModule;
  waitForDeployment(): Promise<this>;

  interface: WorkersModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exit: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  getNextWorkerIndex: TypedContractMethod<[], [bigint], "view">;

  getPATIndex: TypedContractMethod<[id: BytesLike], [bigint], "view">;

  getPATOwner: TypedContractMethod<[id: BytesLike], [string], "view">;

  getPDT: TypedContractMethod<
    [id: BytesLike],
    [[string, string] & { peerId: string; workerId: string }],
    "view"
  >;

  getUnlockedAmountBy: TypedContractMethod<
    [owner: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  join: TypedContractMethod<[], [void], "nonpayable">;

  joinViaMatcher: TypedContractMethod<
    [owner: AddressLike],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  setPDT: TypedContractMethod<
    [id: BytesLike, peerId: string, workerId: string],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdrawCollateral: TypedContractMethod<
    [owner: AddressLike],
    [void],
    "nonpayable"
  >;

  workersCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getNextWorkerIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPATIndex"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPATOwner"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getPDT"
  ): TypedContractMethod<
    [id: BytesLike],
    [[string, string] & { peerId: string; workerId: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnlockedAmountBy"
  ): TypedContractMethod<
    [owner: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "joinViaMatcher"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPDT"
  ): TypedContractMethod<
    [id: BytesLike, peerId: string, workerId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "workersCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralWithdrawn"
  ): TypedContractEvent<
    CollateralWithdrawnEvent.InputTuple,
    CollateralWithdrawnEvent.OutputTuple,
    CollateralWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PATCreated"
  ): TypedContractEvent<
    PATCreatedEvent.InputTuple,
    PATCreatedEvent.OutputTuple,
    PATCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PATRemoved"
  ): TypedContractEvent<
    PATRemovedEvent.InputTuple,
    PATRemovedEvent.OutputTuple,
    PATRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PDTRemoved"
  ): TypedContractEvent<
    PDTRemovedEvent.InputTuple,
    PDTRemovedEvent.OutputTuple,
    PDTRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PDTSet"
  ): TypedContractEvent<
    PDTSetEvent.InputTuple,
    PDTSetEvent.OutputTuple,
    PDTSetEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CollateralWithdrawn(address,uint256)": TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;
    CollateralWithdrawn: TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;

    "PATCreated(bytes32,address)": TypedContractEvent<
      PATCreatedEvent.InputTuple,
      PATCreatedEvent.OutputTuple,
      PATCreatedEvent.OutputObject
    >;
    PATCreated: TypedContractEvent<
      PATCreatedEvent.InputTuple,
      PATCreatedEvent.OutputTuple,
      PATCreatedEvent.OutputObject
    >;

    "PATRemoved(bytes32)": TypedContractEvent<
      PATRemovedEvent.InputTuple,
      PATRemovedEvent.OutputTuple,
      PATRemovedEvent.OutputObject
    >;
    PATRemoved: TypedContractEvent<
      PATRemovedEvent.InputTuple,
      PATRemovedEvent.OutputTuple,
      PATRemovedEvent.OutputObject
    >;

    "PDTRemoved(bytes32)": TypedContractEvent<
      PDTRemovedEvent.InputTuple,
      PDTRemovedEvent.OutputTuple,
      PDTRemovedEvent.OutputObject
    >;
    PDTRemoved: TypedContractEvent<
      PDTRemovedEvent.InputTuple,
      PDTRemovedEvent.OutputTuple,
      PDTRemovedEvent.OutputObject
    >;

    "PDTSet(bytes32,string,string)": TypedContractEvent<
      PDTSetEvent.InputTuple,
      PDTSetEvent.OutputTuple,
      PDTSetEvent.OutputObject
    >;
    PDTSet: TypedContractEvent<
      PDTSetEvent.InputTuple,
      PDTSetEvent.OutputTuple,
      PDTSetEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
