/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ConfigModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "appCID"
      | "effectors"
      | "fluenceToken"
      | "globalConfig"
      | "initialize"
      | "maxWorkersPerProvider"
      | "minWorkers"
      | "particleVerifyer"
      | "paymentToken"
      | "pricePerEpoch"
      | "proxiableUUID"
      | "requiredCollateral"
      | "setAppCID"
      | "targetWorkers"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "AppCIDChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "appCID", values?: undefined): string;
  encodeFunctionData(functionFragment: "effectors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fluenceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWorkersPerProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "particleVerifyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAppCID", values: [string]): string;
  encodeFunctionData(
    functionFragment: "targetWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "appCID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "effectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWorkersPerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minWorkers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "particleVerifyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAppCID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppCIDChangedEvent {
  export type InputTuple = [newAppCID: string];
  export type OutputTuple = [newAppCID: string];
  export interface OutputObject {
    newAppCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfigModule extends BaseContract {
  connect(runner?: ContractRunner | null): ConfigModule;
  waitForDeployment(): Promise<this>;

  interface: ConfigModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  appCID: TypedContractMethod<[], [string], "view">;

  effectors: TypedContractMethod<[], [string[]], "view">;

  fluenceToken: TypedContractMethod<[], [string], "view">;

  globalConfig: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      paymentToken_: AddressLike,
      pricePerEpoch_: BigNumberish,
      requiredCollateral_: BigNumberish,
      appCID_: string,
      minWorkers_: BigNumberish,
      maxWorkersPerProvider_: BigNumberish,
      targetWorkers_: BigNumberish,
      effectors_: string[]
    ],
    [void],
    "nonpayable"
  >;

  maxWorkersPerProvider: TypedContractMethod<[], [bigint], "view">;

  minWorkers: TypedContractMethod<[], [bigint], "view">;

  particleVerifyer: TypedContractMethod<[], [string], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  pricePerEpoch: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  requiredCollateral: TypedContractMethod<[], [bigint], "view">;

  setAppCID: TypedContractMethod<[appCID_: string], [void], "nonpayable">;

  targetWorkers: TypedContractMethod<[], [bigint], "view">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "appCID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "effectors"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "fluenceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalConfig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      paymentToken_: AddressLike,
      pricePerEpoch_: BigNumberish,
      requiredCollateral_: BigNumberish,
      appCID_: string,
      minWorkers_: BigNumberish,
      maxWorkersPerProvider_: BigNumberish,
      targetWorkers_: BigNumberish,
      effectors_: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxWorkersPerProvider"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minWorkers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "particleVerifyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pricePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requiredCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAppCID"
  ): TypedContractMethod<[appCID_: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetWorkers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "AppCIDChanged"
  ): TypedContractEvent<
    AppCIDChangedEvent.InputTuple,
    AppCIDChangedEvent.OutputTuple,
    AppCIDChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "AppCIDChanged(string)": TypedContractEvent<
      AppCIDChangedEvent.InputTuple,
      AppCIDChangedEvent.OutputTuple,
      AppCIDChangedEvent.OutputObject
    >;
    AppCIDChanged: TypedContractEvent<
      AppCIDChangedEvent.InputTuple,
      AppCIDChangedEvent.OutputTuple,
      AppCIDChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
