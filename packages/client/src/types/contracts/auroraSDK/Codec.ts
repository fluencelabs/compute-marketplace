/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PromiseResultStruct = { status: BigNumberish; output: BytesLike };

export type PromiseResultStructOutput = [status: bigint, output: string] & {
  status: bigint;
  output: string;
};

export type PromiseCreateArgsStruct = {
  targetAccountId: string;
  method: string;
  args: BytesLike;
  nearBalance: BigNumberish;
  nearGas: BigNumberish;
};

export type PromiseCreateArgsStructOutput = [
  targetAccountId: string,
  method: string,
  args: string,
  nearBalance: bigint,
  nearGas: bigint
] & {
  targetAccountId: string;
  method: string;
  args: string;
  nearBalance: bigint;
  nearGas: bigint;
};

export type PromiseWithCallbackStruct = {
  base: PromiseCreateArgsStruct;
  callback: PromiseCreateArgsStruct;
};

export type PromiseWithCallbackStructOutput = [
  base: PromiseCreateArgsStructOutput,
  callback: PromiseCreateArgsStructOutput
] & {
  base: PromiseCreateArgsStructOutput;
  callback: PromiseCreateArgsStructOutput;
};

export declare namespace Borsh {
  export type DataStruct = { ptr: BigNumberish; end: BigNumberish };

  export type DataStructOutput = [ptr: bigint, end: bigint] & {
    ptr: bigint;
    end: bigint;
  };
}

export interface CodecInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodePromiseResult"
      | "encode(bytes)"
      | "encode((string,string,bytes,uint128,uint64))"
      | "encode(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)))"
      | "encodeCrossContractCallArgs(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)),uint8)"
      | "encodeCrossContractCallArgs((string,string,bytes,uint128,uint64),uint8)"
      | "encodeEM"
      | "encodePromise"
      | "encodeU128"
      | "encodeU32"
      | "encodeU64"
      | "skipPromiseResult"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodePromiseResult",
    values: [Borsh.DataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encode(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encode((string,string,bytes,uint128,uint64))",
    values: [PromiseCreateArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encode(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)))",
    values: [PromiseWithCallbackStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCrossContractCallArgs(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)),uint8)",
    values: [PromiseWithCallbackStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCrossContractCallArgs((string,string,bytes,uint128,uint64),uint8)",
    values: [PromiseCreateArgsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeEM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodePromise",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeU128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeU32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeU64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "skipPromiseResult",
    values: [Borsh.DataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodePromiseResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encode(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encode((string,string,bytes,uint128,uint64))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encode(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCrossContractCallArgs(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)),uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCrossContractCallArgs((string,string,bytes,uint128,uint64),uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encodeEM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodePromise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encodeU128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeU32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeU64", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "skipPromiseResult",
    data: BytesLike
  ): Result;
}

export interface Codec extends BaseContract {
  connect(runner?: ContractRunner | null): Codec;
  waitForDeployment(): Promise<this>;

  interface: CodecInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodePromiseResult: TypedContractMethod<
    [data: Borsh.DataStruct],
    [PromiseResultStructOutput],
    "view"
  >;

  "encode(bytes)": TypedContractMethod<[value: BytesLike], [string], "view">;

  "encode((string,string,bytes,uint128,uint64))": TypedContractMethod<
    [nearPromise: PromiseCreateArgsStruct],
    [string],
    "view"
  >;

  "encode(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)))": TypedContractMethod<
    [nearPromise: PromiseWithCallbackStruct],
    [string],
    "view"
  >;

  "encodeCrossContractCallArgs(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)),uint8)": TypedContractMethod<
    [nearPromise: PromiseWithCallbackStruct, mode: BigNumberish],
    [string],
    "view"
  >;

  "encodeCrossContractCallArgs((string,string,bytes,uint128,uint64),uint8)": TypedContractMethod<
    [nearPromise: PromiseCreateArgsStruct, mode: BigNumberish],
    [string],
    "view"
  >;

  encodeEM: TypedContractMethod<[mode: BigNumberish], [string], "view">;

  encodePromise: TypedContractMethod<[mode: BigNumberish], [string], "view">;

  encodeU128: TypedContractMethod<[v: BigNumberish], [string], "view">;

  encodeU32: TypedContractMethod<[v: BigNumberish], [string], "view">;

  encodeU64: TypedContractMethod<[v: BigNumberish], [string], "view">;

  skipPromiseResult: TypedContractMethod<
    [data: Borsh.DataStruct],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodePromiseResult"
  ): TypedContractMethod<
    [data: Borsh.DataStruct],
    [PromiseResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "encode(bytes)"
  ): TypedContractMethod<[value: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "encode((string,string,bytes,uint128,uint64))"
  ): TypedContractMethod<
    [nearPromise: PromiseCreateArgsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encode(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)))"
  ): TypedContractMethod<
    [nearPromise: PromiseWithCallbackStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeCrossContractCallArgs(((string,string,bytes,uint128,uint64),(string,string,bytes,uint128,uint64)),uint8)"
  ): TypedContractMethod<
    [nearPromise: PromiseWithCallbackStruct, mode: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeCrossContractCallArgs((string,string,bytes,uint128,uint64),uint8)"
  ): TypedContractMethod<
    [nearPromise: PromiseCreateArgsStruct, mode: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeEM"
  ): TypedContractMethod<[mode: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "encodePromise"
  ): TypedContractMethod<[mode: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "encodeU128"
  ): TypedContractMethod<[v: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "encodeU32"
  ): TypedContractMethod<[v: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "encodeU64"
  ): TypedContractMethod<[v: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "skipPromiseResult"
  ): TypedContractMethod<[data: Borsh.DataStruct], [void], "view">;

  filters: {};
}
