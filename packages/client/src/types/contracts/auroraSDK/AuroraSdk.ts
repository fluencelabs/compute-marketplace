/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PromiseCreateArgsStruct = {
  targetAccountId: string;
  method: string;
  args: BytesLike;
  nearBalance: BigNumberish;
  nearGas: BigNumberish;
};

export type PromiseCreateArgsStructOutput = [
  targetAccountId: string,
  method: string,
  args: string,
  nearBalance: bigint,
  nearGas: bigint
] & {
  targetAccountId: string;
  method: string;
  args: string;
  nearBalance: bigint;
  nearGas: bigint;
};

export type PromiseWithCallbackStruct = {
  base: PromiseCreateArgsStruct;
  callback: PromiseCreateArgsStruct;
};

export type PromiseWithCallbackStructOutput = [
  base: PromiseCreateArgsStructOutput,
  callback: PromiseCreateArgsStructOutput
] & {
  base: PromiseCreateArgsStructOutput;
  callback: PromiseCreateArgsStructOutput;
};

export interface AuroraSdkInterface extends Interface {
  getFunction(
    nameOrSignature: "addressSubAccount" | "implicitAuroraAddress" | "then"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressSubAccount",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "implicitAuroraAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "then",
    values: [PromiseCreateArgsStruct, PromiseCreateArgsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressSubAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implicitAuroraAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "then", data: BytesLike): Result;
}

export interface AuroraSdk extends BaseContract {
  connect(runner?: ContractRunner | null): AuroraSdk;
  waitForDeployment(): Promise<this>;

  interface: AuroraSdkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addressSubAccount: TypedContractMethod<
    [account: AddressLike, accountId: string],
    [string],
    "view"
  >;

  implicitAuroraAddress: TypedContractMethod<
    [accountId: string],
    [string],
    "view"
  >;

  then: TypedContractMethod<
    [base: PromiseCreateArgsStruct, callback: PromiseCreateArgsStruct],
    [PromiseWithCallbackStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addressSubAccount"
  ): TypedContractMethod<
    [account: AddressLike, accountId: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "implicitAuroraAddress"
  ): TypedContractMethod<[accountId: string], [string], "view">;
  getFunction(
    nameOrSignature: "then"
  ): TypedContractMethod<
    [base: PromiseCreateArgsStruct, callback: PromiseCreateArgsStruct],
    [PromiseWithCallbackStructOutput],
    "view"
  >;

  filters: {};
}
