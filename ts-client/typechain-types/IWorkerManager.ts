/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IWorkerManager {
  export type ComputeUnitStruct = {
    id: BytesLike;
    workerId: BytesLike;
    owner: AddressLike;
    joinedEpoch: BigNumberish;
  };

  export type ComputeUnitStructOutput = [
    id: string,
    workerId: string,
    owner: string,
    joinedEpoch: bigint
  ] & { id: string; workerId: string; owner: string; joinedEpoch: bigint };
}

export interface IWorkerManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getComputeUnit"
      | "getComputeUnitCount"
      | "getComputeUnits"
      | "getWorkerCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComputeUnitExited"
      | "ComputeUnitJoined"
      | "WorkerIdUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getComputeUnit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeUnitCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkerCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getComputeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeUnitCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkerCount",
    data: BytesLike
  ): Result;
}

export namespace ComputeUnitExitedEvent {
  export type InputTuple = [unitId: BytesLike];
  export type OutputTuple = [unitId: string];
  export interface OutputObject {
    unitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeUnitJoinedEvent {
  export type InputTuple = [unitId: BytesLike];
  export type OutputTuple = [unitId: string];
  export interface OutputObject {
    unitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkerIdUpdatedEvent {
  export type InputTuple = [computeUnitId: BytesLike, workerId: BytesLike];
  export type OutputTuple = [computeUnitId: string, workerId: string];
  export interface OutputObject {
    computeUnitId: string;
    workerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWorkerManager extends BaseContract {
  connect(runner?: ContractRunner | null): IWorkerManager;
  waitForDeployment(): Promise<this>;

  interface: IWorkerManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getComputeUnit: TypedContractMethod<
    [id: BytesLike],
    [IWorkerManager.ComputeUnitStructOutput],
    "view"
  >;

  getComputeUnitCount: TypedContractMethod<[], [bigint], "view">;

  getComputeUnits: TypedContractMethod<
    [],
    [IWorkerManager.ComputeUnitStructOutput[]],
    "view"
  >;

  getWorkerCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getComputeUnit"
  ): TypedContractMethod<
    [id: BytesLike],
    [IWorkerManager.ComputeUnitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComputeUnitCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getComputeUnits"
  ): TypedContractMethod<
    [],
    [IWorkerManager.ComputeUnitStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWorkerCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ComputeUnitExited"
  ): TypedContractEvent<
    ComputeUnitExitedEvent.InputTuple,
    ComputeUnitExitedEvent.OutputTuple,
    ComputeUnitExitedEvent.OutputObject
  >;
  getEvent(
    key: "ComputeUnitJoined"
  ): TypedContractEvent<
    ComputeUnitJoinedEvent.InputTuple,
    ComputeUnitJoinedEvent.OutputTuple,
    ComputeUnitJoinedEvent.OutputObject
  >;
  getEvent(
    key: "WorkerIdUpdated"
  ): TypedContractEvent<
    WorkerIdUpdatedEvent.InputTuple,
    WorkerIdUpdatedEvent.OutputTuple,
    WorkerIdUpdatedEvent.OutputObject
  >;

  filters: {
    "ComputeUnitExited(bytes32)": TypedContractEvent<
      ComputeUnitExitedEvent.InputTuple,
      ComputeUnitExitedEvent.OutputTuple,
      ComputeUnitExitedEvent.OutputObject
    >;
    ComputeUnitExited: TypedContractEvent<
      ComputeUnitExitedEvent.InputTuple,
      ComputeUnitExitedEvent.OutputTuple,
      ComputeUnitExitedEvent.OutputObject
    >;

    "ComputeUnitJoined(bytes32)": TypedContractEvent<
      ComputeUnitJoinedEvent.InputTuple,
      ComputeUnitJoinedEvent.OutputTuple,
      ComputeUnitJoinedEvent.OutputObject
    >;
    ComputeUnitJoined: TypedContractEvent<
      ComputeUnitJoinedEvent.InputTuple,
      ComputeUnitJoinedEvent.OutputTuple,
      ComputeUnitJoinedEvent.OutputObject
    >;

    "WorkerIdUpdated(bytes32,bytes32)": TypedContractEvent<
      WorkerIdUpdatedEvent.InputTuple,
      WorkerIdUpdatedEvent.OutputTuple,
      WorkerIdUpdatedEvent.OutputObject
    >;
    WorkerIdUpdated: TypedContractEvent<
      WorkerIdUpdatedEvent.InputTuple,
      WorkerIdUpdatedEvent.OutputTuple,
      WorkerIdUpdatedEvent.OutputObject
    >;
  };
}
