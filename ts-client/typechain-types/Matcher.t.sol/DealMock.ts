/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type CIDV1Struct = { prefixes: BytesLike; hash: BytesLike };

export type CIDV1StructOutput = [prefixes: string, hash: string] & {
  prefixes: string;
  hash: string;
};

export interface DealMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessType"
      | "addComputeUnit"
      | "appCID"
      | "computeProviderByUnitId"
      | "creationBlock"
      | "effectors"
      | "getComputeUnitCount"
      | "isInAccessList"
      | "paymentToken"
      | "pricePerWorkerEpoch"
      | "targetWorkers"
      | "unitExists"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accessType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addComputeUnit",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "appCID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeProviderByUnitId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "effectors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getComputeUnitCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInAccessList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerWorkerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unitExists",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "accessType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addComputeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appCID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeProviderByUnitId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "effectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComputeUnitCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInAccessList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerWorkerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unitExists", data: BytesLike): Result;
}

export interface DealMock extends BaseContract {
  connect(runner?: ContractRunner | null): DealMock;
  waitForDeployment(): Promise<this>;

  interface: DealMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessType: TypedContractMethod<[], [bigint], "view">;

  addComputeUnit: TypedContractMethod<
    [computeProvider: AddressLike, unitId: BytesLike],
    [void],
    "nonpayable"
  >;

  appCID: TypedContractMethod<
    [],
    [[string, string] & { prefixes: string; hash: string }],
    "view"
  >;

  computeProviderByUnitId: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "view"
  >;

  creationBlock: TypedContractMethod<[], [bigint], "view">;

  effectors: TypedContractMethod<[], [CIDV1StructOutput[]], "view">;

  getComputeUnitCount: TypedContractMethod<[], [bigint], "view">;

  isInAccessList: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  pricePerWorkerEpoch: TypedContractMethod<[], [bigint], "view">;

  targetWorkers: TypedContractMethod<[], [bigint], "view">;

  unitExists: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addComputeUnit"
  ): TypedContractMethod<
    [computeProvider: AddressLike, unitId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "appCID"
  ): TypedContractMethod<
    [],
    [[string, string] & { prefixes: string; hash: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeProviderByUnitId"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "creationBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "effectors"
  ): TypedContractMethod<[], [CIDV1StructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getComputeUnitCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isInAccessList"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pricePerWorkerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetWorkers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unitExists"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  filters: {};
}
