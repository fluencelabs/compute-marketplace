/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GlobalConstInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRECISION"
      | "collateralPerUnit"
      | "currentEpoch"
      | "epochDuration"
      | "fltPrice"
      | "fluenceToken"
      | "initTimestamp"
      | "maxCCProofs"
      | "maxCapacityRewardPerEpoch"
      | "maxFailedRatio"
      | "minCapacityCommitmentDuration"
      | "minCapacityRewardPerEpoch"
      | "minDepositedEpoches"
      | "minRematchingEpoches"
      | "minRequierdCCProofs"
      | "owner"
      | "renounceOwnership"
      | "setConstant"
      | "slashingRate"
      | "targetRevenuePerEpoch"
      | "transferOwnership"
      | "vestingDuration"
      | "withdrawCCEpochesAfterFailed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConstantsUpdated"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralPerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fltPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fluenceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCCProofs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCapacityRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFailedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCapacityCommitmentDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCapacityRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositedEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRematchingEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRequierdCCProofs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConstant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetRevenuePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCCEpochesAfterFailed",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralPerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fltPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCCProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCapacityRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFailedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCapacityCommitmentDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCapacityRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositedEpoches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRematchingEpoches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRequierdCCProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetRevenuePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCCEpochesAfterFailed",
    data: BytesLike
  ): Result;
}

export namespace ConstantsUpdatedEvent {
  export type InputTuple = [constantType: BigNumberish, value: BigNumberish];
  export type OutputTuple = [constantType: bigint, value: bigint];
  export interface OutputObject {
    constantType: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GlobalConst extends BaseContract {
  connect(runner?: ContractRunner | null): GlobalConst;
  waitForDeployment(): Promise<this>;

  interface: GlobalConstInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  collateralPerUnit: TypedContractMethod<[], [bigint], "view">;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  epochDuration: TypedContractMethod<[], [bigint], "view">;

  fltPrice: TypedContractMethod<[], [bigint], "view">;

  fluenceToken: TypedContractMethod<[], [string], "view">;

  initTimestamp: TypedContractMethod<[], [bigint], "view">;

  maxCCProofs: TypedContractMethod<[], [bigint], "view">;

  maxCapacityRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  maxFailedRatio: TypedContractMethod<[], [bigint], "view">;

  minCapacityCommitmentDuration: TypedContractMethod<[], [bigint], "view">;

  minCapacityRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  minDepositedEpoches: TypedContractMethod<[], [bigint], "view">;

  minRematchingEpoches: TypedContractMethod<[], [bigint], "view">;

  minRequierdCCProofs: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setConstant: TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  slashingRate: TypedContractMethod<[], [bigint], "view">;

  targetRevenuePerEpoch: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vestingDuration: TypedContractMethod<[], [bigint], "view">;

  withdrawCCEpochesAfterFailed: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collateralPerUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fltPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fluenceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCCProofs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCapacityRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFailedRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCapacityCommitmentDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCapacityRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDepositedEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minRematchingEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minRequierdCCProofs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConstant"
  ): TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetRevenuePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vestingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawCCEpochesAfterFailed"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ConstantsUpdated"
  ): TypedContractEvent<
    ConstantsUpdatedEvent.InputTuple,
    ConstantsUpdatedEvent.OutputTuple,
    ConstantsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ConstantsUpdated(uint8,uint256)": TypedContractEvent<
      ConstantsUpdatedEvent.InputTuple,
      ConstantsUpdatedEvent.OutputTuple,
      ConstantsUpdatedEvent.OutputObject
    >;
    ConstantsUpdated: TypedContractEvent<
      ConstantsUpdatedEvent.InputTuple,
      ConstantsUpdatedEvent.OutputTuple,
      ConstantsUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
