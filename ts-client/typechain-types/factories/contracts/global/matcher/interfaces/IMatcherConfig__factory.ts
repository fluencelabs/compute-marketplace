/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMatcherConfig,
  IMatcherConfigInterface,
} from "../../../../../contracts/global/matcher/interfaces/IMatcherConfig";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "computeProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minPricePerEpoch",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxCollateral",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "paymentToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "prefixes",
            type: "bytes4",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct CIDV1[]",
        name: "effectors",
        type: "tuple[]",
      },
    ],
    name: "ComputeProviderRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "computeProvider",
        type: "address",
      },
    ],
    name: "ComputeProviderRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "computeProvider",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "prefixes",
            type: "bytes4",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct CIDV1",
        name: "effector",
        type: "tuple",
      },
    ],
    name: "EffectorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "computeProvider",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "prefixes",
            type: "bytes4",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct CIDV1",
        name: "effector",
        type: "tuple",
      },
    ],
    name: "EffectorRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "computeProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newMaxCollateral",
        type: "uint256",
      },
    ],
    name: "MaxCollateralChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "computeProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newMinPricePerEpoch",
        type: "uint256",
      },
    ],
    name: "MinPricePerEpochChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "computeProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "newPaymentToken",
        type: "address",
      },
    ],
    name: "PaymentTokenChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "peerId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newWorkerSlots",
        type: "uint256",
      },
    ],
    name: "WorkersSlotsChanged",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "prefixes",
            type: "bytes4",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct CIDV1",
        name: "effector",
        type: "tuple",
      },
    ],
    name: "addEffector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "peerId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "workerSlots",
        type: "uint256",
      },
    ],
    name: "addWorkersSlots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMaxCollateral",
        type: "uint256",
      },
    ],
    name: "changeMaxCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMinPricePerEpoch",
        type: "uint256",
      },
    ],
    name: "changeMinPricePerEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "newPaymentToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newMaxCollateral",
        type: "uint256",
      },
    ],
    name: "changePaymentToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "peerId",
        type: "bytes32",
      },
    ],
    name: "getComputePeerInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "freeWorkerSlots",
            type: "uint256",
          },
        ],
        internalType: "struct IMatcherConfig.ComputePeer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "getComputeProviderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "minPricePerEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxCollateral",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "paymentToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalFreeWorkerSlots",
            type: "uint256",
          },
        ],
        internalType: "struct IMatcherConfig.ComputeProvider",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "getPeersByComputeProvider",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "peerIds",
        type: "bytes32[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "freeWorkerSlots",
            type: "uint256",
          },
        ],
        internalType: "struct IMatcherConfig.ComputePeer[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minPricePerEpoch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxCollateral",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "paymentToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "prefixes",
            type: "bytes4",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct CIDV1[]",
        name: "effectors",
        type: "tuple[]",
      },
    ],
    name: "registerComputeProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeComputeProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "prefixes",
            type: "bytes4",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct CIDV1",
        name: "effector",
        type: "tuple",
      },
    ],
    name: "removeEffector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "peerId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "workerSlots",
        type: "uint256",
      },
    ],
    name: "subWorkersSlots",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMatcherConfig__factory {
  static readonly abi = _abi;
  static createInterface(): IMatcherConfigInterface {
    return new Interface(_abi) as IMatcherConfigInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMatcherConfig {
    return new Contract(address, _abi, runner) as unknown as IMatcherConfig;
  }
}
