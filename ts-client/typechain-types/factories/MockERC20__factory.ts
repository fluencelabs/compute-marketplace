/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common.js";
import type { MockERC20, MockERC20Interface } from "../MockERC20.js";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576113cb908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde0314610e5857508163095ea7b314610dbb5781631624f6c61461090757816318160ddd146108ca57816323b872dd1461079d578163313ce5671461075d5781633644e5151461071b57816370a08231146106ba5781637ecebe001461065857816395d89b411461053d578163a9059cbb1461047e578163d505accf1461012a575063dd62ed3e146100b457600080fd5b3461012657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012657806020926100ee611045565b6100f661106d565b73ffffffffffffffffffffffffffffffffffffffff91821683526005865283832091168252845220549051908152f35b5080fd5b90503461047a5760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261047a57610163611045565b61016b61106d565b9260443590606435936084359360ff85168095036104765742861061041957610192611105565b9673ffffffffffffffffffffffffffffffffffffffff80921696878a5260209660088852858b20998a549a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c146103ed5760018c019055865192858a8501957f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c987528c8a870152169b8c606086015289608086015260a085015260c084015260c0835260e0830167ffffffffffffffff94848210868311176103c157818952845190206101008501927f19010000000000000000000000000000000000000000000000000000000000008452610102860152610122850152604281526101608401948186109086111761039557848852519020835261018082015260a4356101a082015260c4356101c0909101528880528590899060809060015afa1561038b578751169081151580610382575b1561032657508652600583528086208587528352808620829055519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a380f35b606490858451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600e60248201527f494e56414c49445f5349474e45520000000000000000000000000000000000006044820152fd5b508582146102e1565b82513d89823e3d90fd5b60248d6041897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248e60418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248d6011897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152fd5b8780fd5b8280fd5b90503461047a57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261047a57916020926104ba611045565b908373ffffffffffffffffffffffffffffffffffffffff602435933386528388526104e88584882054611323565b3387528489528387205516938481526105048483832054611282565b928582528752205582519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843392a35160018152f35b50503461012657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101265780519082600180549161057f83610f1c565b8086529282811690811561061257506001146105b6575b5050506105a8826105b2940383610f6f565b5191829182610fdf565b0390f35b94508085527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8286106105fa575050506105a88260206105b29582010194610596565b805460208787018101919091529095019481016105dd565b6105b29750869350602092506105a89491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b82010194610596565b5050346101265760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126578060209273ffffffffffffffffffffffffffffffffffffffff6106aa611045565b1681526008845220549051908152f35b90503461047a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261047a57602092829173ffffffffffffffffffffffffffffffffffffffff61070d611045565b168252845220549051908152f35b50503461012657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012657602090610756611105565b9051908152f35b50503461012657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101265760209060ff600254169051908152f35b8284346108c75760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108c7576107d6611045565b927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61080061106d565b60443573ffffffffffffffffffffffffffffffffffffffff8097169384865286602098899460058652828920338a52865282892054857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108a4575b505087895283865261087385848b2054611323565b888a52848752838a2055169687815261088f8483832054611282565b92888252855220558551908152a35160018152f35b6108ad91611323565b888a5260058752838a20338b528752838a20558b8561085e565b80fd5b50503461012657817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610126576020906003549051908152f35b839150346101265760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101265767ffffffffffffffff928135848111610db7576109599036908401611090565b93602435818111610db3576109719036908501611090565b926044359260ff8416809403610daf5760ff60095416610d5257508551828111610d2657806109a08754610f1c565b97601f98898111610cbb575b50602090898311600114610c00578892610bf5575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161785555b8351918211610bc95750600192610a0a8454610f1c565b868111610b67575b506020958211600114610aad579484958293949592610aa2575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82851b9260031b1c19161782555b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009081600254161760025546600655610a9461111f565b600755600954161760095580f35b015190508580610a2c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08216958486527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf691865b888110610b5157508386979896959610610b1a575b505050811b018255610a5d565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055858080610b0d565b8183015184559286019260209283019201610af8565b8486527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68780850160051c82019260208610610bc0575b0160051c019085905b828110610bb5575050610a12565b878155018590610ba7565b92508192610b9e565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b0151905088806109c1565b8880527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016895b818110610ca35750908460019594939210610c6c575b505050811b0185556109f3565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055888080610c5f565b92936020600181928786015181550195019301610c49565b9091508780527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638980850160051c82019260208610610d1d575b9085949392910160051c01905b818110610d0f57506109ac565b898155849350600101610d02565b92508192610cf5565b6024866041847f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b90602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601360248201527f414c52454144595f494e495449414c495a4544000000000000000000000000006044820152fd5b8580fd5b8480fd5b8380fd5b50503461012657807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101265760209181610df7611045565b916024359182913381526005875273ffffffffffffffffffffffffffffffffffffffff8282209516948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8490843461047a57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261047a57828054610e9581610f1c565b808552916001918083169081156106125750600114610ec0575050506105a8826105b2940383610f6f565b80809650527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828610610f04575050506105a88260206105b29582010194610596565b80546020878701810191909152909501948101610ee7565b90600182811c92168015610f65575b6020831014610f3657565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610f2b565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610fb057604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60208082528251818301819052939260005b858110611031575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201610ff1565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361106857565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361106857565b81601f820112156110685780359067ffffffffffffffff8211610fb057604051926110e360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185610f6f565b8284526020838301011161106857816000926020809301838601378301015290565b60065446036111145760075490565b61111c61111f565b90565b60405160009081549061113182610f1c565b80825281602094858201946001908782821691826000146112465750506001146111ec575b5061116392500382610f6f565b51902090604051908101917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f835260408201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff821117610fb05760405251902090565b6000808052879250907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b85831061122e575050611163935082010138611156565b80548388018501528694508893909201918101611217565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016885261116395151560051b85010192503891506111569050565b908101908181116112f45781106112965790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f7700000000000000006044820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b908082106113375781039081116112f45790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f77000000006044820152fdfea264697066735822122059068d5ff63af02cec043a47ec28921277c442c78cda8a3ced4ce693f79d638064736f6c63430008130033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockERC20";
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }
  static readonly contractName: "MockERC20";

  public readonly contractName: "MockERC20";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
