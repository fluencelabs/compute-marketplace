/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type CIDV1Struct = { prefixes: BytesLike; hash: BytesLike };

export type CIDV1StructOutput = [prefixes: string, hash: string] & {
  prefixes: string;
  hash: string;
};

export interface IConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessType"
      | "appCID"
      | "changeAccessType"
      | "creationBlock"
      | "effectors"
      | "getAccessList"
      | "isInAccessList"
      | "maxWorkersPerProvider"
      | "minWorkers"
      | "paymentToken"
      | "pricePerWorkerEpoch"
      | "removeFromAccessList"
      | "setAppCID"
      | "targetWorkers"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AppCIDChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "accessType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "appCID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAccessType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "effectors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccessList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInAccessList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWorkersPerProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerWorkerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromAccessList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppCID",
    values: [CIDV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "targetWorkers",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "accessType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appCID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAccessType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "effectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccessList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInAccessList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWorkersPerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minWorkers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerWorkerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromAccessList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAppCID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetWorkers",
    data: BytesLike
  ): Result;
}

export namespace AppCIDChangedEvent {
  export type InputTuple = [newAppCID: CIDV1Struct];
  export type OutputTuple = [newAppCID: CIDV1StructOutput];
  export interface OutputObject {
    newAppCID: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IConfig extends BaseContract {
  connect(runner?: ContractRunner | null): IConfig;
  waitForDeployment(): Promise<this>;

  interface: IConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessType: TypedContractMethod<[], [bigint], "view">;

  appCID: TypedContractMethod<[], [CIDV1StructOutput], "view">;

  changeAccessType: TypedContractMethod<
    [accessType_: BigNumberish],
    [void],
    "nonpayable"
  >;

  creationBlock: TypedContractMethod<[], [bigint], "view">;

  effectors: TypedContractMethod<[], [CIDV1StructOutput[]], "view">;

  getAccessList: TypedContractMethod<[], [string[]], "view">;

  isInAccessList: TypedContractMethod<[addr: AddressLike], [boolean], "view">;

  maxWorkersPerProvider: TypedContractMethod<[], [bigint], "view">;

  minWorkers: TypedContractMethod<[], [bigint], "view">;

  paymentToken: TypedContractMethod<[], [string], "view">;

  pricePerWorkerEpoch: TypedContractMethod<[], [bigint], "view">;

  removeFromAccessList: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  setAppCID: TypedContractMethod<[appCID_: CIDV1Struct], [void], "nonpayable">;

  targetWorkers: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "appCID"
  ): TypedContractMethod<[], [CIDV1StructOutput], "view">;
  getFunction(
    nameOrSignature: "changeAccessType"
  ): TypedContractMethod<[accessType_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "creationBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "effectors"
  ): TypedContractMethod<[], [CIDV1StructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAccessList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isInAccessList"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxWorkersPerProvider"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minWorkers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pricePerWorkerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeFromAccessList"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAppCID"
  ): TypedContractMethod<[appCID_: CIDV1Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetWorkers"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AppCIDChanged"
  ): TypedContractEvent<
    AppCIDChangedEvent.InputTuple,
    AppCIDChangedEvent.OutputTuple,
    AppCIDChangedEvent.OutputObject
  >;

  filters: {
    "AppCIDChanged(tuple)": TypedContractEvent<
      AppCIDChangedEvent.InputTuple,
      AppCIDChangedEvent.OutputTuple,
      AppCIDChangedEvent.OutputObject
    >;
    AppCIDChanged: TypedContractEvent<
      AppCIDChangedEvent.InputTuple,
      AppCIDChangedEvent.OutputTuple,
      AppCIDChangedEvent.OutputObject
    >;
  };
}
