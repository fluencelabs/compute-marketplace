/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IGlobalCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "currentEpoch"
      | "epochDuration"
      | "factory"
      | "fluenceToken"
      | "initialize"
      | "matcher"
      | "setFactory"
      | "setMatcher"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FactorySet" | "MatcherSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fluenceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "matcher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMatcher",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matcher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMatcher", data: BytesLike): Result;
}

export namespace FactorySetEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatcherSetEvent {
  export type InputTuple = [matcher: AddressLike];
  export type OutputTuple = [matcher: string];
  export interface OutputObject {
    matcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGlobalCore extends BaseContract {
  connect(runner?: ContractRunner | null): IGlobalCore;
  waitForDeployment(): Promise<this>;

  interface: IGlobalCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  epochDuration: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  fluenceToken: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [fluenceToken_: AddressLike, epochDuration_: BigNumberish],
    [void],
    "nonpayable"
  >;

  matcher: TypedContractMethod<[], [string], "view">;

  setFactory: TypedContractMethod<
    [factory_: AddressLike],
    [void],
    "nonpayable"
  >;

  setMatcher: TypedContractMethod<
    [matcher_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fluenceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [fluenceToken_: AddressLike, epochDuration_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "matcher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFactory"
  ): TypedContractMethod<[factory_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMatcher"
  ): TypedContractMethod<[matcher_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FactorySet"
  ): TypedContractEvent<
    FactorySetEvent.InputTuple,
    FactorySetEvent.OutputTuple,
    FactorySetEvent.OutputObject
  >;
  getEvent(
    key: "MatcherSet"
  ): TypedContractEvent<
    MatcherSetEvent.InputTuple,
    MatcherSetEvent.OutputTuple,
    MatcherSetEvent.OutputObject
  >;

  filters: {
    "FactorySet(address)": TypedContractEvent<
      FactorySetEvent.InputTuple,
      FactorySetEvent.OutputTuple,
      FactorySetEvent.OutputObject
    >;
    FactorySet: TypedContractEvent<
      FactorySetEvent.InputTuple,
      FactorySetEvent.OutputTuple,
      FactorySetEvent.OutputObject
    >;

    "MatcherSet(address)": TypedContractEvent<
      MatcherSetEvent.InputTuple,
      MatcherSetEvent.OutputTuple,
      MatcherSetEvent.OutputObject
    >;
    MatcherSet: TypedContractEvent<
      MatcherSetEvent.InputTuple,
      MatcherSetEvent.OutputTuple,
      MatcherSetEvent.OutputObject
    >;
  };
}
