/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type CIDV1Struct = { prefixes: BytesLike; hash: BytesLike };

export type CIDV1StructOutput = [prefixes: string, hash: string] & {
  prefixes: string;
  hash: string;
};

export declare namespace IMatcherConfig {
  export type ComputePeerStruct = { freeWorkerSlots: BigNumberish };

  export type ComputePeerStructOutput = [freeWorkerSlots: bigint] & {
    freeWorkerSlots: bigint;
  };

  export type ComputeProviderStruct = {
    minPricePerEpoch: BigNumberish;
    maxCollateral: BigNumberish;
    paymentToken: AddressLike;
    totalFreeWorkerSlots: BigNumberish;
  };

  export type ComputeProviderStructOutput = [
    minPricePerEpoch: bigint,
    maxCollateral: bigint,
    paymentToken: string,
    totalFreeWorkerSlots: bigint
  ] & {
    minPricePerEpoch: bigint;
    maxCollateral: bigint;
    paymentToken: string;
    totalFreeWorkerSlots: bigint;
  };
}

export interface IMatcherConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEffector"
      | "addWorkersSlots"
      | "changeMaxCollateral"
      | "changeMinPricePerEpoch"
      | "changePaymentToken"
      | "getComputePeerInfo"
      | "getComputeProviderInfo"
      | "getPeersByComputeProvider"
      | "registerComputeProvider"
      | "removeComputeProvider"
      | "removeEffector"
      | "subWorkersSlots"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComputeProviderRegistered"
      | "ComputeProviderRemoved"
      | "EffectorAdded"
      | "EffectorRemoved"
      | "MaxCollateralChanged"
      | "MinPricePerEpochChanged"
      | "PaymentTokenChanged"
      | "WorkersSlotsChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addEffector",
    values: [CIDV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "addWorkersSlots",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinPricePerEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePaymentToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputePeerInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeProviderInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeersByComputeProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComputeProvider",
    values: [BigNumberish, BigNumberish, AddressLike, CIDV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComputeProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeEffector",
    values: [CIDV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "subWorkersSlots",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEffector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWorkersSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinPricePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputePeerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeProviderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeersByComputeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComputeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComputeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEffector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subWorkersSlots",
    data: BytesLike
  ): Result;
}

export namespace ComputeProviderRegisteredEvent {
  export type InputTuple = [
    computeProvider: AddressLike,
    minPricePerEpoch: BigNumberish,
    maxCollateral: BigNumberish,
    paymentToken: AddressLike,
    effectors: CIDV1Struct[]
  ];
  export type OutputTuple = [
    computeProvider: string,
    minPricePerEpoch: bigint,
    maxCollateral: bigint,
    paymentToken: string,
    effectors: CIDV1StructOutput[]
  ];
  export interface OutputObject {
    computeProvider: string;
    minPricePerEpoch: bigint;
    maxCollateral: bigint;
    paymentToken: string;
    effectors: CIDV1StructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeProviderRemovedEvent {
  export type InputTuple = [computeProvider: AddressLike];
  export type OutputTuple = [computeProvider: string];
  export interface OutputObject {
    computeProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorAddedEvent {
  export type InputTuple = [
    computeProvider: AddressLike,
    effector: CIDV1Struct
  ];
  export type OutputTuple = [
    computeProvider: string,
    effector: CIDV1StructOutput
  ];
  export interface OutputObject {
    computeProvider: string;
    effector: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorRemovedEvent {
  export type InputTuple = [
    computeProvider: AddressLike,
    effector: CIDV1Struct
  ];
  export type OutputTuple = [
    computeProvider: string,
    effector: CIDV1StructOutput
  ];
  export interface OutputObject {
    computeProvider: string;
    effector: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxCollateralChangedEvent {
  export type InputTuple = [
    computeProvider: AddressLike,
    newMaxCollateral: BigNumberish
  ];
  export type OutputTuple = [computeProvider: string, newMaxCollateral: bigint];
  export interface OutputObject {
    computeProvider: string;
    newMaxCollateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinPricePerEpochChangedEvent {
  export type InputTuple = [
    computeProvider: AddressLike,
    newMinPricePerEpoch: BigNumberish
  ];
  export type OutputTuple = [
    computeProvider: string,
    newMinPricePerEpoch: bigint
  ];
  export interface OutputObject {
    computeProvider: string;
    newMinPricePerEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenChangedEvent {
  export type InputTuple = [
    computeProvider: AddressLike,
    newPaymentToken: AddressLike
  ];
  export type OutputTuple = [computeProvider: string, newPaymentToken: string];
  export interface OutputObject {
    computeProvider: string;
    newPaymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkersSlotsChangedEvent {
  export type InputTuple = [peerId: BytesLike, newWorkerSlots: BigNumberish];
  export type OutputTuple = [peerId: string, newWorkerSlots: bigint];
  export interface OutputObject {
    peerId: string;
    newWorkerSlots: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMatcherConfig extends BaseContract {
  connect(runner?: ContractRunner | null): IMatcherConfig;
  waitForDeployment(): Promise<this>;

  interface: IMatcherConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEffector: TypedContractMethod<
    [effector: CIDV1Struct],
    [void],
    "nonpayable"
  >;

  addWorkersSlots: TypedContractMethod<
    [peerId: BytesLike, workerSlots: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeMaxCollateral: TypedContractMethod<
    [newMaxCollateral: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeMinPricePerEpoch: TypedContractMethod<
    [newMinPricePerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  changePaymentToken: TypedContractMethod<
    [newPaymentToken: AddressLike, newMaxCollateral: BigNumberish],
    [void],
    "nonpayable"
  >;

  getComputePeerInfo: TypedContractMethod<
    [peerId: BytesLike],
    [IMatcherConfig.ComputePeerStructOutput],
    "view"
  >;

  getComputeProviderInfo: TypedContractMethod<
    [provider: AddressLike],
    [IMatcherConfig.ComputeProviderStructOutput],
    "view"
  >;

  getPeersByComputeProvider: TypedContractMethod<
    [provider: AddressLike],
    [
      [string[], IMatcherConfig.ComputePeerStructOutput[]] & {
        peerIds: string[];
      }
    ],
    "view"
  >;

  registerComputeProvider: TypedContractMethod<
    [
      minPricePerEpoch: BigNumberish,
      maxCollateral: BigNumberish,
      paymentToken: AddressLike,
      effectors: CIDV1Struct[]
    ],
    [void],
    "nonpayable"
  >;

  removeComputeProvider: TypedContractMethod<[], [void], "nonpayable">;

  removeEffector: TypedContractMethod<
    [effector: CIDV1Struct],
    [void],
    "nonpayable"
  >;

  subWorkersSlots: TypedContractMethod<
    [peerId: BytesLike, workerSlots: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEffector"
  ): TypedContractMethod<[effector: CIDV1Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addWorkersSlots"
  ): TypedContractMethod<
    [peerId: BytesLike, workerSlots: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeMaxCollateral"
  ): TypedContractMethod<
    [newMaxCollateral: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeMinPricePerEpoch"
  ): TypedContractMethod<
    [newMinPricePerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePaymentToken"
  ): TypedContractMethod<
    [newPaymentToken: AddressLike, newMaxCollateral: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getComputePeerInfo"
  ): TypedContractMethod<
    [peerId: BytesLike],
    [IMatcherConfig.ComputePeerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComputeProviderInfo"
  ): TypedContractMethod<
    [provider: AddressLike],
    [IMatcherConfig.ComputeProviderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPeersByComputeProvider"
  ): TypedContractMethod<
    [provider: AddressLike],
    [
      [string[], IMatcherConfig.ComputePeerStructOutput[]] & {
        peerIds: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerComputeProvider"
  ): TypedContractMethod<
    [
      minPricePerEpoch: BigNumberish,
      maxCollateral: BigNumberish,
      paymentToken: AddressLike,
      effectors: CIDV1Struct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeComputeProvider"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeEffector"
  ): TypedContractMethod<[effector: CIDV1Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subWorkersSlots"
  ): TypedContractMethod<
    [peerId: BytesLike, workerSlots: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ComputeProviderRegistered"
  ): TypedContractEvent<
    ComputeProviderRegisteredEvent.InputTuple,
    ComputeProviderRegisteredEvent.OutputTuple,
    ComputeProviderRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ComputeProviderRemoved"
  ): TypedContractEvent<
    ComputeProviderRemovedEvent.InputTuple,
    ComputeProviderRemovedEvent.OutputTuple,
    ComputeProviderRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EffectorAdded"
  ): TypedContractEvent<
    EffectorAddedEvent.InputTuple,
    EffectorAddedEvent.OutputTuple,
    EffectorAddedEvent.OutputObject
  >;
  getEvent(
    key: "EffectorRemoved"
  ): TypedContractEvent<
    EffectorRemovedEvent.InputTuple,
    EffectorRemovedEvent.OutputTuple,
    EffectorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MaxCollateralChanged"
  ): TypedContractEvent<
    MaxCollateralChangedEvent.InputTuple,
    MaxCollateralChangedEvent.OutputTuple,
    MaxCollateralChangedEvent.OutputObject
  >;
  getEvent(
    key: "MinPricePerEpochChanged"
  ): TypedContractEvent<
    MinPricePerEpochChangedEvent.InputTuple,
    MinPricePerEpochChangedEvent.OutputTuple,
    MinPricePerEpochChangedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTokenChanged"
  ): TypedContractEvent<
    PaymentTokenChangedEvent.InputTuple,
    PaymentTokenChangedEvent.OutputTuple,
    PaymentTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "WorkersSlotsChanged"
  ): TypedContractEvent<
    WorkersSlotsChangedEvent.InputTuple,
    WorkersSlotsChangedEvent.OutputTuple,
    WorkersSlotsChangedEvent.OutputObject
  >;

  filters: {
    "ComputeProviderRegistered(address,uint256,uint256,address,tuple[])": TypedContractEvent<
      ComputeProviderRegisteredEvent.InputTuple,
      ComputeProviderRegisteredEvent.OutputTuple,
      ComputeProviderRegisteredEvent.OutputObject
    >;
    ComputeProviderRegistered: TypedContractEvent<
      ComputeProviderRegisteredEvent.InputTuple,
      ComputeProviderRegisteredEvent.OutputTuple,
      ComputeProviderRegisteredEvent.OutputObject
    >;

    "ComputeProviderRemoved(address)": TypedContractEvent<
      ComputeProviderRemovedEvent.InputTuple,
      ComputeProviderRemovedEvent.OutputTuple,
      ComputeProviderRemovedEvent.OutputObject
    >;
    ComputeProviderRemoved: TypedContractEvent<
      ComputeProviderRemovedEvent.InputTuple,
      ComputeProviderRemovedEvent.OutputTuple,
      ComputeProviderRemovedEvent.OutputObject
    >;

    "EffectorAdded(address,tuple)": TypedContractEvent<
      EffectorAddedEvent.InputTuple,
      EffectorAddedEvent.OutputTuple,
      EffectorAddedEvent.OutputObject
    >;
    EffectorAdded: TypedContractEvent<
      EffectorAddedEvent.InputTuple,
      EffectorAddedEvent.OutputTuple,
      EffectorAddedEvent.OutputObject
    >;

    "EffectorRemoved(address,tuple)": TypedContractEvent<
      EffectorRemovedEvent.InputTuple,
      EffectorRemovedEvent.OutputTuple,
      EffectorRemovedEvent.OutputObject
    >;
    EffectorRemoved: TypedContractEvent<
      EffectorRemovedEvent.InputTuple,
      EffectorRemovedEvent.OutputTuple,
      EffectorRemovedEvent.OutputObject
    >;

    "MaxCollateralChanged(address,uint256)": TypedContractEvent<
      MaxCollateralChangedEvent.InputTuple,
      MaxCollateralChangedEvent.OutputTuple,
      MaxCollateralChangedEvent.OutputObject
    >;
    MaxCollateralChanged: TypedContractEvent<
      MaxCollateralChangedEvent.InputTuple,
      MaxCollateralChangedEvent.OutputTuple,
      MaxCollateralChangedEvent.OutputObject
    >;

    "MinPricePerEpochChanged(address,uint256)": TypedContractEvent<
      MinPricePerEpochChangedEvent.InputTuple,
      MinPricePerEpochChangedEvent.OutputTuple,
      MinPricePerEpochChangedEvent.OutputObject
    >;
    MinPricePerEpochChanged: TypedContractEvent<
      MinPricePerEpochChangedEvent.InputTuple,
      MinPricePerEpochChangedEvent.OutputTuple,
      MinPricePerEpochChangedEvent.OutputObject
    >;

    "PaymentTokenChanged(address,address)": TypedContractEvent<
      PaymentTokenChangedEvent.InputTuple,
      PaymentTokenChangedEvent.OutputTuple,
      PaymentTokenChangedEvent.OutputObject
    >;
    PaymentTokenChanged: TypedContractEvent<
      PaymentTokenChangedEvent.InputTuple,
      PaymentTokenChangedEvent.OutputTuple,
      PaymentTokenChangedEvent.OutputObject
    >;

    "WorkersSlotsChanged(bytes32,uint256)": TypedContractEvent<
      WorkersSlotsChangedEvent.InputTuple,
      WorkersSlotsChangedEvent.OutputTuple,
      WorkersSlotsChangedEvent.OutputObject
    >;
    WorkersSlotsChanged: TypedContractEvent<
      WorkersSlotsChangedEvent.InputTuple,
      WorkersSlotsChangedEvent.OutputTuple,
      WorkersSlotsChangedEvent.OutputObject
    >;
  };
}
