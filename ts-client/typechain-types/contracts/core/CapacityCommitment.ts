/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type CIDV1Struct = { prefixes: BytesLike; hash: BytesLike };

export type CIDV1StructOutput = [prefixes: string, hash: string] & {
  prefixes: string;
  hash: string;
};

export declare namespace Market {
  export type RegisterComputePeerStruct = {
    peerId: BytesLike;
    freeUnits: BigNumberish;
  };

  export type RegisterComputePeerStructOutput = [
    peerId: string,
    freeUnits: bigint
  ] & { peerId: string; freeUnits: bigint };

  export type ComputeUnitStruct = {
    index: BigNumberish;
    deal: AddressLike;
    peerId: BytesLike;
  };

  export type ComputeUnitStructOutput = [
    index: bigint,
    deal: string,
    peerId: string
  ] & { index: bigint; deal: string; peerId: string };

  export type OfferInfoStruct = {
    owner: AddressLike;
    minPricePerWorkerEpoch: BigNumberish;
    paymentToken: AddressLike;
  };

  export type OfferInfoStructOutput = [
    owner: string,
    minPricePerWorkerEpoch: bigint,
    paymentToken: string
  ] & { owner: string; minPricePerWorkerEpoch: bigint; paymentToken: string };

  export type ComputePeerInfoStruct = {
    offerId: BytesLike;
    commitmentId: BytesLike;
    unitCount: BigNumberish;
  };

  export type ComputePeerInfoStructOutput = [
    offerId: string,
    commitmentId: string,
    unitCount: bigint
  ] & { offerId: string; commitmentId: string; unitCount: bigint };
}

export interface CapacityCommitmentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRECISION"
      | "addComputePeers"
      | "addComputeUnits"
      | "addEffector"
      | "changeMinPricePerWorkerEpoch"
      | "changePaymentToken"
      | "collateralPerUnit"
      | "commitCCSnapshot"
      | "createCapacityCommitment"
      | "currentEpoch"
      | "epochDuration"
      | "finishCapacityCommitment"
      | "fltPrice"
      | "fluenceToken"
      | "getCCStatus"
      | "getComputeUnit"
      | "getOffer"
      | "getPeer"
      | "initTimestamp"
      | "lockCollateral"
      | "maxCCProofs"
      | "maxCapacityRewardPerEpoch"
      | "maxFailedRatio"
      | "minCapacityCommitmentDuration"
      | "minCapacityRewardPerEpoch"
      | "minDepositedEpoches"
      | "minRematchingEpoches"
      | "minRequierdCCProofs"
      | "owner"
      | "registerMarketOffer"
      | "removeCUFromCC"
      | "removeComputeUnit"
      | "removeEffector"
      | "removeTempCapacityCommitment"
      | "renounceOwnership"
      | "returnComputeUnitFromDeal"
      | "setConstant"
      | "slashingRate"
      | "submitProof"
      | "targetRevenuePerEpoch"
      | "totalRewards"
      | "transferOwnership"
      | "unlockedRewards"
      | "vestingDuration"
      | "withdraw"
      | "withdrawCCEpochesAfterFailed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComputeUnitAddedToDeal"
      | "ComputeUnitCreated"
      | "ComputeUnitRemovedFromDeal"
      | "ConstantsUpdated"
      | "EffectorAdded"
      | "EffectorRemoved"
      | "Initialized"
      | "MarkeOfferRegistered"
      | "MinPricePerEpochUpdated"
      | "OwnershipTransferred"
      | "PaymentTokenUpdated"
      | "PeerCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addComputePeers",
    values: [BytesLike, Market.RegisterComputePeerStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addComputeUnits",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addEffector",
    values: [BytesLike, CIDV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinPricePerWorkerEpoch",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePaymentToken",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitCCSnapshot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCapacityCommitment",
    values: [BytesLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishCapacityCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fltPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fluenceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCCStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeUnit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getOffer", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getPeer", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockCollateral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCCProofs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCapacityRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFailedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCapacityCommitmentDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCapacityRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositedEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRematchingEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRequierdCCProofs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerMarketOffer",
    values: [
      BytesLike,
      BigNumberish,
      AddressLike,
      CIDV1Struct[],
      Market.RegisterComputePeerStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCUFromCC",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComputeUnit",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEffector",
    values: [BytesLike, CIDV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTempCapacityCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnComputeUnitFromDeal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConstant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "targetRevenuePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockedRewards",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "withdrawCCEpochesAfterFailed",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addComputePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComputeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEffector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinPricePerWorkerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitCCSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCapacityCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishCapacityCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fltPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCCStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCCProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCapacityRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFailedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCapacityCommitmentDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCapacityRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositedEpoches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRematchingEpoches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRequierdCCProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMarketOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCUFromCC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComputeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEffector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTempCapacityCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnComputeUnitFromDeal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetRevenuePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCCEpochesAfterFailed",
    data: BytesLike
  ): Result;
}

export namespace ComputeUnitAddedToDealEvent {
  export type InputTuple = [unitId: BytesLike, deal: AddressLike];
  export type OutputTuple = [unitId: string, deal: string];
  export interface OutputObject {
    unitId: string;
    deal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeUnitCreatedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    peerId: BytesLike,
    unitId: BytesLike
  ];
  export type OutputTuple = [offerId: string, peerId: string, unitId: string];
  export interface OutputObject {
    offerId: string;
    peerId: string;
    unitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeUnitRemovedFromDealEvent {
  export type InputTuple = [unitId: BytesLike, deal: AddressLike];
  export type OutputTuple = [unitId: string, deal: string];
  export interface OutputObject {
    unitId: string;
    deal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConstantsUpdatedEvent {
  export type InputTuple = [constantType: BigNumberish, value: BigNumberish];
  export type OutputTuple = [constantType: bigint, value: bigint];
  export interface OutputObject {
    constantType: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorAddedEvent {
  export type InputTuple = [offerId: BytesLike, effector: CIDV1Struct];
  export type OutputTuple = [offerId: string, effector: CIDV1StructOutput];
  export interface OutputObject {
    offerId: string;
    effector: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorRemovedEvent {
  export type InputTuple = [offerId: BytesLike, effector: CIDV1Struct];
  export type OutputTuple = [offerId: string, effector: CIDV1StructOutput];
  export interface OutputObject {
    offerId: string;
    effector: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarkeOfferRegisteredEvent {
  export type InputTuple = [
    offerId: BytesLike,
    owner: AddressLike,
    minPricePerWorkerEpoch: BigNumberish,
    paymentToken: AddressLike,
    effectors: CIDV1Struct[]
  ];
  export type OutputTuple = [
    offerId: string,
    owner: string,
    minPricePerWorkerEpoch: bigint,
    paymentToken: string,
    effectors: CIDV1StructOutput[]
  ];
  export interface OutputObject {
    offerId: string;
    owner: string;
    minPricePerWorkerEpoch: bigint;
    paymentToken: string;
    effectors: CIDV1StructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinPricePerEpochUpdatedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    minPricePerWorkerEpoch: BigNumberish
  ];
  export type OutputTuple = [offerId: string, minPricePerWorkerEpoch: bigint];
  export interface OutputObject {
    offerId: string;
    minPricePerWorkerEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenUpdatedEvent {
  export type InputTuple = [offerId: BytesLike, paymentToken: AddressLike];
  export type OutputTuple = [offerId: string, paymentToken: string];
  export interface OutputObject {
    offerId: string;
    paymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerCreatedEvent {
  export type InputTuple = [offerId: BytesLike, peerId: BytesLike];
  export type OutputTuple = [offerId: string, peerId: string];
  export interface OutputObject {
    offerId: string;
    peerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CapacityCommitment extends BaseContract {
  connect(runner?: ContractRunner | null): CapacityCommitment;
  waitForDeployment(): Promise<this>;

  interface: CapacityCommitmentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  addComputePeers: TypedContractMethod<
    [offerId: BytesLike, peers: Market.RegisterComputePeerStruct[]],
    [void],
    "nonpayable"
  >;

  addComputeUnits: TypedContractMethod<
    [offerId: BytesLike, peerId: BytesLike, freeUnits: BigNumberish],
    [void],
    "nonpayable"
  >;

  addEffector: TypedContractMethod<
    [offerId: BytesLike, newEffectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;

  changeMinPricePerWorkerEpoch: TypedContractMethod<
    [offerId: BytesLike, newMinPricePerWorkerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  changePaymentToken: TypedContractMethod<
    [offerId: BytesLike, newPaymentToken: AddressLike],
    [void],
    "nonpayable"
  >;

  collateralPerUnit: TypedContractMethod<[], [bigint], "view">;

  commitCCSnapshot: TypedContractMethod<
    [commitmentId: BytesLike],
    [void],
    "nonpayable"
  >;

  createCapacityCommitment: TypedContractMethod<
    [
      peerId: BytesLike,
      duration: BigNumberish,
      delegator: AddressLike,
      rewardDelegationRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  epochDuration: TypedContractMethod<[], [bigint], "view">;

  finishCapacityCommitment: TypedContractMethod<
    [commitmentId: BytesLike],
    [void],
    "nonpayable"
  >;

  fltPrice: TypedContractMethod<[], [bigint], "view">;

  fluenceToken: TypedContractMethod<[], [string], "view">;

  getCCStatus: TypedContractMethod<[commitmentId: BytesLike], [bigint], "view">;

  getComputeUnit: TypedContractMethod<
    [unitId: BytesLike],
    [Market.ComputeUnitStructOutput],
    "view"
  >;

  getOffer: TypedContractMethod<
    [offerId: BytesLike],
    [Market.OfferInfoStructOutput],
    "view"
  >;

  getPeer: TypedContractMethod<
    [peerId: BytesLike],
    [Market.ComputePeerInfoStructOutput],
    "view"
  >;

  initTimestamp: TypedContractMethod<[], [bigint], "view">;

  lockCollateral: TypedContractMethod<
    [commitmentId: BytesLike],
    [void],
    "nonpayable"
  >;

  maxCCProofs: TypedContractMethod<[], [bigint], "view">;

  maxCapacityRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  maxFailedRatio: TypedContractMethod<[], [bigint], "view">;

  minCapacityCommitmentDuration: TypedContractMethod<[], [bigint], "view">;

  minCapacityRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  minDepositedEpoches: TypedContractMethod<[], [bigint], "view">;

  minRematchingEpoches: TypedContractMethod<[], [bigint], "view">;

  minRequierdCCProofs: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerMarketOffer: TypedContractMethod<
    [
      offerId: BytesLike,
      minPricePerWorkerEpoch: BigNumberish,
      paymentToken: AddressLike,
      effectors: CIDV1Struct[],
      peers: Market.RegisterComputePeerStruct[]
    ],
    [void],
    "nonpayable"
  >;

  removeCUFromCC: TypedContractMethod<
    [commitmentId: BytesLike, unitIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  removeComputeUnit: TypedContractMethod<
    [unitId: BytesLike, lastUnitId: BytesLike],
    [void],
    "nonpayable"
  >;

  removeEffector: TypedContractMethod<
    [offerId: BytesLike, effectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;

  removeTempCapacityCommitment: TypedContractMethod<
    [commitmentId: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  returnComputeUnitFromDeal: TypedContractMethod<
    [unitId: BytesLike],
    [void],
    "nonpayable"
  >;

  setConstant: TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  slashingRate: TypedContractMethod<[], [bigint], "view">;

  submitProof: TypedContractMethod<
    [unitId: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  targetRevenuePerEpoch: TypedContractMethod<[], [bigint], "view">;

  totalRewards: TypedContractMethod<
    [commitmentId: BytesLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockedRewards: TypedContractMethod<
    [commitmentId: BytesLike],
    [bigint],
    "view"
  >;

  vestingDuration: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [commitmentId: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawCCEpochesAfterFailed: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addComputePeers"
  ): TypedContractMethod<
    [offerId: BytesLike, peers: Market.RegisterComputePeerStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addComputeUnits"
  ): TypedContractMethod<
    [offerId: BytesLike, peerId: BytesLike, freeUnits: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEffector"
  ): TypedContractMethod<
    [offerId: BytesLike, newEffectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeMinPricePerWorkerEpoch"
  ): TypedContractMethod<
    [offerId: BytesLike, newMinPricePerWorkerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePaymentToken"
  ): TypedContractMethod<
    [offerId: BytesLike, newPaymentToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralPerUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commitCCSnapshot"
  ): TypedContractMethod<[commitmentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createCapacityCommitment"
  ): TypedContractMethod<
    [
      peerId: BytesLike,
      duration: BigNumberish,
      delegator: AddressLike,
      rewardDelegationRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finishCapacityCommitment"
  ): TypedContractMethod<[commitmentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fltPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fluenceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCCStatus"
  ): TypedContractMethod<[commitmentId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getComputeUnit"
  ): TypedContractMethod<
    [unitId: BytesLike],
    [Market.ComputeUnitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOffer"
  ): TypedContractMethod<
    [offerId: BytesLike],
    [Market.OfferInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPeer"
  ): TypedContractMethod<
    [peerId: BytesLike],
    [Market.ComputePeerInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockCollateral"
  ): TypedContractMethod<[commitmentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxCCProofs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCapacityRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFailedRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCapacityCommitmentDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCapacityRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDepositedEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minRematchingEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minRequierdCCProofs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerMarketOffer"
  ): TypedContractMethod<
    [
      offerId: BytesLike,
      minPricePerWorkerEpoch: BigNumberish,
      paymentToken: AddressLike,
      effectors: CIDV1Struct[],
      peers: Market.RegisterComputePeerStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCUFromCC"
  ): TypedContractMethod<
    [commitmentId: BytesLike, unitIds: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeComputeUnit"
  ): TypedContractMethod<
    [unitId: BytesLike, lastUnitId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeEffector"
  ): TypedContractMethod<
    [offerId: BytesLike, effectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeTempCapacityCommitment"
  ): TypedContractMethod<[commitmentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "returnComputeUnitFromDeal"
  ): TypedContractMethod<[unitId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConstant"
  ): TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [unitId: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "targetRevenuePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRewards"
  ): TypedContractMethod<[commitmentId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockedRewards"
  ): TypedContractMethod<[commitmentId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[commitmentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawCCEpochesAfterFailed"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ComputeUnitAddedToDeal"
  ): TypedContractEvent<
    ComputeUnitAddedToDealEvent.InputTuple,
    ComputeUnitAddedToDealEvent.OutputTuple,
    ComputeUnitAddedToDealEvent.OutputObject
  >;
  getEvent(
    key: "ComputeUnitCreated"
  ): TypedContractEvent<
    ComputeUnitCreatedEvent.InputTuple,
    ComputeUnitCreatedEvent.OutputTuple,
    ComputeUnitCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ComputeUnitRemovedFromDeal"
  ): TypedContractEvent<
    ComputeUnitRemovedFromDealEvent.InputTuple,
    ComputeUnitRemovedFromDealEvent.OutputTuple,
    ComputeUnitRemovedFromDealEvent.OutputObject
  >;
  getEvent(
    key: "ConstantsUpdated"
  ): TypedContractEvent<
    ConstantsUpdatedEvent.InputTuple,
    ConstantsUpdatedEvent.OutputTuple,
    ConstantsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EffectorAdded"
  ): TypedContractEvent<
    EffectorAddedEvent.InputTuple,
    EffectorAddedEvent.OutputTuple,
    EffectorAddedEvent.OutputObject
  >;
  getEvent(
    key: "EffectorRemoved"
  ): TypedContractEvent<
    EffectorRemovedEvent.InputTuple,
    EffectorRemovedEvent.OutputTuple,
    EffectorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MarkeOfferRegistered"
  ): TypedContractEvent<
    MarkeOfferRegisteredEvent.InputTuple,
    MarkeOfferRegisteredEvent.OutputTuple,
    MarkeOfferRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MinPricePerEpochUpdated"
  ): TypedContractEvent<
    MinPricePerEpochUpdatedEvent.InputTuple,
    MinPricePerEpochUpdatedEvent.OutputTuple,
    MinPricePerEpochUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTokenUpdated"
  ): TypedContractEvent<
    PaymentTokenUpdatedEvent.InputTuple,
    PaymentTokenUpdatedEvent.OutputTuple,
    PaymentTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PeerCreated"
  ): TypedContractEvent<
    PeerCreatedEvent.InputTuple,
    PeerCreatedEvent.OutputTuple,
    PeerCreatedEvent.OutputObject
  >;

  filters: {
    "ComputeUnitAddedToDeal(bytes32,address)": TypedContractEvent<
      ComputeUnitAddedToDealEvent.InputTuple,
      ComputeUnitAddedToDealEvent.OutputTuple,
      ComputeUnitAddedToDealEvent.OutputObject
    >;
    ComputeUnitAddedToDeal: TypedContractEvent<
      ComputeUnitAddedToDealEvent.InputTuple,
      ComputeUnitAddedToDealEvent.OutputTuple,
      ComputeUnitAddedToDealEvent.OutputObject
    >;

    "ComputeUnitCreated(bytes32,bytes32,bytes32)": TypedContractEvent<
      ComputeUnitCreatedEvent.InputTuple,
      ComputeUnitCreatedEvent.OutputTuple,
      ComputeUnitCreatedEvent.OutputObject
    >;
    ComputeUnitCreated: TypedContractEvent<
      ComputeUnitCreatedEvent.InputTuple,
      ComputeUnitCreatedEvent.OutputTuple,
      ComputeUnitCreatedEvent.OutputObject
    >;

    "ComputeUnitRemovedFromDeal(bytes32,address)": TypedContractEvent<
      ComputeUnitRemovedFromDealEvent.InputTuple,
      ComputeUnitRemovedFromDealEvent.OutputTuple,
      ComputeUnitRemovedFromDealEvent.OutputObject
    >;
    ComputeUnitRemovedFromDeal: TypedContractEvent<
      ComputeUnitRemovedFromDealEvent.InputTuple,
      ComputeUnitRemovedFromDealEvent.OutputTuple,
      ComputeUnitRemovedFromDealEvent.OutputObject
    >;

    "ConstantsUpdated(uint8,uint256)": TypedContractEvent<
      ConstantsUpdatedEvent.InputTuple,
      ConstantsUpdatedEvent.OutputTuple,
      ConstantsUpdatedEvent.OutputObject
    >;
    ConstantsUpdated: TypedContractEvent<
      ConstantsUpdatedEvent.InputTuple,
      ConstantsUpdatedEvent.OutputTuple,
      ConstantsUpdatedEvent.OutputObject
    >;

    "EffectorAdded(bytes32,tuple)": TypedContractEvent<
      EffectorAddedEvent.InputTuple,
      EffectorAddedEvent.OutputTuple,
      EffectorAddedEvent.OutputObject
    >;
    EffectorAdded: TypedContractEvent<
      EffectorAddedEvent.InputTuple,
      EffectorAddedEvent.OutputTuple,
      EffectorAddedEvent.OutputObject
    >;

    "EffectorRemoved(bytes32,tuple)": TypedContractEvent<
      EffectorRemovedEvent.InputTuple,
      EffectorRemovedEvent.OutputTuple,
      EffectorRemovedEvent.OutputObject
    >;
    EffectorRemoved: TypedContractEvent<
      EffectorRemovedEvent.InputTuple,
      EffectorRemovedEvent.OutputTuple,
      EffectorRemovedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MarkeOfferRegistered(bytes32,address,uint256,address,tuple[])": TypedContractEvent<
      MarkeOfferRegisteredEvent.InputTuple,
      MarkeOfferRegisteredEvent.OutputTuple,
      MarkeOfferRegisteredEvent.OutputObject
    >;
    MarkeOfferRegistered: TypedContractEvent<
      MarkeOfferRegisteredEvent.InputTuple,
      MarkeOfferRegisteredEvent.OutputTuple,
      MarkeOfferRegisteredEvent.OutputObject
    >;

    "MinPricePerEpochUpdated(bytes32,uint256)": TypedContractEvent<
      MinPricePerEpochUpdatedEvent.InputTuple,
      MinPricePerEpochUpdatedEvent.OutputTuple,
      MinPricePerEpochUpdatedEvent.OutputObject
    >;
    MinPricePerEpochUpdated: TypedContractEvent<
      MinPricePerEpochUpdatedEvent.InputTuple,
      MinPricePerEpochUpdatedEvent.OutputTuple,
      MinPricePerEpochUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentTokenUpdated(bytes32,address)": TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;
    PaymentTokenUpdated: TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;

    "PeerCreated(bytes32,bytes32)": TypedContractEvent<
      PeerCreatedEvent.InputTuple,
      PeerCreatedEvent.OutputTuple,
      PeerCreatedEvent.OutputObject
    >;
    PeerCreated: TypedContractEvent<
      PeerCreatedEvent.InputTuple,
      PeerCreatedEvent.OutputTuple,
      PeerCreatedEvent.OutputObject
    >;
  };
}
