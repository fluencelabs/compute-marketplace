/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface IGlobalConstInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ccActiveUnitCount"
      | "ccMaxFailedRatio"
      | "ccSlashingRate"
      | "ccVestingDuration"
      | "ccWithdrawEpochesAfterFailed"
      | "fltCCCollateralPerUnit"
      | "fltCCTargetRevenuePerEpoch"
      | "fltPrice"
      | "fluenceToken"
      | "getCCRewardPool"
      | "maxCCProofsPerEpoch"
      | "maxCCRewardPerEpoch"
      | "minCCDuration"
      | "minCCRequierdProofsPerEpoch"
      | "minCCRewardPerEpoch"
      | "minDealDepositedEpoches"
      | "minDealRematchingEpoches"
      | "setCCConstant"
      | "setDealConstant"
      | "setFLTPrice"
      | "usdCCCollateralPerUnit"
      | "usdCCTargetRevenuePerEpoch"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CCConstantUpdated"
      | "DealConstantUpdated"
      | "FLTPriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ccActiveUnitCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ccMaxFailedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ccSlashingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ccVestingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ccWithdrawEpochesAfterFailed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fltCCCollateralPerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fltCCTargetRevenuePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fltPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fluenceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCCRewardPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCCProofsPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCCRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCCDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCCRequierdProofsPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCCRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDealDepositedEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDealRematchingEpoches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCCConstant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDealConstant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFLTPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usdCCCollateralPerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdCCTargetRevenuePerEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ccActiveUnitCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccMaxFailedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccSlashingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccVestingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccWithdrawEpochesAfterFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fltCCCollateralPerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fltCCTargetRevenuePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fltPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCCRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCCProofsPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCCRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCCDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCCRequierdProofsPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCCRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDealDepositedEpoches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDealRematchingEpoches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCCConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDealConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFLTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdCCCollateralPerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdCCTargetRevenuePerEpoch",
    data: BytesLike
  ): Result;
}

export namespace CCConstantUpdatedEvent {
  export type InputTuple = [constantType: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [constantType: bigint, newValue: bigint];
  export interface OutputObject {
    constantType: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealConstantUpdatedEvent {
  export type InputTuple = [constantType: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [constantType: bigint, newValue: bigint];
  export interface OutputObject {
    constantType: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FLTPriceUpdatedEvent {
  export type InputTuple = [newPrice: BigNumberish];
  export type OutputTuple = [newPrice: bigint];
  export interface OutputObject {
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGlobalConst extends BaseContract {
  contractName: "IGlobalConst";

  connect(runner?: ContractRunner | null): IGlobalConst;
  waitForDeployment(): Promise<this>;

  interface: IGlobalConstInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ccActiveUnitCount: TypedContractMethod<[], [bigint], "view">;

  ccMaxFailedRatio: TypedContractMethod<[], [bigint], "view">;

  ccSlashingRate: TypedContractMethod<[], [bigint], "view">;

  ccVestingDuration: TypedContractMethod<[], [bigint], "view">;

  ccWithdrawEpochesAfterFailed: TypedContractMethod<[], [bigint], "view">;

  fltCCCollateralPerUnit: TypedContractMethod<[], [bigint], "view">;

  fltCCTargetRevenuePerEpoch: TypedContractMethod<[], [bigint], "view">;

  fltPrice: TypedContractMethod<[], [bigint], "view">;

  fluenceToken: TypedContractMethod<[], [string], "view">;

  getCCRewardPool: TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;

  maxCCProofsPerEpoch: TypedContractMethod<[], [bigint], "view">;

  maxCCRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  minCCDuration: TypedContractMethod<[], [bigint], "view">;

  minCCRequierdProofsPerEpoch: TypedContractMethod<[], [bigint], "view">;

  minCCRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  minDealDepositedEpoches: TypedContractMethod<[], [bigint], "view">;

  minDealRematchingEpoches: TypedContractMethod<[], [bigint], "view">;

  setCCConstant: TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDealConstant: TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFLTPrice: TypedContractMethod<
    [fltPrice_: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdCCCollateralPerUnit: TypedContractMethod<[], [bigint], "view">;

  usdCCTargetRevenuePerEpoch: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ccActiveUnitCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ccMaxFailedRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ccSlashingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ccVestingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ccWithdrawEpochesAfterFailed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fltCCCollateralPerUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fltCCTargetRevenuePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fltPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fluenceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCCRewardPool"
  ): TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCCProofsPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxCCRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCCDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCCRequierdProofsPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCCRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDealDepositedEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDealRematchingEpoches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCCConstant"
  ): TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDealConstant"
  ): TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFLTPrice"
  ): TypedContractMethod<[fltPrice_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdCCCollateralPerUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdCCTargetRevenuePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CCConstantUpdated"
  ): TypedContractEvent<
    CCConstantUpdatedEvent.InputTuple,
    CCConstantUpdatedEvent.OutputTuple,
    CCConstantUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DealConstantUpdated"
  ): TypedContractEvent<
    DealConstantUpdatedEvent.InputTuple,
    DealConstantUpdatedEvent.OutputTuple,
    DealConstantUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FLTPriceUpdated"
  ): TypedContractEvent<
    FLTPriceUpdatedEvent.InputTuple,
    FLTPriceUpdatedEvent.OutputTuple,
    FLTPriceUpdatedEvent.OutputObject
  >;

  filters: {
    "CCConstantUpdated(uint8,uint256)": TypedContractEvent<
      CCConstantUpdatedEvent.InputTuple,
      CCConstantUpdatedEvent.OutputTuple,
      CCConstantUpdatedEvent.OutputObject
    >;
    CCConstantUpdated: TypedContractEvent<
      CCConstantUpdatedEvent.InputTuple,
      CCConstantUpdatedEvent.OutputTuple,
      CCConstantUpdatedEvent.OutputObject
    >;

    "DealConstantUpdated(uint8,uint256)": TypedContractEvent<
      DealConstantUpdatedEvent.InputTuple,
      DealConstantUpdatedEvent.OutputTuple,
      DealConstantUpdatedEvent.OutputObject
    >;
    DealConstantUpdated: TypedContractEvent<
      DealConstantUpdatedEvent.InputTuple,
      DealConstantUpdatedEvent.OutputTuple,
      DealConstantUpdatedEvent.OutputObject
    >;

    "FLTPriceUpdated(uint256)": TypedContractEvent<
      FLTPriceUpdatedEvent.InputTuple,
      FLTPriceUpdatedEvent.OutputTuple,
      FLTPriceUpdatedEvent.OutputObject
    >;
    FLTPriceUpdated: TypedContractEvent<
      FLTPriceUpdatedEvent.InputTuple,
      FLTPriceUpdatedEvent.OutputTuple,
      FLTPriceUpdatedEvent.OutputObject
    >;
  };
}
