/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common.js";

export interface ICapacityCommitmentInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "CapacityCommitmentActivated"
      | "CapacityCommitmentCreated"
      | "CapacityCommitmentFinished"
      | "CapacityCommitmentRemoved"
      | "CollateralDeposited"
      | "ProofSubmitted"
      | "RewardWithdrawn"
  ): EventFragment;
}

export namespace CapacityCommitmentActivatedEvent {
  export type InputTuple = [commitmentId: BytesLike];
  export type OutputTuple = [commitmentId: string];
  export interface OutputObject {
    commitmentId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CapacityCommitmentCreatedEvent {
  export type InputTuple = [
    peerId: BytesLike,
    commitmentId: BytesLike,
    delegator: AddressLike,
    rewardDelegationRate: BigNumberish,
    fltCCCollateralPerUnit: BigNumberish
  ];
  export type OutputTuple = [
    peerId: string,
    commitmentId: string,
    delegator: string,
    rewardDelegationRate: bigint,
    fltCCCollateralPerUnit: bigint
  ];
  export interface OutputObject {
    peerId: string;
    commitmentId: string;
    delegator: string;
    rewardDelegationRate: bigint;
    fltCCCollateralPerUnit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CapacityCommitmentFinishedEvent {
  export type InputTuple = [commitmentId: BytesLike];
  export type OutputTuple = [commitmentId: string];
  export interface OutputObject {
    commitmentId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CapacityCommitmentRemovedEvent {
  export type InputTuple = [commitmentId: BytesLike];
  export type OutputTuple = [commitmentId: string];
  export interface OutputObject {
    commitmentId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [
    commitmentId: BytesLike,
    totalCollateral: BigNumberish
  ];
  export type OutputTuple = [commitmentId: string, totalCollateral: bigint];
  export interface OutputObject {
    commitmentId: string;
    totalCollateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofSubmittedEvent {
  export type InputTuple = [commitmentId: BytesLike, unitId: BytesLike];
  export type OutputTuple = [commitmentId: string, unitId: string];
  export interface OutputObject {
    commitmentId: string;
    unitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardWithdrawnEvent {
  export type InputTuple = [commitmentId: BytesLike, amount: BigNumberish];
  export type OutputTuple = [commitmentId: string, amount: bigint];
  export interface OutputObject {
    commitmentId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICapacityCommitment extends BaseContract {
  contractName: "ICapacityCommitment";

  connect(runner?: ContractRunner | null): ICapacityCommitment;
  waitForDeployment(): Promise<this>;

  interface: ICapacityCommitmentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CapacityCommitmentActivated"
  ): TypedContractEvent<
    CapacityCommitmentActivatedEvent.InputTuple,
    CapacityCommitmentActivatedEvent.OutputTuple,
    CapacityCommitmentActivatedEvent.OutputObject
  >;
  getEvent(
    key: "CapacityCommitmentCreated"
  ): TypedContractEvent<
    CapacityCommitmentCreatedEvent.InputTuple,
    CapacityCommitmentCreatedEvent.OutputTuple,
    CapacityCommitmentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CapacityCommitmentFinished"
  ): TypedContractEvent<
    CapacityCommitmentFinishedEvent.InputTuple,
    CapacityCommitmentFinishedEvent.OutputTuple,
    CapacityCommitmentFinishedEvent.OutputObject
  >;
  getEvent(
    key: "CapacityCommitmentRemoved"
  ): TypedContractEvent<
    CapacityCommitmentRemovedEvent.InputTuple,
    CapacityCommitmentRemovedEvent.OutputTuple,
    CapacityCommitmentRemovedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "ProofSubmitted"
  ): TypedContractEvent<
    ProofSubmittedEvent.InputTuple,
    ProofSubmittedEvent.OutputTuple,
    ProofSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "RewardWithdrawn"
  ): TypedContractEvent<
    RewardWithdrawnEvent.InputTuple,
    RewardWithdrawnEvent.OutputTuple,
    RewardWithdrawnEvent.OutputObject
  >;

  filters: {
    "CapacityCommitmentActivated(bytes32)": TypedContractEvent<
      CapacityCommitmentActivatedEvent.InputTuple,
      CapacityCommitmentActivatedEvent.OutputTuple,
      CapacityCommitmentActivatedEvent.OutputObject
    >;
    CapacityCommitmentActivated: TypedContractEvent<
      CapacityCommitmentActivatedEvent.InputTuple,
      CapacityCommitmentActivatedEvent.OutputTuple,
      CapacityCommitmentActivatedEvent.OutputObject
    >;

    "CapacityCommitmentCreated(bytes32,bytes32,address,uint256,uint256)": TypedContractEvent<
      CapacityCommitmentCreatedEvent.InputTuple,
      CapacityCommitmentCreatedEvent.OutputTuple,
      CapacityCommitmentCreatedEvent.OutputObject
    >;
    CapacityCommitmentCreated: TypedContractEvent<
      CapacityCommitmentCreatedEvent.InputTuple,
      CapacityCommitmentCreatedEvent.OutputTuple,
      CapacityCommitmentCreatedEvent.OutputObject
    >;

    "CapacityCommitmentFinished(bytes32)": TypedContractEvent<
      CapacityCommitmentFinishedEvent.InputTuple,
      CapacityCommitmentFinishedEvent.OutputTuple,
      CapacityCommitmentFinishedEvent.OutputObject
    >;
    CapacityCommitmentFinished: TypedContractEvent<
      CapacityCommitmentFinishedEvent.InputTuple,
      CapacityCommitmentFinishedEvent.OutputTuple,
      CapacityCommitmentFinishedEvent.OutputObject
    >;

    "CapacityCommitmentRemoved(bytes32)": TypedContractEvent<
      CapacityCommitmentRemovedEvent.InputTuple,
      CapacityCommitmentRemovedEvent.OutputTuple,
      CapacityCommitmentRemovedEvent.OutputObject
    >;
    CapacityCommitmentRemoved: TypedContractEvent<
      CapacityCommitmentRemovedEvent.InputTuple,
      CapacityCommitmentRemovedEvent.OutputTuple,
      CapacityCommitmentRemovedEvent.OutputObject
    >;

    "CollateralDeposited(bytes32,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "ProofSubmitted(bytes32,bytes32)": TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;
    ProofSubmitted: TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;

    "RewardWithdrawn(bytes32,uint256)": TypedContractEvent<
      RewardWithdrawnEvent.InputTuple,
      RewardWithdrawnEvent.OutputTuple,
      RewardWithdrawnEvent.OutputObject
    >;
    RewardWithdrawn: TypedContractEvent<
      RewardWithdrawnEvent.InputTuple,
      RewardWithdrawnEvent.OutputTuple,
      RewardWithdrawnEvent.OutputObject
    >;
  };
}
