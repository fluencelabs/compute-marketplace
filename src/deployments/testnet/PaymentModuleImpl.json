{
  "address": "0x238BAc18315F3C6ab9114461dcbbef20BF7EeE21",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "air",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prevData",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "params",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callResults",
              "type": "string"
            }
          ],
          "internalType": "struct Particle",
          "name": "particle",
          "type": "tuple"
        }
      ],
      "name": "commitParticle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToPaymentBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "particleHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        }
      ],
      "name": "rewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromPaymentBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "particlesHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf59b8fa155cc90d679751c124963c98d4c70122684aa8bee25cadf471e939e74",
  "receipt": {
    "to": null,
    "from": "0x306543FC9eA9bd49CE047C7cD4Ba10b2a98B507c",
    "contractAddress": "0x238BAc18315F3C6ab9114461dcbbef20BF7EeE21",
    "transactionIndex": 0,
    "gasUsed": "2004042",
    "logsBloom": "0x
    "blockHash": "0xdae8dde787fc6564ff4518b9711b375a1131c4c76fda0967cc91ee773c380b37",
    "transactionHash": "0xf59b8fa155cc90d679751c124963c98d4c70122684aa8bee25cadf471e939e74",
    "logs": [],
    "blockNumber": 133093085,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "09b009adaa7c41f548683d650f79aaa9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"air\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prevData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callResults\",\"type\":\"string\"}],\"internalType\":\"struct Particle\",\"name\":\"particle\",\"type\":\"tuple\"}],\"name\":\"commitParticle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToPaymentBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"particleHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"}],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromPaymentBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"particlesHashes\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deal/PaymentModule.sol\":\"PaymentModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/PaymentModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"./interfaces/IPaymentModule.sol\\\";\\nimport \\\"./interfaces/ICore.sol\\\";\\nimport \\\"./interfaces/IWorkersModule.sol\\\";\\nimport \\\"./base/Types.sol\\\";\\nimport \\\"./base/ModuleBase.sol\\\";\\n\\ncontract PaymentModuleState {\\n    struct ParticleInfo {\\n        bool isValid;\\n        uint256 epoch;\\n        uint256 worketsCount;\\n        uint reward;\\n    }\\n\\n    uint256 internal _balance;\\n    uint256 internal _locked;\\n\\n    mapping(uint => uint) internal _goldenParticlesCountByEpoch;\\n    mapping(bytes32 => ParticleInfo) internal _particles;\\n    mapping(uint => mapping(uint => uint)) internal _workersByEpoch;\\n    mapping(bytes32 => BitMaps.BitMap) internal _paidWorkersByParticle;\\n}\\n\\ncontract PaymentModuleInternal is ModuleBase, PaymentModuleState {\\n    function _hasWorkerInEpoch(uint epoch, bytes32 id) internal view returns (bool) {\\n        IWorkersModule workers = _core().workersModule();\\n\\n        uint index = 0; //TODO: fix\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        if (_workersByEpoch[epoch][bucket] & mask == 0) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\\nabstract contract PaymentModuleOwnable is PaymentModuleInternal, IPaymentModule {\\n    using BitMaps for BitMaps.BitMap;\\n    using SafeERC20 for IERC20;\\n\\n    function depositToPaymentBalance(uint256 amount) external onlyOwner {\\n        IERC20 token = _core().configModule().paymentToken();\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        _balance += amount;\\n\\n        //TODO: event\\n    }\\n\\n    function withdrawFromPaymentBalance(uint256 amount) external onlyOwner {\\n        IERC20 token = _core().configModule().paymentToken();\\n        require(_balance - _locked >= amount, \\\"Not enough free balance\\\");\\n\\n        _balance -= amount;\\n        token.safeTransfer(msg.sender, amount);\\n\\n        //TODO: event\\n    }\\n}\\n\\ncontract PaymentModule is PaymentModuleOwnable {\\n    using BitMaps for BitMaps.BitMap;\\n    using SafeERC20 for IERC20;\\n\\n    function rewardAmount(bytes32 particleHash, bytes32 patId) public view returns (uint) {\\n        ParticleInfo storage particle = _particles[particleHash];\\n        require(particle.isValid, \\\"Particle not valid\\\");\\n\\n        uint currentEpoch = _core().configModule().globalConfig().epochManager().currentEpoch();\\n        uint epoch = particle.epoch;\\n\\n        require(currentEpoch - 1 > epoch, \\\"Particle not confirmed\\\");\\n\\n        if (!_hasWorkerInEpoch(epoch, patId) || !_hasWorkerInEpoch(epoch - 1, patId)) {\\n            return 0;\\n        }\\n\\n        return particle.reward / particle.worketsCount;\\n    }\\n\\n    function balance() external view returns (uint256) {\\n        return _balance;\\n    }\\n\\n    function commitParticle(Particle calldata particle) external {\\n        bytes32 hash = keccak256(abi.encode(particle.air, particle.prevData, particle.params, particle.callResults)); // TODO: refactoring\\n\\n        require(_particles[hash].epoch == 0, \\\"Particle already exists\\\");\\n\\n        ICore core = _core();\\n        IConfigModule config = core.configModule();\\n        IWorkersModule workers = core.workersModule();\\n\\n        uint epoch = config.globalConfig().epochManager().currentEpoch();\\n\\n        bytes32[] memory patIds = config.particleVerifyer().verifyParticle(particle);\\n\\n        for (uint i = 0; i < patIds.length; i++) {\\n            uint index = 0; // TODO: fix\\n            uint256 bucket = index >> 8;\\n            uint256 mask = 1 << (index & 0xff);\\n            _workersByEpoch[epoch][bucket] |= mask; // TODO: gass optimization\\n        }\\n\\n        uint goldenParticlesCountByEpoch = _goldenParticlesCountByEpoch[epoch];\\n        uint price = config.pricePerEpoch();\\n\\n        uint reward = price / (2 ** (goldenParticlesCountByEpoch + 1));\\n\\n        _particles[hash] = ParticleInfo({ isValid: true, epoch: epoch, worketsCount: patIds.length, reward: reward });\\n        _goldenParticlesCountByEpoch[epoch] = goldenParticlesCountByEpoch + 1;\\n\\n        _balance -= reward;\\n        _locked += reward;\\n\\n        //TODO: event\\n    }\\n\\n    function withdrawReward(bytes32 patId, bytes32[] calldata particlesHashes) external {\\n        ICore core = _core();\\n        IConfigModule config = core.configModule();\\n\\n        IWorkersModule workers = core.workersModule();\\n\\n        uint index = 0; //todo: workers.getPATIndex(patId);\\n\\n        uint totalReward;\\n        for (uint i = 0; i < particlesHashes.length; i++) {\\n            bytes32 particleHash = particlesHashes[i];\\n\\n            require(!_paidWorkersByParticle[particleHash].get(index), \\\"Already paid\\\");\\n\\n            totalReward += rewardAmount(particleHash, patId);\\n\\n            _paidWorkersByParticle[particleHash].set(index);\\n        }\\n\\n        _locked -= totalReward;\\n        config.paymentToken().safeTransfer(workers.getPAT(patId).owner, totalReward);\\n\\n        //TODO: event\\n    }\\n}\\n\",\"keccak256\":\"0x1e435c0ab70982069829425489f2787af8fa529fc96fb0447ef0aced54e497bb\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\n\\ncontract ModuleBase is UUPSUpgradeable {\\n    bytes32 private constant _CORE_SLOT = keccak256(\\\"network.fluence.proxy.core\\\");\\n\\n    modifier onlyModule(Module module) {\\n        require(_core().moduleByType(module) == msg.sender, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyModules(Module[] calldata modules) {\\n        Module callerModule = _core().moduleByAddress(msg.sender);\\n\\n        bool isRequiredModule = false;\\n        for (uint256 i = 0; i < modules.length; i++) {\\n            if (modules[i] != callerModule) {\\n                continue;\\n            }\\n\\n            isRequiredModule = true;\\n            break;\\n        }\\n\\n        require(isRequiredModule, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_core().owner() == msg.sender, \\\"ModuleBase: caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCore() {\\n        require(address(_core()) == msg.sender, \\\"ModuleBase: caller is not core\\\");\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyCore {\\n        //TODO: check that new implementation from DAO\\n    }\\n\\n    function _core() internal view returns (ICore) {\\n        return ICore(StorageSlot.getAddressSlot(_CORE_SLOT).value);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x001458f0530bf630f1c300058ea8d14bbffdd850516b98e4a98a0246ac415e82\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nstruct Particle {\\n    string air;\\n    string prevData;\\n    string params;\\n    string callResults;\\n}\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\",\"keccak256\":\"0xf93b0de9200f057680d3aae95194cc340ab2b4449c2802e0d765a1f31e81c8b7\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfigModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\nimport \\\"../../global/interfaces/IParticleVerifyer.sol\\\";\\nimport \\\"../../global/interfaces/IGlobalConfig.sol\\\";\\n\\ninterface IConfigModule {\\n    function initialize(\\n        IERC20 paymentToken_,\\n        uint256 pricePerEpoch_,\\n        uint256 requiredCollateral_,\\n        CIDV1 calldata appCID_,\\n        uint256 minWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 targetWorkers_,\\n        CIDV1[] calldata effectorWasmsCids_\\n    ) external;\\n\\n    function globalConfig() external view returns (IGlobalConfig);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function particleVerifyer() external view returns (IParticleVerifyer);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function pricePerEpoch() external view returns (uint256);\\n\\n    function requiredCollateral() external view returns (uint256);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n}\\n\",\"keccak256\":\"0x7732f67045048e33830c0d726f727f9b6ff3d6404f072570a6c6eddee4059418\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IConfigModule.sol\\\";\\nimport \\\"./IPaymentModule.sol\\\";\\nimport \\\"./IStatusModule.sol\\\";\\nimport \\\"./IWorkersModule.sol\\\";\\n\\nenum Module {\\n    None,\\n    Config,\\n    Payment,\\n    Status,\\n    Workers\\n}\\n\\ninterface ICore {\\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\\n\\n    function moduleByType(Module module) external view returns (address);\\n\\n    function moduleByAddress(address module) external view returns (Module);\\n\\n    function configModule() external view returns (IConfigModule);\\n\\n    function paymentModule() external view returns (IPaymentModule);\\n\\n    function statusModule() external view returns (IStatusModule);\\n\\n    function workersModule() external view returns (IWorkersModule);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xac6992f807db36edcacd78f986cf376fb0db20596ccee5d532dca443ecb75e79\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IPaymentModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IPaymentModule {\\n    function balance() external view returns (uint256);\\n\\n    function rewardAmount(bytes32 particleHash, bytes32 patId) external view returns (uint);\\n\\n    function depositToPaymentBalance(uint256 amount) external;\\n\\n    function withdrawFromPaymentBalance(uint256 amount) external;\\n\\n    function commitParticle(Particle calldata particle) external;\\n\\n    function withdrawReward(bytes32 patId, bytes32[] calldata particlesHashes) external;\\n}\\n\",\"keccak256\":\"0x69e87cb96fdeb4dcb0b6c62d75b65076c085638d49a08b8aa65fded932e98de0\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IStatusModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nenum DealStatus {\\n    WaitingForWorkers,\\n    Working\\n}\\n\\ninterface IStatusModule {\\n    event StatusChanged(DealStatus newStatus);\\n\\n    function status() external view returns (DealStatus);\\n\\n    function startWorkingEpoch() external view returns (uint256);\\n\\n    function changeStatus(DealStatus status_) external;\\n}\\n\",\"keccak256\":\"0x3c670bd4876900f94f1de097ddc97fccb898d3a37e47ed55f5e36ed4c26a728e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../base/Types.sol\\\";\\n\\nstruct PAT {\\n    bytes32 id;\\n    bytes32 peerId;\\n    bytes32 workerId;\\n    address owner;\\n    uint256 collateral;\\n    uint256 created;\\n}\\n\\ninterface IWorkersModule {\\n    function getPATs() external view returns (PAT[] memory);\\n\\n    function patCount() external view returns (uint256);\\n\\n    function getPAT(bytes32 id) external view returns (PAT memory);\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\\n\\n    function createPAT(address owner, bytes32 peerId) external;\\n\\n    function exit(bytes32 id) external;\\n\\n    function withdrawCollateral(address owner) external;\\n\\n    function setWorker(bytes32 id, bytes32 workerId) external;\\n}\\n\",\"keccak256\":\"0x895d334bb205743038152b9d80dd7357055c98d388d622cecf5c2a9f2f50fe70\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IEpochManager {\\n    function epochDuration() external view returns (uint256);\\n\\n    function currentEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2dce187734fef8462cf222ec53569253aae570020578c7d470545b476ac3e87d\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IFactory {\\n    function isDeal(address addr) external view returns (bool);\\n\\n    function createDeal(\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        CIDV1 calldata appCID_,\\n        CIDV1[] calldata effectors\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8c2c4ac19b466b701a282339069aa2df46c98c70b74d587afbfbf53ed0905a14\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEpochManager.sol\\\";\\nimport \\\"./IMatcher.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IGlobalConfig {\\n    function owner() external view returns (address);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function withdrawTimeout() external view returns (uint);\\n\\n    function epochManager() external view returns (IEpochManager);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0xf5f3740cd208be3ee6019fefb519e46757d546b224f08dacf462250871aafa06\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/interfaces/ICore.sol\\\";\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IMatcher {\\n    function getFreeWorkersSolts(address computeProvider, bytes32 peerId) external view returns (uint);\\n\\n    function matchWithDeal(ICore deal) external;\\n}\\n\",\"keccak256\":\"0x7bea3746a31766e2b5ab68cb6f517edc68e10e1a43042ee58e6096b925b92655\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IParticleVerifyer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport { Particle } from \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IParticleVerifyer {\\n    function verifyParticle(Particle calldata particle) external returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xa59cf51c885735527bce2a5306ad84b553cd83f74e297de0b331289d9d3786e2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100315730608052612389908161003782396080518181816110de0152818161122301526115640152f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80633659cfe6146115315780634f1ef2861461119857806352d1902d146110b657806373d6cb6314610d215780639ab1ea6614610b19578063b69ef8a814610afb578063dc79f159146102cc578063ec614b2c146100aa5763ff9268ac1461007f57600080fd5b346100a55760406003193601126100a557602061009d600435611e30565b604051908152f35b600080fd5b346100a5576020806003193601126100a55760043573ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654166040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528481600481855afa801561026557859160009161028e575b50916101486004938533911614611bc7565b604051928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa8015610265578491600091610271575b506004604051809481937f3013ce29000000000000000000000000000000000000000000000000000000008352165afa90811561026557600091610238575b5060325492826101d560335486611d75565b106101f457506101e8826101f294611d75565b6032553390611d82565b005b6064906040519062461bcd60e51b82526004820152601760248201527f4e6f7420656e6f75676820667265652062616c616e63650000000000000000006044820152fd5b6102589150833d851161025e575b6102508183611859565b810190611c12565b836101c3565b503d610246565b6040513d6000823e3d90fd5b6102889150823d841161025e576102508183611859565b85610184565b82819392503d83116102c5575b6102a58183611859565b810103126100a5576004916101486102bd8793611ba6565b919350610136565b503d61029b565b346100a5576003196020813601126100a5576004359067ffffffffffffffff82116100a55760809082360301126100a55761030a6004820180612246565b9061031b6024840160048501612246565b909161032d6044860160048701612246565b9061033e6064880160048901612246565b919092604051968795602087019960808b5260a088019061035e92612297565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0978888830301604089015261039392612297565b90868683030160608701526103a792612297565b90848483030160808501526103bb92612297565b0390810182526103cb9082611859565b51902090816000526035602052604060002060010154610ab75773ffffffffffffffffffffffffffffffffffffffff7fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541690604051917f68f1e99a000000000000000000000000000000000000000000000000000000008352602083600481845afa92831561026557600093610a92575b506020600491604051928380927f2ed52a770000000000000000000000000000000000000000000000000000000082525afa801561026557610a73575b50604051907fa7c1abe000000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff87165afa9182156102655773ffffffffffffffffffffffffffffffffffffffff92602091600091610a56575b506004604051809581937fe2d2bfe3000000000000000000000000000000000000000000000000000000008352165afa9182156102655773ffffffffffffffffffffffffffffffffffffffff92602091600091610a39575b506004604051809581937f76671808000000000000000000000000000000000000000000000000000000008352165afa91821561026557600092610a05575b506040517f1ef7e0a100000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff88165afa908115610265576000916109b2575b506106f260009173ffffffffffffffffffffffffffffffffffffffff93836040519586809581947fa689408c0000000000000000000000000000000000000000000000000000000083526020600484015261066a61065982600401836004016122d6565b6080602487015260a4860191612297565b6106e36106d56106b561068360248601866004016122d6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc9591868a84030160448b0152612297565b6106c560448601866004016122d6565b90858984030160648a0152612297565b9260648101906004016122d6565b91858403016084860152612297565b0393165af190811561026557600091610915575b5060005b81518110156107425761073d90836000526036602052604060002060008052602052604060002060018154179055612326565b61070a565b50919080600052603460205273ffffffffffffffffffffffffffffffffffffffff6020604060002054936004604051809481937f5fc8f59c000000000000000000000000000000000000000000000000000000008352165afa908115610265576000916108e3575b50600183018093116108b45760ff83116108b4576107cc906001841b90611df7565b92519360405190608082019082821067ffffffffffffffff83111761088557610880966003926040526001845260208401858152604085019182526060850192888452600052603560205260406000209451151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00875416911617855551600185015551600284015551910155600052603460205260406000205561087581603254611d75565b603255603354611c3e565b603355005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90506020813d60201161090d575b816108fe60209383611859565b810103126100a55751856107aa565b3d91506108f1565b90503d806000833e6109278183611859565b8101906020818303126100a55780519067ffffffffffffffff82116100a557019080601f830112156100a55781519167ffffffffffffffff8311610885578260051b906040519361097b6020840186611859565b84526020808501928201019283116100a557602001905b8282106109a25750505084610706565b8151815260209182019101610992565b90506020813d6020116109fd575b816109cd60209383611859565b810103126100a557519073ffffffffffffffffffffffffffffffffffffffff821682036100a557906106f26105f5565b3d91506109c0565b9091506020813d602011610a31575b81610a2160209383611859565b810103126100a5575190846105a0565b3d9150610a14565b610a509150823d841161025e576102508183611859565b86610561565b610a6d9150823d841161025e576102508183611859565b86610509565b610a8b9060203d60201161025e576102508183611859565b508361049a565b6004919350610aaf602091823d841161025e576102508183611859565b93915061045d565b606460405162461bcd60e51b815260206004820152601760248201527f5061727469636c6520616c7265616479206578697374730000000000000000006044820152fd5b346100a55760006003193601126100a5576020603254604051908152f35b346100a5576020806003193601126100a55760043573ffffffffffffffffffffffffffffffffffffffff91827fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654166040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528281600481855afa8015610265578391600091610ce3575b5091610bb86004938733911614611bc7565b604051928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa8015610265578291600091610cc6575b506004604051809681937f3013ce29000000000000000000000000000000000000000000000000000000008352165afa92831561026557600093610ca7575b507f23b872dd00000000000000000000000000000000000000000000000000000000604051918201523360248201523060448201528160648201526064815260a081019080821067ffffffffffffffff83111761088557610ca293610c9a92604052611c4b565b603254611c3e565b603255005b81610cbf9294503d851161025e576102508183611859565b9183610c33565b610cdd9150823d841161025e576102508183611859565b85610bf4565b82819392503d8311610d1a575b610cfa8183611859565b810103126100a557600491610bb8610d128593611ba6565b919350610ba6565b503d610cf0565b346100a55760406003193601126100a557602467ffffffffffffffff81358181116100a557366023820112156100a55780600401358281116100a557600593368183871b850101116100a55773ffffffffffffffffffffffffffffffffffffffff91827fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654166040517f68f1e99a0000000000000000000000000000000000000000000000000000000081526020928382600481865afa918215610265576004938591600094611097575b50604051948580927f2ed52a770000000000000000000000000000000000000000000000000000000082525afa92831561026557600093611078575b5060009660005b828110610fca57505050908285949392610e4b88603354611d75565b6033556004604051809881937f3013ce29000000000000000000000000000000000000000000000000000000008352165afa94851561026557600095610fa4575b509060c0849284604051809581937f6b0ea6270000000000000000000000000000000000000000000000000000000083526004356004840152165afa96871561026557600097610eea575b5050505060606101f29401511690611d82565b909192965060c0833d8211610f9c575b81610f0760c09383611859565b810103126100a5576040519660c0880191821188831017610f6f57506060926101f2979260a09260405281518452808201519084015260408101516040840152610f52848201611ba6565b8484015260808101516080840152015160a0820152948680610ed7565b7f4e487b710000000000000000000000000000000000000000000000000000000060005260416004526000fd5b3d9150610efa565b82919550610fc160c09186943d851161025e576102508183611859565b95919250610e8c565b86818c1b830101359889600052603780885260406000206000805288526001918260406000205416611035579061100f6110309493926110098e611e30565b90611c3e565b9b600052885260406000206000805288526040600020908154179055612326565b610e2f565b606489600c8c6040519262461bcd60e51b845260048401528201527f416c7265616479207061696400000000000000000000000000000000000000006044820152fd5b611090919350843d861161025e576102508183611859565b9189610e28565b6110af919450823d841161025e576102508183611859565b928b610dec565b346100a55760006003193601126100a55773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361112e5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60406003193601126100a5576111ac61181a565b602490813567ffffffffffffffff81116100a557366023820112156100a5578060040135906111da8261189a565b906111e86040519283611859565b82825260209283830191368783830101116100a557816000928887930185378401015273ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690611250823014156118d4565b61127f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614611945565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036114ee577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112e25750505050506101f291506119b6565b8593949516906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528681600481865afa600091816114bf575b5061138d57608487602e8a6040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9691929394960361145657506113a2836119b6565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a283511580159061144e575b6113d857005b600080916101f2957f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6040519661140e8861183d565b602788528701527f206661696c65640000000000000000000000000000000000000000000000000060408701525190845af4611448611a88565b91611ab8565b5060016113d2565b8460296084926040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508781813d83116114e7575b6114d78183611859565b810103126100a55751908961131f565b503d6114cd565b606485601e896040519262461bcd60e51b845260048401528201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b346100a5576020806003193601126100a55761154b61181a565b73ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001692611591843014156118d4565b6115c07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614611945565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036117d657604051938285019185831067ffffffffffffffff84111761088557826040526000865260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461164757505050506101f291506119b6565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa600091816117a7575b506116f2576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361173d57611700836119b6565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590611735576113d857005b5060006113d2565b6084846040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d83116117cf575b6117bf8183611859565b810103126100a557519088611683565b503d6117b5565b6064826040519062461bcd60e51b82526004820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100a557565b6060810190811067ffffffffffffffff82111761088557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761088557604052565b67ffffffffffffffff811161088557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b156118db57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561194c57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611a1e5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611ab3573d90611a998261189a565b91611aa76040519384611859565b82523d6000602084013e565b606090565b91929015611b195750815115611acc575090565b3b15611ad55790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015611b2c5750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110611b8f575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611b4e565b519073ffffffffffffffffffffffffffffffffffffffff821682036100a557565b15611bce57565b606460405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f74206f776e6572006044820152fd5b908160209103126100a5575173ffffffffffffffffffffffffffffffffffffffff811681036100a55790565b919082018092116108b457565b73ffffffffffffffffffffffffffffffffffffffff1690604051604081019080821067ffffffffffffffff83111761088557611cc5916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1611448611a88565b805191821591848315611d4a575b505050905015611ce05750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312611d7157820151908115158203611d6e575080388084611cd3565b80fd5b5080fd5b919082039182116108b457565b9173ffffffffffffffffffffffffffffffffffffffff604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff84111761088557611df592604052611c4b565b565b8115611e01570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60009081526020603581526040908183209160ff8354161561214a5773ffffffffffffffffffffffffffffffffffffffff9180837fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168351928380927f68f1e99a00000000000000000000000000000000000000000000000000000000825260049586915afa9081156121065785918391899161212d575b50848651809481937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa90811561210657859183918991612110575b50848651809481937fe2d2bfe3000000000000000000000000000000000000000000000000000000008352165afa9081156121065790829188916120e9575b50838551809781937f76671808000000000000000000000000000000000000000000000000000000008352165afa9384156120df5786946120ac575b506001850154927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff948581019081116120805784101561203f575050611fc98261218d565b15928315611ff5575b505050611ff157611fee91506002600382015491015490611df7565b90565b5090565b82019250908211612013575061200a9061218d565b15388080611fd2565b8360116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60649350519162461bcd60e51b8352820152601660248201527f5061727469636c65206e6f7420636f6e6669726d6564000000000000000000006044820152fd5b6024886011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b9080945081813d83116120d8575b6120c48183611859565b810103126120d457519238611f84565b8580fd5b503d6120ba565b83513d88823e3d90fd5b6121009150823d841161025e576102508183611859565b38611f48565b84513d89823e3d90fd5b6121279150823d841161025e576102508183611859565b38611f09565b6121449150823d841161025e576102508183611859565b38611ec9565b60649250519062461bcd60e51b82526004820152601260248201527f5061727469636c65206e6f742076616c696400000000000000000000000000006044820152fd5b6004602073ffffffffffffffffffffffffffffffffffffffff7fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416604051928380927f2ed52a770000000000000000000000000000000000000000000000000000000082525afa801561026557612228575b506000908152603660205260408120818052602052600160408220541615611fee5750600190565b61223f9060203d811161025e576102508183611859565b5038612200565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156100a5570180359067ffffffffffffffff82116100a5576020019181360383136100a557565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156100a557016020813591019167ffffffffffffffff82116100a55781360383136100a557565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108b4576001019056fea264697066735822122017e19f3af10aa26577476cdc5326f1122230684320de5f5ab4d62bc0daa21a4764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80633659cfe6146115315780634f1ef2861461119857806352d1902d146110b657806373d6cb6314610d215780639ab1ea6614610b19578063b69ef8a814610afb578063dc79f159146102cc578063ec614b2c146100aa5763ff9268ac1461007f57600080fd5b346100a55760406003193601126100a557602061009d600435611e30565b604051908152f35b600080fd5b346100a5576020806003193601126100a55760043573ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654166040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528481600481855afa801561026557859160009161028e575b50916101486004938533911614611bc7565b604051928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa8015610265578491600091610271575b506004604051809481937f3013ce29000000000000000000000000000000000000000000000000000000008352165afa90811561026557600091610238575b5060325492826101d560335486611d75565b106101f457506101e8826101f294611d75565b6032553390611d82565b005b6064906040519062461bcd60e51b82526004820152601760248201527f4e6f7420656e6f75676820667265652062616c616e63650000000000000000006044820152fd5b6102589150833d851161025e575b6102508183611859565b810190611c12565b836101c3565b503d610246565b6040513d6000823e3d90fd5b6102889150823d841161025e576102508183611859565b85610184565b82819392503d83116102c5575b6102a58183611859565b810103126100a5576004916101486102bd8793611ba6565b919350610136565b503d61029b565b346100a5576003196020813601126100a5576004359067ffffffffffffffff82116100a55760809082360301126100a55761030a6004820180612246565b9061031b6024840160048501612246565b909161032d6044860160048701612246565b9061033e6064880160048901612246565b919092604051968795602087019960808b5260a088019061035e92612297565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0978888830301604089015261039392612297565b90868683030160608701526103a792612297565b90848483030160808501526103bb92612297565b0390810182526103cb9082611859565b51902090816000526035602052604060002060010154610ab75773ffffffffffffffffffffffffffffffffffffffff7fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541690604051917f68f1e99a000000000000000000000000000000000000000000000000000000008352602083600481845afa92831561026557600093610a92575b506020600491604051928380927f2ed52a770000000000000000000000000000000000000000000000000000000082525afa801561026557610a73575b50604051907fa7c1abe000000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff87165afa9182156102655773ffffffffffffffffffffffffffffffffffffffff92602091600091610a56575b506004604051809581937fe2d2bfe3000000000000000000000000000000000000000000000000000000008352165afa9182156102655773ffffffffffffffffffffffffffffffffffffffff92602091600091610a39575b506004604051809581937f76671808000000000000000000000000000000000000000000000000000000008352165afa91821561026557600092610a05575b506040517f1ef7e0a100000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff88165afa908115610265576000916109b2575b506106f260009173ffffffffffffffffffffffffffffffffffffffff93836040519586809581947fa689408c0000000000000000000000000000000000000000000000000000000083526020600484015261066a61065982600401836004016122d6565b6080602487015260a4860191612297565b6106e36106d56106b561068360248601866004016122d6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc9591868a84030160448b0152612297565b6106c560448601866004016122d6565b90858984030160648a0152612297565b9260648101906004016122d6565b91858403016084860152612297565b0393165af190811561026557600091610915575b5060005b81518110156107425761073d90836000526036602052604060002060008052602052604060002060018154179055612326565b61070a565b50919080600052603460205273ffffffffffffffffffffffffffffffffffffffff6020604060002054936004604051809481937f5fc8f59c000000000000000000000000000000000000000000000000000000008352165afa908115610265576000916108e3575b50600183018093116108b45760ff83116108b4576107cc906001841b90611df7565b92519360405190608082019082821067ffffffffffffffff83111761088557610880966003926040526001845260208401858152604085019182526060850192888452600052603560205260406000209451151560ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00875416911617855551600185015551600284015551910155600052603460205260406000205561087581603254611d75565b603255603354611c3e565b603355005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90506020813d60201161090d575b816108fe60209383611859565b810103126100a55751856107aa565b3d91506108f1565b90503d806000833e6109278183611859565b8101906020818303126100a55780519067ffffffffffffffff82116100a557019080601f830112156100a55781519167ffffffffffffffff8311610885578260051b906040519361097b6020840186611859565b84526020808501928201019283116100a557602001905b8282106109a25750505084610706565b8151815260209182019101610992565b90506020813d6020116109fd575b816109cd60209383611859565b810103126100a557519073ffffffffffffffffffffffffffffffffffffffff821682036100a557906106f26105f5565b3d91506109c0565b9091506020813d602011610a31575b81610a2160209383611859565b810103126100a5575190846105a0565b3d9150610a14565b610a509150823d841161025e576102508183611859565b86610561565b610a6d9150823d841161025e576102508183611859565b86610509565b610a8b9060203d60201161025e576102508183611859565b508361049a565b6004919350610aaf602091823d841161025e576102508183611859565b93915061045d565b606460405162461bcd60e51b815260206004820152601760248201527f5061727469636c6520616c7265616479206578697374730000000000000000006044820152fd5b346100a55760006003193601126100a5576020603254604051908152f35b346100a5576020806003193601126100a55760043573ffffffffffffffffffffffffffffffffffffffff91827fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654166040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528281600481855afa8015610265578391600091610ce3575b5091610bb86004938733911614611bc7565b604051928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa8015610265578291600091610cc6575b506004604051809681937f3013ce29000000000000000000000000000000000000000000000000000000008352165afa92831561026557600093610ca7575b507f23b872dd00000000000000000000000000000000000000000000000000000000604051918201523360248201523060448201528160648201526064815260a081019080821067ffffffffffffffff83111761088557610ca293610c9a92604052611c4b565b603254611c3e565b603255005b81610cbf9294503d851161025e576102508183611859565b9183610c33565b610cdd9150823d841161025e576102508183611859565b85610bf4565b82819392503d8311610d1a575b610cfa8183611859565b810103126100a557600491610bb8610d128593611ba6565b919350610ba6565b503d610cf0565b346100a55760406003193601126100a557602467ffffffffffffffff81358181116100a557366023820112156100a55780600401358281116100a557600593368183871b850101116100a55773ffffffffffffffffffffffffffffffffffffffff91827fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654166040517f68f1e99a0000000000000000000000000000000000000000000000000000000081526020928382600481865afa918215610265576004938591600094611097575b50604051948580927f2ed52a770000000000000000000000000000000000000000000000000000000082525afa92831561026557600093611078575b5060009660005b828110610fca57505050908285949392610e4b88603354611d75565b6033556004604051809881937f3013ce29000000000000000000000000000000000000000000000000000000008352165afa94851561026557600095610fa4575b509060c0849284604051809581937f6b0ea6270000000000000000000000000000000000000000000000000000000083526004356004840152165afa96871561026557600097610eea575b5050505060606101f29401511690611d82565b909192965060c0833d8211610f9c575b81610f0760c09383611859565b810103126100a5576040519660c0880191821188831017610f6f57506060926101f2979260a09260405281518452808201519084015260408101516040840152610f52848201611ba6565b8484015260808101516080840152015160a0820152948680610ed7565b7f4e487b710000000000000000000000000000000000000000000000000000000060005260416004526000fd5b3d9150610efa565b82919550610fc160c09186943d851161025e576102508183611859565b95919250610e8c565b86818c1b830101359889600052603780885260406000206000805288526001918260406000205416611035579061100f6110309493926110098e611e30565b90611c3e565b9b600052885260406000206000805288526040600020908154179055612326565b610e2f565b606489600c8c6040519262461bcd60e51b845260048401528201527f416c7265616479207061696400000000000000000000000000000000000000006044820152fd5b611090919350843d861161025e576102508183611859565b9189610e28565b6110af919450823d841161025e576102508183611859565b928b610dec565b346100a55760006003193601126100a55773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361112e5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60406003193601126100a5576111ac61181a565b602490813567ffffffffffffffff81116100a557366023820112156100a5578060040135906111da8261189a565b906111e86040519283611859565b82825260209283830191368783830101116100a557816000928887930185378401015273ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690611250823014156118d4565b61127f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614611945565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036114ee577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112e25750505050506101f291506119b6565b8593949516906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528681600481865afa600091816114bf575b5061138d57608487602e8a6040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9691929394960361145657506113a2836119b6565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a283511580159061144e575b6113d857005b600080916101f2957f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6040519661140e8861183d565b602788528701527f206661696c65640000000000000000000000000000000000000000000000000060408701525190845af4611448611a88565b91611ab8565b5060016113d2565b8460296084926040519262461bcd60e51b845260048401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508781813d83116114e7575b6114d78183611859565b810103126100a55751908961131f565b503d6114cd565b606485601e896040519262461bcd60e51b845260048401528201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b346100a5576020806003193601126100a55761154b61181a565b73ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001692611591843014156118d4565b6115c07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614611945565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036117d657604051938285019185831067ffffffffffffffff84111761088557826040526000865260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461164757505050506101f291506119b6565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa600091816117a7575b506116f2576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361173d57611700836119b6565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590611735576113d857005b5060006113d2565b6084846040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d83116117cf575b6117bf8183611859565b810103126100a557519088611683565b503d6117b5565b6064826040519062461bcd60e51b82526004820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036100a557565b6060810190811067ffffffffffffffff82111761088557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761088557604052565b67ffffffffffffffff811161088557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b156118db57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561194c57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611a1e5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611ab3573d90611a998261189a565b91611aa76040519384611859565b82523d6000602084013e565b606090565b91929015611b195750815115611acc575090565b3b15611ad55790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015611b2c5750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110611b8f575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611b4e565b519073ffffffffffffffffffffffffffffffffffffffff821682036100a557565b15611bce57565b606460405162461bcd60e51b815260206004820152601f60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f74206f776e6572006044820152fd5b908160209103126100a5575173ffffffffffffffffffffffffffffffffffffffff811681036100a55790565b919082018092116108b457565b73ffffffffffffffffffffffffffffffffffffffff1690604051604081019080821067ffffffffffffffff83111761088557611cc5916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1611448611a88565b805191821591848315611d4a575b505050905015611ce05750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312611d7157820151908115158203611d6e575080388084611cd3565b80fd5b5080fd5b919082039182116108b457565b9173ffffffffffffffffffffffffffffffffffffffff604051927fa9059cbb000000000000000000000000000000000000000000000000000000006020850152166024830152604482015260448152608081019181831067ffffffffffffffff84111761088557611df592604052611c4b565b565b8115611e01570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60009081526020603581526040908183209160ff8354161561214a5773ffffffffffffffffffffffffffffffffffffffff9180837fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168351928380927f68f1e99a00000000000000000000000000000000000000000000000000000000825260049586915afa9081156121065785918391899161212d575b50848651809481937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa90811561210657859183918991612110575b50848651809481937fe2d2bfe3000000000000000000000000000000000000000000000000000000008352165afa9081156121065790829188916120e9575b50838551809781937f76671808000000000000000000000000000000000000000000000000000000008352165afa9384156120df5786946120ac575b506001850154927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff948581019081116120805784101561203f575050611fc98261218d565b15928315611ff5575b505050611ff157611fee91506002600382015491015490611df7565b90565b5090565b82019250908211612013575061200a9061218d565b15388080611fd2565b8360116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60649350519162461bcd60e51b8352820152601660248201527f5061727469636c65206e6f7420636f6e6669726d6564000000000000000000006044820152fd5b6024886011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b9080945081813d83116120d8575b6120c48183611859565b810103126120d457519238611f84565b8580fd5b503d6120ba565b83513d88823e3d90fd5b6121009150823d841161025e576102508183611859565b38611f48565b84513d89823e3d90fd5b6121279150823d841161025e576102508183611859565b38611f09565b6121449150823d841161025e576102508183611859565b38611ec9565b60649250519062461bcd60e51b82526004820152601260248201527f5061727469636c65206e6f742076616c696400000000000000000000000000006044820152fd5b6004602073ffffffffffffffffffffffffffffffffffffffff7fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416604051928380927f2ed52a770000000000000000000000000000000000000000000000000000000082525afa801561026557612228575b506000908152603660205260408120818052602052600160408220541615611fee5750600190565b61223f9060203d811161025e576102508183611859565b5038612200565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156100a5570180359067ffffffffffffffff82116100a5576020019181360383136100a557565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156100a557016020813591019167ffffffffffffffff82116100a55781360383136100a557565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108b4576001019056fea264697066735822122017e19f3af10aa26577476cdc5326f1122230684320de5f5ab4d62bc0daa21a4764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7392,
        "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
        "label": "__gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5970,
        "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
        "label": "_balance",
        "offset": 0,
        "slot": "50",
        "type": "t_uint256"
      },
      {
        "astId": 5972,
        "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
        "label": "_locked",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 5976,
        "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
        "label": "_goldenParticlesCountByEpoch",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5981,
        "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
        "label": "_particles",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_struct(ParticleInfo)5968_storage)"
      },
      {
        "astId": 5987,
        "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
        "label": "_workersByEpoch",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5992,
        "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
        "label": "_paidWorkersByParticle",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_bytes32,t_struct(BitMap)3573_storage)"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(BitMap)3573_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BitMaps.BitMap)",
        "numberOfBytes": "32",
        "value": "t_struct(BitMap)3573_storage"
      },
      "t_mapping(t_bytes32,t_struct(ParticleInfo)5968_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PaymentModuleState.ParticleInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ParticleInfo)5968_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BitMap)3573_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 3572,
            "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ParticleInfo)5968_storage": {
        "encoding": "inplace",
        "label": "struct PaymentModuleState.ParticleInfo",
        "members": [
          {
            "astId": 5961,
            "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
            "label": "isValid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5963,
            "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
            "label": "epoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5965,
            "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
            "label": "worketsCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5967,
            "contract": "contracts/deal/PaymentModule.sol:PaymentModule",
            "label": "reward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}