{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "contracts/deal/base/ModuleBase.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./Types.sol\";\nimport \"../interfaces/ICore.sol\";\n\ncontract ModuleBase is UUPSUpgradeable {\n    bytes32 private constant _CORE_SLOT = keccak256(\"network.fluence.proxy.core\");\n\n    modifier onlyModule(Module module) {\n        require(_core().moduleByType(module) == msg.sender, \"ModuleBase: caller is not required module\");\n        _;\n    }\n\n    modifier onlyModules(Module[] calldata modules) {\n        Module callerModule = _core().moduleByAddress(msg.sender);\n\n        bool isRequiredModule = false;\n        for (uint256 i = 0; i < modules.length; i++) {\n            if (modules[i] != callerModule) {\n                continue;\n            }\n\n            isRequiredModule = true;\n            break;\n        }\n\n        require(isRequiredModule, \"ModuleBase: caller is not required module\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(_core().owner() == msg.sender, \"ModuleBase: caller is not owner\");\n        _;\n    }\n\n    modifier onlyCore() {\n        require(address(_core()) == msg.sender, \"ModuleBase: caller is not core\");\n        _;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyCore {\n        //TODO: check that new implementation from DAO\n    }\n\n    function _core() internal view returns (ICore) {\n        return ICore(StorageSlot.getAddressSlot(_CORE_SLOT).value);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/deal/base/Types.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nstruct CIDV1 {\n    bytes4 prefixes;\n    bytes32 hash;\n}\n"
    },
    "contracts/deal/interfaces/IConfigModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../base/Types.sol\";\nimport \"../../global/interfaces/IGlobalConfig.sol\";\n\ninterface IConfigModule {\n    function initialize(\n        IERC20 paymentToken_,\n        uint256 pricePerEpoch_,\n        uint256 requiredCollateral_,\n        CIDV1 calldata appCID_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        CIDV1[] calldata effectorWasmsCids_\n    ) external;\n\n    function globalConfig() external view returns (IGlobalConfig);\n\n    function fluenceToken() external view returns (IERC20);\n\n    function paymentToken() external view returns (IERC20);\n\n    function pricePerEpoch() external view returns (uint256);\n\n    function requiredCollateral() external view returns (uint256);\n\n    function appCID() external view returns (CIDV1 memory);\n\n    function minWorkers() external view returns (uint256);\n\n    function targetWorkers() external view returns (uint256);\n\n    function creationBlock() external view returns (uint256);\n\n    function effectors() external view returns (CIDV1[] memory);\n\n    function setAppCID(CIDV1 calldata appCID_) external;\n}\n"
    },
    "contracts/deal/interfaces/ICore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"./IConfigModule.sol\";\nimport \"./IPaymentModule.sol\";\nimport \"./IStatusModule.sol\";\nimport \"./IWorkersModule.sol\";\n\nenum Module {\n    None,\n    Config,\n    Payment,\n    Status,\n    Workers\n}\n\ninterface ICore {\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\n\n    function moduleByType(Module module) external view returns (address);\n\n    function moduleByAddress(address module) external view returns (Module);\n\n    function configModule() external view returns (IConfigModule);\n\n    function paymentModule() external view returns (IPaymentModule);\n\n    function statusModule() external view returns (IStatusModule);\n\n    function workersModule() external view returns (IWorkersModule);\n\n    function owner() external view returns (address);\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/deal/interfaces/IPaymentModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport \"../base/Types.sol\";\n\ninterface IPaymentModule {\n    // ----------------- Types -----------------\n    struct Particle {\n        string air;\n        string prevData;\n        string params;\n        string callResults;\n    }\n\n    // ----------------- View -----------------\n    function getRewardAmount(bytes32 particleHash, bytes32 patId) external view returns (uint);\n\n    function getPaymentBalance() external view returns (uint256);\n\n    function getLockedBalance() external view returns (uint256);\n\n    // ----------------- Mutable -----------------\n    function depositToPaymentBalance(uint256 amount) external;\n\n    function withdrawFromPaymentBalance(uint256 amount) external;\n\n    function commitParticle(Particle calldata particle, bytes32[] memory patIds) external;\n\n    function withdrawReward(bytes32 patId, bytes32[] calldata particlesHashes) external;\n}\n"
    },
    "contracts/deal/interfaces/IStatusModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nenum DealStatus {\n    WaitingForWorkers,\n    Working\n}\n\ninterface IStatusModule {\n    event StatusChanged(DealStatus newStatus);\n\n    function status() external view returns (DealStatus);\n\n    function startWorkingEpoch() external view returns (uint256);\n\n    function changeStatus(DealStatus status_) external;\n}\n"
    },
    "contracts/deal/interfaces/IWorkersModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"../base/Types.sol\";\n\nstruct PAT {\n    bytes32 id;\n    uint256 index;\n    bytes32 peerId;\n    bytes32 workerId;\n    address owner;\n    uint256 collateral;\n    uint256 created;\n}\n\ninterface IWorkersModule {\n    // ----------------- View -----------------\n    function getPAT(bytes32 id) external view returns (PAT memory);\n\n    function getPATCount() external view returns (uint256);\n\n    function getPATs() external view returns (PAT[] memory);\n\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\n\n    // ----------------- View -----------------\n    function createPAT(address computeProvider, bytes32 peerId) external returns (bytes32);\n\n    function exit(bytes32 id) external;\n\n    function withdrawCollateral(address owner) external;\n\n    function setWorker(bytes32 id, bytes32 workerId) external;\n}\n"
    },
    "contracts/deal/WorkersModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"./base/ModuleBase.sol\";\nimport \"../global/interfaces/IGlobalConfig.sol\";\nimport \"../utils/LinkedList.sol\";\nimport \"../utils/WithdrawRequests.sol\";\nimport \"./interfaces/IWorkersModule.sol\";\nimport \"./interfaces/IConfigModule.sol\";\nimport \"./interfaces/ICore.sol\";\nimport \"./interfaces/IStatusModule.sol\";\nimport \"./base/Types.sol\";\n\ncontract WorkersModuleState {\n    using LinkedList for LinkedList.Bytes32List;\n\n    // ---- Structs ----\n\n    struct OwnerInfo {\n        uint256 patCount;\n        LinkedList.Bytes32List patsIds;\n    }\n\n    // ---- Constants ----\n    bytes32 internal constant _PAT_PREFIX = keccak256(\"fluence.pat\");\n\n    // ---- Events ----\n    event PATCreated(bytes32 id, address owner);\n    event PATRemoved(bytes32 id);\n\n    event WorkerRegistred(bytes32 patId, bytes32 workerId);\n    event WorkerUnregistred(bytes32 patId);\n\n    event CollateralWithdrawn(address owner, uint256 amount);\n\n    // ---- Storage ----\n    uint256 internal _patCount;\n    LinkedList.Bytes32List _freeIndexes;\n\n    mapping(address => OwnerInfo) internal _ownersInfo;\n    mapping(bytes32 => PAT) internal _patById;\n\n    LinkedList.Bytes32List _patsIdsList;\n\n    mapping(address => WithdrawRequests.Requests) internal _withdrawRequests;\n}\n\ncontract WorkersModule is WorkersModuleState, ModuleBase, IWorkersModule {\n    using LinkedList for LinkedList.Bytes32List;\n    using WithdrawRequests for WithdrawRequests.Requests;\n    using SafeERC20 for IERC20;\n\n    // ---- Public view ----\n\n    function getPAT(bytes32 id) external view returns (PAT memory) {\n        return _patById[id];\n    }\n\n    function getPATCount() external view returns (uint256) {\n        return _patCount;\n    }\n\n    function getPATs() public view returns (PAT[] memory) {\n        PAT[] memory pats = new PAT[](_patCount);\n\n        uint256 index = 0;\n        bytes32 patId = _patsIdsList.first();\n        while (patId != bytes32(0)) {\n            pats[index] = _patById[patId];\n            index++;\n\n            patId = _patsIdsList.next(patId);\n        }\n\n        return pats;\n    }\n\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256) {\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\n        return _withdrawRequests[owner].getAmountBy(timestamp - globalConfig.withdrawTimeout());\n    }\n\n    // ---- Public Mutable ----\n    function createPAT(address computeProvider, bytes32 peerId) external returns (bytes32) {\n        ICore core = _core();\n\n        // check params and limits\n        IConfigModule config = core.configModule();\n\n        uint256 globalPATCount = _patCount;\n        require(globalPATCount < config.targetWorkers(), \"Target workers reached\");\n\n        // transfer collateral\n        uint256 requiredCollateral = config.requiredCollateral();\n        config.fluenceToken().safeTransferFrom(msg.sender, address(this), requiredCollateral);\n\n        // create PAT\n        bytes32 id = keccak256(abi.encodePacked(_PAT_PREFIX, computeProvider, peerId));\n        require(_patById[id].owner == address(0x00), \"Id already used\");\n\n        uint256 patCountByOwner = _ownersInfo[computeProvider].patCount;\n\n        _ownersInfo[computeProvider].patCount = ++patCountByOwner;\n        _patCount = ++globalPATCount;\n\n        uint index = uint(_freeIndexes.first());\n        if (index == 0) {\n            index = globalPATCount;\n        }\n\n        _patById[id] = PAT({\n            id: id,\n            peerId: peerId,\n            index: index,\n            workerId: bytes32(0),\n            owner: computeProvider,\n            collateral: requiredCollateral,\n            created: block.number\n        });\n\n        _patsIdsList.push(id);\n\n        // change status\n        IStatusModule statusController = core.statusModule();\n        {\n            DealStatus status = statusController.status();\n            if (status == DealStatus.WaitingForWorkers && globalPATCount >= config.minWorkers()) {\n                status = DealStatus.Working;\n                statusController.changeStatus(status);\n            }\n        }\n\n        emit PATCreated(id, computeProvider);\n\n        return id;\n    }\n\n    function setWorker(bytes32 patId, bytes32 workerId) external {\n        PAT storage pat = _patById[patId];\n\n        if (pat.workerId != bytes32(0)) {\n            emit WorkerUnregistred(patId);\n        }\n\n        pat.workerId = workerId;\n\n        emit WorkerRegistred(patId, workerId);\n    }\n\n    function exit(bytes32 patId) external {\n        PAT storage pat = _patById[patId];\n\n        // check owner\n        address owner = pat.owner;\n        require(owner == msg.sender, \"PAT doesn't exist\");\n\n        // change pat count\n        uint256 newPatCount = _patCount;\n        _ownersInfo[owner].patCount--;\n        _patCount = --newPatCount;\n\n        // load modules\n        ICore core = _core();\n        IConfigModule config = core.configModule();\n        IStatusModule statusController = core.statusModule();\n\n        // change status\n        if (statusController.status() == DealStatus.Working && newPatCount < config.minWorkers()) {\n            statusController.changeStatus(DealStatus.WaitingForWorkers);\n        }\n\n        // return collateral and index\n        _freeIndexes.push(bytes32(pat.index));\n        _withdrawRequests[owner].push(pat.collateral);\n\n        // remove PAT\n        delete _patById[patId];\n        _patsIdsList.remove(patId);\n\n        emit PATRemoved(patId);\n    }\n\n    function withdrawCollateral(address owner) external {\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\n\n        uint256 amount = _withdrawRequests[owner].confirmBy(block.timestamp - globalConfig.withdrawTimeout());\n        globalConfig.fluenceToken().safeTransfer(owner, amount);\n\n        emit CollateralWithdrawn(owner, amount);\n    }\n}\n"
    },
    "contracts/global/interfaces/IEpochManager.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\ninterface IEpochManager {\n    function epochDuration() external view returns (uint256);\n\n    function currentEpoch() external view returns (uint256);\n}\n"
    },
    "contracts/global/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"../../deal/base/Types.sol\";\n\ninterface IFactory {\n    function isDeal(address addr) external view returns (bool);\n\n    function createDeal(\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        CIDV1 calldata appCID_,\n        CIDV1[] calldata effectors\n    ) external returns (address);\n}\n"
    },
    "contracts/global/interfaces/IGlobalConfig.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IEpochManager.sol\";\nimport \"./IMatcher.sol\";\nimport \"./IFactory.sol\";\n\ninterface IGlobalConfig {\n    function owner() external view returns (address);\n\n    function fluenceToken() external view returns (IERC20);\n\n    function withdrawTimeout() external view returns (uint);\n\n    function epochManager() external view returns (IEpochManager);\n\n    function matcher() external view returns (IMatcher);\n\n    function factory() external view returns (IFactory);\n}\n"
    },
    "contracts/global/interfaces/IMatcher.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"../../deal/interfaces/ICore.sol\";\nimport \"../../deal/base/Types.sol\";\n\ninterface IMatcher {\n    function getFreeWorkersSolts(bytes32 peerId) external view returns (uint);\n\n    function matchWithDeal(ICore deal) external;\n}\n"
    },
    "contracts/global/Matcher.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"../deal/interfaces/ICore.sol\";\nimport \"./interfaces/IGlobalConfig.sol\";\nimport \"./interfaces/IMatcher.sol\";\nimport \"../utils/LinkedList.sol\";\nimport \"../deal/base/Types.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MatcherState {\n    // ----------------- Types -----------------\n    struct ComputeProvider {\n        uint minPricePerEpoch;\n        uint maxCollateral;\n        IERC20 paymentToken;\n        uint totalFreeWorkerSlots;\n    }\n\n    struct ComputePeer {\n        uint freeWorkerSlots;\n    }\n\n    // ----------------- Events -----------------\n    event ComputeProviderMatched(address indexed computeProvider, ICore deal, uint dealCreationBlock, CIDV1 appCID);\n    event ComputePeerMatched(bytes32 indexed peerId, ICore deal, bytes32 patId, uint dealCreationBlock, CIDV1 appCID);\n    event ComputeProviderRegistered(\n        address computeProvider,\n        uint minPricePerEpoch,\n        uint maxCollateral,\n        IERC20 paymentToken,\n        CIDV1[] effectors\n    );\n    event ComputeProviderRemoved(address computeProvider);\n    event WorkersSlotsChanged(bytes32 peerId, uint newWorkerSlots);\n\n    event MaxCollateralChanged(address computeProvider, uint newMaxCollateral);\n    event MinPricePerEpochChanged(address computeProvider, uint newMinPricePerEpoch);\n    event PaymentTokenChanged(address computeProvider, IERC20 newPaymentToken);\n    event EffectorAdded(address computeProvider, CIDV1 effector);\n    event EffectorRemoved(address computeProvider, CIDV1 effector);\n\n    // ----------------- Immutable -----------------\n    IGlobalConfig public immutable globalConfig;\n\n    // ----------------- Public Vars -----------------\n    mapping(address => ComputeProvider) public computeProviderByOwner;\n    mapping(bytes32 => ComputePeer) public computePeerByPeerId;\n    mapping(address => bool) public whitelist;\n\n    // ----------------- Internal Vars -----------------\n    LinkedList.Bytes32List internal _computeProvidersList;\n    mapping(address => LinkedList.Bytes32List) internal _computePeersListByProvider;\n    mapping(address => mapping(bytes32 => bool)) internal _effectorsByComputePeerOwner;\n\n    constructor(IGlobalConfig globalConfig_) {\n        globalConfig = globalConfig_;\n    }\n}\n\nabstract contract MatcherInternal is MatcherState, UUPSUpgradeable {\n    using SafeERC20 for IERC20;\n    using LinkedList for LinkedList.Bytes32List;\n\n    modifier onlyOwner() {\n        require(msg.sender == globalConfig.owner(), \"Only owner can call this function\");\n        _;\n    }\n\n    function _getComputeProvider(address owner) internal view returns (ComputeProvider storage) {\n        ComputeProvider storage computeProvider = computeProviderByOwner[owner];\n        require(address(computeProvider.paymentToken) != address(0x00), \"Compute provider doesn't exist\");\n\n        return computeProvider;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    function _isEffectorsMatched(IConfigModule dealConfig, address computeProvider) internal view returns (bool) {\n        CIDV1[] memory dealEffectors = dealConfig.effectors();\n\n        for (uint i = 0; i < dealEffectors.length; i++) {\n            bytes32 dealEffector = keccak256(abi.encodePacked(dealEffectors[i].prefixes, dealEffectors[i].hash));\n            if (!_effectorsByComputePeerOwner[computeProvider][dealEffector]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\nabstract contract MatcherOwnable is MatcherInternal {\n    function setWhiteList(address owner, bool hasAccess) external onlyOwner {\n        whitelist[owner] = hasAccess;\n    }\n}\n\nabstract contract MatcherComputeProviderSettings is MatcherInternal, IMatcher {\n    using LinkedList for LinkedList.Bytes32List;\n\n    using SafeERC20 for IERC20;\n\n    // ----------------- View -----------------\n    function getFreeWorkersSolts(bytes32 peerId) external view returns (uint) {\n        return computePeerByPeerId[peerId].freeWorkerSlots;\n    }\n\n    // ----------------- Mutable -----------------\n    function registerComputeProvider(uint minPricePerEpoch, uint maxCollateral, IERC20 paymentToken, CIDV1[] calldata effectors) external {\n        //TODO: require(whitelist[owner], \"Only whitelisted can call this function\");\n\n        // validate input\n        require(minPricePerEpoch > 0, \"Min price per epoch should be greater than 0\");\n        require(maxCollateral > 0, \"Max collateral should be greater than 0\");\n        require(address(paymentToken) != address(0x00), \"Compute provider already\");\n\n        address owner = msg.sender;\n        require(address(computeProviderByOwner[owner].paymentToken) == address(0x00), \"Compute provider already\");\n\n        // register compute provider\n        computeProviderByOwner[owner] = ComputeProvider({\n            minPricePerEpoch: minPricePerEpoch,\n            maxCollateral: maxCollateral,\n            paymentToken: paymentToken,\n            totalFreeWorkerSlots: 0\n        });\n        _computeProvidersList.push(bytes32(bytes20(owner)));\n\n        // register effectors\n        for (uint i = 0; i < effectors.length; i++) {\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\n            _effectorsByComputePeerOwner[owner][dealEffector] = true;\n        }\n\n        emit ComputeProviderRegistered(owner, minPricePerEpoch, maxCollateral, paymentToken, effectors);\n    }\n\n    function addWorkersSlots(bytes32 peerId, uint workerSlots) external {\n        address owner = msg.sender;\n\n        require(workerSlots > 0, \"Worker slots should be greater than 0\");\n\n        // calculate new free worker slots\n        uint256 freeWorkerSlots = computePeerByPeerId[peerId].freeWorkerSlots;\n\n        // add peer to compute provider list if it's not there\n        if (freeWorkerSlots == 0) {\n            _computePeersListByProvider[owner].push(peerId);\n        }\n\n        freeWorkerSlots += workerSlots;\n\n        computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\n\n        // put collateral\n        uint amount = computeProviderByOwner[owner].maxCollateral * workerSlots;\n        computeProviderByOwner[owner].paymentToken.safeTransferFrom(owner, address(this), amount);\n\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\n    }\n\n    function subWorkersSlots(bytes32 peerId, uint workerSlots) external {\n        address owner = msg.sender;\n\n        // validate input\n        uint256 freeWorkerSlots = computePeerByPeerId[peerId].freeWorkerSlots - workerSlots;\n        computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\n\n        // remove peer from compute provider list if it has no free worker slots\n        if (freeWorkerSlots == 0) {\n            _computePeersListByProvider[owner].remove(peerId);\n        }\n\n        // retrun collateral\n        uint amount = computeProviderByOwner[owner].maxCollateral * workerSlots;\n        computeProviderByOwner[owner].paymentToken.safeTransferFrom(address(this), owner, amount);\n\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\n    }\n\n    function changeMinPricePerEpoch(uint newMinPricePerEpoch) external {\n        require(newMinPricePerEpoch > 0, \"Min price per epoch should be greater than 0\");\n\n        ComputeProvider storage computeProvider = _getComputeProvider(msg.sender);\n\n        computeProvider.minPricePerEpoch = newMinPricePerEpoch;\n\n        emit MinPricePerEpochChanged(msg.sender, newMinPricePerEpoch);\n    }\n\n    function changeMaxCollateral(uint newMaxCollateral) external {\n        require(newMaxCollateral > 0, \"Max collateral should be greater than 0\");\n\n        address owner = msg.sender;\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\n\n        uint oldMaxCollateral = computeProvider.maxCollateral;\n\n        require(oldMaxCollateral != newMaxCollateral, \"Max collateral is the same\");\n        computeProvider.maxCollateral = newMaxCollateral;\n\n        // if compute provider has no free worker slots. Do nothing.\n        if (computeProvider.totalFreeWorkerSlots == 0) {\n            return;\n        }\n\n        // calculate new collateral\n        if (oldMaxCollateral > newMaxCollateral) {\n            uint amount = (oldMaxCollateral - newMaxCollateral) * computeProvider.totalFreeWorkerSlots;\n\n            computeProvider.paymentToken.safeTransfer(owner, amount);\n        } else {\n            uint amount = (newMaxCollateral - oldMaxCollateral) * computeProvider.totalFreeWorkerSlots;\n\n            computeProvider.paymentToken.safeTransferFrom(owner, address(this), amount);\n        }\n\n        emit MaxCollateralChanged(owner, newMaxCollateral);\n    }\n\n    function changePaymentToken(IERC20 newPaymentToken, uint newMaxCollateral) external {\n        require(address(newPaymentToken) != address(0x00), \"Payment token should be not zero address\");\n\n        address owner = msg.sender;\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\n\n        IERC20 oldPaymentToken = computeProvider.paymentToken;\n        computeProvider.paymentToken = newPaymentToken;\n\n        uint oldAmount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\n        oldPaymentToken.safeTransfer(owner, oldAmount);\n\n        uint newAmount = newMaxCollateral * computeProvider.totalFreeWorkerSlots;\n        newPaymentToken.safeTransferFrom(owner, address(this), newAmount);\n\n        emit PaymentTokenChanged(owner, newPaymentToken);\n    }\n\n    function addEffector(CIDV1 calldata effector) external {\n        address owner = msg.sender;\n\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\n\n        require(_effectorsByComputePeerOwner[owner][effectorCIDHash] == false, \"Effector already exists\");\n        _effectorsByComputePeerOwner[owner][effectorCIDHash] = true;\n\n        emit EffectorAdded(owner, effector);\n    }\n\n    function removeEffector(CIDV1 calldata effector) external {\n        address owner = msg.sender;\n\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\n\n        require(_effectorsByComputePeerOwner[owner][effectorCIDHash] == true, \"Effector doesn't exist\");\n        _effectorsByComputePeerOwner[owner][effectorCIDHash] = false;\n\n        emit EffectorRemoved(owner, effector);\n    }\n\n    function removeComputeProvider() external {\n        address owner = msg.sender;\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\n\n        require(address(computeProvider.paymentToken) != address(0x00), \"Compute provider doesn't exist\");\n\n        IERC20 paymentToken = computeProvider.paymentToken;\n        uint amount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\n\n        delete computeProvider.minPricePerEpoch;\n        delete computeProvider.maxCollateral;\n        delete computeProvider.paymentToken;\n        delete computeProvider.totalFreeWorkerSlots;\n\n        paymentToken.safeTransfer(owner, amount);\n\n        _computeProvidersList.remove(bytes32(bytes20(owner)));\n\n        emit ComputeProviderRemoved(owner);\n    }\n}\n\ncontract Matcher is MatcherComputeProviderSettings, MatcherOwnable {\n    using SafeERC20 for IERC20;\n    using LinkedList for LinkedList.Bytes32List;\n\n    constructor(IGlobalConfig globalConfig_) MatcherState(globalConfig_) {}\n\n    // ----------------- Mutable -----------------\n\n    // extra bad solution - temp solution\n    function matchWithDeal(ICore deal) external {\n        require(globalConfig.factory().isDeal(address(deal)), \"Deal is not from factory\");\n\n        // load deal modules\n        IConfigModule config = deal.configModule();\n        IWorkersModule workersModule = deal.workersModule();\n\n        // load deal config\n        CIDV1 memory dealAppCID = config.appCID();\n        uint dealRequiredCollateral = config.requiredCollateral();\n        uint dealPricePerEpoch = config.pricePerEpoch();\n        uint dealCreationBlock = config.creationBlock();\n        uint freeWorkerSlotsInDeal = config.targetWorkers() - workersModule.getPATCount();\n\n        // go through the compute providers list\n        bytes32 currentId = _computeProvidersList.first();\n\n        while (currentId != bytes32(0x00) && freeWorkerSlotsInDeal > 0) {\n            address computeProviderAddress = address(bytes20(currentId));\n\n            uint maxCollateral = computeProviderByOwner[computeProviderAddress].maxCollateral;\n            {\n                uint minPricePerEpoch = computeProviderByOwner[computeProviderAddress].minPricePerEpoch;\n\n                if (\n                    minPricePerEpoch > dealPricePerEpoch ||\n                    maxCollateral < dealRequiredCollateral ||\n                    !_isEffectorsMatched(config, computeProviderAddress)\n                ) {\n                    currentId = _computeProvidersList.next(currentId);\n                    continue;\n                }\n            }\n\n            // go through the compute peers list by compute provider\n            {\n                LinkedList.Bytes32List storage computePeersList = _computePeersListByProvider[computeProviderAddress];\n\n                bytes32 peerId = computePeersList.first();\n                while (peerId != bytes32(0x00) && freeWorkerSlotsInDeal > 0) {\n                    {\n                        uint freeWorkerSlots = computePeerByPeerId[peerId].freeWorkerSlots;\n\n                        freeWorkerSlots--;\n                        // update free worker slots\n                        if (freeWorkerSlots == 0) {\n                            delete computePeerByPeerId[peerId];\n                            computePeersList.remove(peerId);\n                        } else {\n                            computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\n                        }\n                    }\n\n                    // create PATs\n                    globalConfig.fluenceToken().approve(address(workersModule), dealRequiredCollateral);\n                    bytes32 patId = workersModule.createPAT(computeProviderAddress, peerId);\n\n                    {\n                        // refound collateral\n                        uint refoundByWorker = maxCollateral - dealRequiredCollateral;\n                        if (refoundByWorker > 0) {\n                            globalConfig.fluenceToken().transfer(computeProviderAddress, refoundByWorker);\n                        }\n\n                        freeWorkerSlotsInDeal--;\n                    }\n\n                    emit ComputePeerMatched(peerId, deal, patId, dealCreationBlock, dealAppCID);\n\n                    peerId = computePeersList.next(peerId);\n                }\n            }\n\n            emit ComputeProviderMatched(computeProviderAddress, deal, dealCreationBlock, dealAppCID);\n\n            // get next compute provider\n            currentId = _computeProvidersList.next(currentId);\n        }\n    }\n}\n"
    },
    "contracts/utils/LinkedList.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nlibrary LinkedList {\n    struct Element {\n        bytes32 prev;\n        bytes32 next;\n    }\n\n    struct Bytes32List {\n        bytes32 _first;\n        bytes32 _last;\n        mapping(bytes32 => Element) _elements;\n    }\n\n    function push(Bytes32List storage self, bytes32 key) internal {\n        require(key != bytes32(0x00), \"Key cannot be ZERO\");\n        require(!exist(self, key), \"Key already exists\");\n\n        bytes32 oldLast = self._last;\n\n        if (oldLast == 0) {\n            self._first = key;\n            self._last = key;\n            return;\n        }\n\n        self._last = key;\n        self._elements[key].prev = oldLast;\n        self._elements[oldLast].next = key;\n    }\n\n    function first(Bytes32List storage self) internal view returns (bytes32) {\n        return self._first;\n    }\n\n    function last(Bytes32List storage self) internal view returns (bytes32) {\n        return self._last;\n    }\n\n    function remove(Bytes32List storage self, bytes32 key) internal {\n        Element memory element = self._elements[key];\n\n        require(_exist(self, element, key), \"Key does not exist\");\n\n        if (element.prev == bytes32(0x00)) {\n            self._first = element.next;\n        }\n\n        if (element.next == bytes32(0x00)) {\n            self._last = element.prev;\n        }\n\n        if (element.prev != bytes32(0x00)) {\n            self._elements[element.prev].next = element.next;\n        }\n\n        if (element.next != bytes32(0x00)) {\n            self._elements[element.next].prev = element.prev;\n        }\n\n        delete self._elements[key];\n    }\n\n    function exist(Bytes32List storage self, bytes32 key) internal view returns (bool) {\n        return _exist(self, self._elements[key], key);\n    }\n\n    function _exist(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\n    }\n\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\n        return self._elements[key].next;\n    }\n\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\n        return self._elements[key].prev;\n    }\n}\n"
    },
    "contracts/utils/WithdrawRequests.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nlibrary WithdrawRequests {\n    struct Requests {\n        Request[] _requests;\n        uint256 _indexOffset;\n    }\n\n    struct Request {\n        uint32 _createTimestamp;\n        uint224 _cumulative;\n    }\n\n    function getAt(Requests storage self, uint256 index) internal view returns (uint256 timestamp, uint256 amount) {\n        uint256 realLength = self._requests.length;\n        uint256 realIndex = index + self._indexOffset;\n\n        if (realIndex >= realLength) {\n            revert(\"Index is out of range\");\n        }\n\n        Request storage request = self._requests[realIndex];\n\n        amount = request._cumulative;\n        if (realIndex != 0) {\n            Request storage previousRequest = self._requests[realIndex - 1];\n            amount -= previousRequest._cumulative;\n        }\n\n        return (request._createTimestamp, amount);\n    }\n\n    function length(Requests storage self) internal view returns (uint256) {\n        return self._requests.length - self._indexOffset;\n    }\n\n    function getAmountBy(Requests storage self, uint256 timestamp) internal view returns (uint256) {\n        (, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\n        return amount;\n    }\n\n    function push(Requests storage self, uint256 amount) internal {\n        uint32 timestamp = uint32(block.timestamp);\n\n        require(amount > 0, \"Amount can't be zero\");\n        require(amount <= type(uint224).max, \"Amount is too big\");\n\n        //TODO: check overflow\n        uint224 uint224Amount = uint224(amount);\n        uint256 realLength = self._requests.length;\n        uint256 currentLength = realLength - self._indexOffset;\n\n        if (currentLength != 0) {\n            Request storage last = self._requests[realLength - 1];\n            if (last._createTimestamp == timestamp) {\n                last._cumulative += uint224Amount;\n                return;\n            } else {\n                self._requests.push(Request(timestamp, last._cumulative + uint224Amount));\n            }\n        } else {\n            self._requests.push(Request(timestamp, uint224Amount));\n        }\n    }\n\n    function removeFromLast(Requests storage self, uint256 amount) internal {\n        uint256 realLength = self._requests.length;\n        uint256 currentLength = realLength - self._indexOffset;\n\n        require(currentLength != 0, \"Requests is empty\");\n        require(amount <= type(uint224).max, \"Amount is too big\");\n\n        //TODO: check overflow\n        uint224 uint224Amount = uint224(amount);\n\n        Request storage last = self._requests[currentLength - 1];\n        uint256 currentAmount = last._cumulative;\n\n        require(currentAmount >= uint224Amount, \"Not enough amount\");\n\n        if (uint224Amount < currentAmount) {\n            last._cumulative -= uint224Amount;\n        } else {\n            self._requests.pop();\n        }\n    }\n\n    function confirmBy(Requests storage self, uint256 timestamp) internal returns (uint256) {\n        (uint256 index, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\n        self._indexOffset = index + 1;\n        return amount;\n    }\n\n    function _getIndexAndAmountBy(Requests storage self, uint256 timestamp) private view returns (uint256, uint256) {\n        uint256 realLength = self._requests.length;\n        uint256 indexOffset = self._indexOffset;\n\n        uint256 currentLength = realLength - indexOffset;\n\n        require(currentLength != 0, \"Requests is empty\");\n\n        (uint256 index, Request storage request) = _getIndexBy(self, indexOffset, realLength - 1, timestamp);\n        uint256 amount = request._cumulative;\n        if (indexOffset != 0) {\n            amount -= self._requests[indexOffset - 1]._cumulative;\n        }\n\n        return (index, amount);\n    }\n\n    function _getIndexBy(\n        Requests storage self,\n        uint256 startLow,\n        uint256 startHigh,\n        uint256 timestamp\n    ) private view returns (uint256, Request storage request) {\n        uint256 low = startLow;\n        uint256 high = startHigh;\n\n        uint256 mid = (low + high) / 2;\n        request = self._requests[mid];\n\n        while (low != high) {\n            uint256 midTimestamp = request._createTimestamp;\n            if (midTimestamp == timestamp) {\n                return (mid, request);\n            } else if (midTimestamp < timestamp) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n\n            mid = (low + high) / 2;\n            request = self._requests[mid];\n        }\n\n        return (mid, request);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}