{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "contracts/deal/base/Types.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nstruct CIDV1 {\n    bytes4 prefixes;\n    bytes32 hash;\n}\n"
    },
    "contracts/deal/Config.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../utils/LinkedListWithUniqueKeys.sol\";\nimport \"./interfaces/IConfig.sol\";\nimport \"../global/interfaces/IGlobalCore.sol\";\nimport \"../utils/Ownable.sol\";\n\ncontract Config is Initializable, IConfig, Ownable {\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\n\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.deal.storage.v1.config\")) - 1);\n\n    struct ConfigStorage {\n        uint256 creationBlock;\n        CIDV1 appCID;\n        // --- deal config ---\n        IERC20 paymentToken;\n        uint256 collateralPerWorker;\n        uint256 minWorkers;\n        uint256 targetWorkers;\n        uint256 maxWorkersPerProvider;\n        uint256 pricePerWorkerEpoch;\n        CIDV1[] effectors;\n        // --- access ---\n        AccessType accessType;\n        LinkedListWithUniqueKeys.Bytes32List accessList;\n    }\n\n    ConfigStorage private _storage;\n\n    function _getConfigStorage() private pure returns (ConfigStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ------------------ Immutable ------------------\n    IERC20 private immutable _fluenceToken;\n    IGlobalCore private immutable _globalCore_;\n\n    // ------------------ Constructor ------------------\n    constructor(IGlobalCore globalCore_) {\n        _globalCore_ = globalCore_;\n        _fluenceToken = globalCore_.fluenceToken();\n    }\n\n    // ------------------ Initializer ------------------\n    function __Config_init(\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 collateralPerWorker_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerWorkerEpoch_,\n        CIDV1[] calldata effectors_,\n        AccessType accessType_,\n        address[] calldata accessList_,\n        address owner_\n    ) internal onlyInitializing {\n        __Ownable_init(owner_);\n\n        __Config_init_unchained(\n            paymentToken_,\n            collateralPerWorker_,\n            minWorkers_,\n            targetWorkers_,\n            maxWorkersPerProvider_,\n            pricePerWorkerEpoch_,\n            effectors_,\n            accessType_,\n            accessList_\n        );\n\n        _setAppCID(appCID_);\n    }\n\n    function __Config_init_unchained(\n        IERC20 paymentToken_,\n        uint256 collateralPerWorker_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerWorkerEpoch_,\n        CIDV1[] calldata effectors_,\n        AccessType accessType_,\n        address[] calldata accessList_\n    ) internal onlyInitializing {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        configStorage.creationBlock = block.number;\n\n        // --- init deal config ---\n        configStorage.paymentToken = paymentToken_;\n        configStorage.collateralPerWorker = collateralPerWorker_;\n        configStorage.minWorkers = minWorkers_;\n        configStorage.targetWorkers = targetWorkers_;\n        configStorage.maxWorkersPerProvider = maxWorkersPerProvider_;\n        configStorage.pricePerWorkerEpoch = pricePerWorkerEpoch_;\n\n        for (uint256 i = 0; i < effectors_.length; i++) {\n            configStorage.effectors.push(effectors_[i]);\n        }\n\n        configStorage.accessType = accessType_;\n\n        for (uint256 i = 0; i < accessList_.length; i++) {\n            configStorage.accessList.push(bytes32(bytes20(accessList_[i])));\n        }\n    }\n\n    // ------------------ View Internal Functions ------------------\n    function _globalCore() internal view returns (IGlobalCore) {\n        return _globalCore_;\n    }\n\n    // ------------------ Mutable Internal Functions ------------------\n    function _setAppCID(CIDV1 calldata appCID_) internal {\n        _getConfigStorage().appCID = appCID_;\n\n        emit AppCIDChanged(appCID_);\n    }\n\n    // ------------------ View Functions ---------------------\n    function paymentToken() public view returns (IERC20) {\n        return _getConfigStorage().paymentToken;\n    }\n\n    function fluenceToken() public view returns (IERC20) {\n        return _fluenceToken;\n    }\n\n    function creationBlock() public view returns (uint256) {\n        return _getConfigStorage().creationBlock;\n    }\n\n    function pricePerWorkerEpoch() public view returns (uint256) {\n        return _getConfigStorage().pricePerWorkerEpoch;\n    }\n\n    function targetWorkers() public view returns (uint256) {\n        return _getConfigStorage().targetWorkers;\n    }\n\n    function collateralPerWorker() public view returns (uint256) {\n        return _getConfigStorage().collateralPerWorker;\n    }\n\n    function minWorkers() public view returns (uint256) {\n        return _getConfigStorage().minWorkers;\n    }\n\n    function effectors() public view returns (CIDV1[] memory) {\n        return _getConfigStorage().effectors;\n    }\n\n    function accessType() public view returns (AccessType) {\n        return _getConfigStorage().accessType;\n    }\n\n    function isInAccessList(address addr) public view returns (bool) {\n        return _getConfigStorage().accessList.has(bytes32(bytes20(addr)));\n    }\n\n    function getAccessList() public view returns (address[] memory) {\n        bytes32[] memory result = _getConfigStorage().accessList.toArray();\n\n        /*\n        TODO: mv to assembly\n        uint256 length = result.length;\n        assembly (\"memory-safe\") {\n            return(result, mul(length, 32))\n        }*/\n\n        address[] memory result2 = new address[](result.length);\n        for (uint256 i = 0; i < result.length; i++) {\n            result2[i] = address(bytes20(result[i]));\n        }\n\n        return result2;\n    }\n\n    function appCID() external view returns (CIDV1 memory) {\n        return _getConfigStorage().appCID;\n    }\n\n    function maxWorkersPerProvider() public view returns (uint256) {\n        return _getConfigStorage().maxWorkersPerProvider;\n    }\n\n    // ------------------ Mutable Functions ------------------\n    function setAppCID(CIDV1 calldata appCID_) public onlyOwner {\n        _setAppCID(appCID_);\n    }\n\n    function changeAccessType(AccessType accessType_) external onlyOwner {\n        _getConfigStorage().accessType = accessType_;\n    }\n\n    function removeFromAccessList(address addr) external onlyOwner {\n        _getConfigStorage().accessList.remove(bytes32(bytes20(addr)));\n    }\n}\n"
    },
    "contracts/deal/Deal.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"./DealStorageUtils.sol\";\nimport \"./WorkerManager.sol\";\nimport \"./interfaces/IDeal.sol\";\nimport \"./interfaces/IConfig.sol\";\nimport \"../global/interfaces/IGlobalCore.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract Deal is WorkerManager, IDeal {\n    using BitMaps for BitMaps.BitMap;\n    using SafeERC20 for IERC20;\n    using DealStorageUtils for DealStorageUtils.Balance;\n\n    // ------------------ Constants ------------------\n    uint256 private constant _MIN_EPOCH_FOR_BALANCE_AMOUNT = 2;\n    uint256 private constant _EPOCH_FOR_ENDING = 2;\n\n    // ------------------ Types ------------------\n    struct ComputeUnitPaymentInfo {\n        uint256 startedEpoch;\n        uint256 gapsDelta;\n    }\n\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.deal.storage.v1.deal\")) - 1);\n\n    struct DealStorage {\n        uint totalBalance;\n        uint lockedBalance;\n        uint gapsEpochCount;\n        uint256 maxPaidEpoch;\n        uint256 lastCommitedEpoch;\n        mapping(bytes32 => ComputeUnitPaymentInfo) cUnitPaymentInfo;\n        bool isEnded;\n        uint endedEpoch;\n    }\n\n    DealStorage private _storage;\n\n    function _getDealStorage() private pure returns (DealStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ------------------ Constructor ---------------------\n    constructor(IGlobalCore globalCore_) Config(globalCore_) {\n        _disableInitializers();\n    }\n\n    // ------------------ Init ------------------\n    function initialize(\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 collateralPerWorker_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerWorkerEpoch_,\n        CIDV1[] calldata effectors_,\n        IConfig.AccessType accessType_,\n        address[] calldata accessList_,\n        address owner_\n    ) public initializer {\n        __Config_init(\n            appCID_,\n            paymentToken_,\n            collateralPerWorker_,\n            minWorkers_,\n            targetWorkers_,\n            maxWorkersPerProvider_,\n            pricePerWorkerEpoch_,\n            effectors_,\n            accessType_,\n            accessList_,\n            owner_\n        );\n    }\n\n    // ------------------ Privat Functions ------------------\n    function _calculateMaxPaidEpoch(\n        uint currentEpoch,\n        uint totalBalance,\n        uint pricePerWorkerEpoch_,\n        uint workerCount\n    ) private pure returns (uint256) {\n        return currentEpoch + totalBalance / (pricePerWorkerEpoch_ * workerCount);\n    }\n\n    function _preCommitPeriod(\n        DealStorageUtils.Balance memory balance,\n        uint currentEpoch,\n        uint maxPaidEpoch,\n        uint lastCommitedEpoch,\n        uint currentWorkerCount,\n        uint pricePerWorkerEpoch_\n    ) private pure {\n        if (currentEpoch > maxPaidEpoch && maxPaidEpoch > lastCommitedEpoch) {\n            uint amount = (maxPaidEpoch - lastCommitedEpoch) * pricePerWorkerEpoch_ * currentWorkerCount;\n\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\n            balance.setLockedBalance(balance.getLockedBalance() + amount);\n            balance.setGapsEpochCount(balance.getGapsEpochCount() + (currentEpoch - maxPaidEpoch));\n        } else if (currentEpoch > maxPaidEpoch && lastCommitedEpoch >= maxPaidEpoch) {\n            balance.setGapsEpochCount(balance.getGapsEpochCount() + (currentEpoch - lastCommitedEpoch));\n        } else if (currentEpoch <= maxPaidEpoch) {\n            uint amount = (currentEpoch - lastCommitedEpoch) * pricePerWorkerEpoch_ * currentWorkerCount;\n\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\n            balance.setLockedBalance(balance.getLockedBalance() + amount);\n        }\n    }\n\n    function _postCommitPeriod(DealStorageUtils.Balance memory balance, uint currentEpoch) private {\n        DealStorage storage dealStorage = _getDealStorage();\n\n        balance.commitToStorage(dealStorage);\n        dealStorage.lastCommitedEpoch = currentEpoch;\n    }\n\n    // ------------------ Public View Functions ------------------\n    function getStatus() public view returns (Status) {\n        if (_getDealStorage().isEnded) {\n            return Status.ENDED;\n        }\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\n\n        if (getComputeUnitCount() < minWorkers()) {\n            return Status.INACTIVE;\n        } else if (currentEpoch > maxPaidEpoch) {\n            return Status.INACTIVE;\n        } else {\n            return Status.ACTIVE;\n        }\n    }\n\n    function getFreeBalance() public view returns (uint256) {\n        DealStorage storage dealStorage = _getDealStorage();\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        if (currentEpoch > dealStorage.maxPaidEpoch) {\n            return 0;\n        }\n        return dealStorage.totalBalance - ((currentEpoch - dealStorage.lastCommitedEpoch) * pricePerWorkerEpoch() * getComputeUnitCount());\n    }\n\n    function getRewardAmount(bytes32 computeUnitId) public view returns (uint) {\n        DealStorage storage dealStorage = _getDealStorage();\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        uint workerCount = getComputeUnitCount();\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\n\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\n\n        uint reward = ((currentEpoch - computeUnitPaymentInfo.startedEpoch) -\n            (balance.getGapsEpochCount() - computeUnitPaymentInfo.gapsDelta)) * pricePerWorkerEpoch_;\n\n        return reward;\n    }\n\n    function getMaxPaidEpoch() public view returns (uint256) {\n        return _getDealStorage().maxPaidEpoch;\n    }\n\n    // ------------------ Public Mutable Functions ------------------\n    function deposit(uint256 amount) external onlyOwner {\n        DealStorage storage dealStorage = _getDealStorage();\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        uint workerCount = getComputeUnitCount();\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\n\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\n\n        balance.setTotalBalance(balance.getTotalBalance() + amount);\n\n        uint maxPaidEpoch = _calculateMaxPaidEpoch(currentEpoch, balance.getTotalBalance(), pricePerWorkerEpoch_, workerCount);\n        dealStorage.maxPaidEpoch = maxPaidEpoch;\n\n        _postCommitPeriod(balance, currentEpoch);\n\n        paymentToken().safeTransferFrom(msg.sender, address(this), amount);\n\n        emit MaxPaidEpochUpdated(maxPaidEpoch);\n        emit Deposited(amount);\n    }\n\n    function withdraw(uint256 amount) external onlyOwner {\n        DealStorage storage dealStorage = _getDealStorage();\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        uint workerCount = getComputeUnitCount();\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\n\n        if (dealStorage.isEnded) {\n            require(currentEpoch > dealStorage.endedEpoch + _EPOCH_FOR_ENDING, \"Can't withdraw before 2 epochs after deal end\");\n            dealStorage.totalBalance -= amount;\n        } else {\n            DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\n            _preCommitPeriod(\n                balance,\n                currentEpoch,\n                dealStorage.maxPaidEpoch,\n                dealStorage.lastCommitedEpoch,\n                workerCount,\n                pricePerWorkerEpoch_\n            );\n\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\n\n            uint minBalance = _MIN_EPOCH_FOR_BALANCE_AMOUNT * pricePerWorkerEpoch_ * targetWorkers();\n            require(balance.getTotalBalance() >= minBalance, \"Free balance needs to cover minimum 2 epochs\");\n\n            uint maxPaidEpoch = _calculateMaxPaidEpoch(currentEpoch, balance.getTotalBalance(), pricePerWorkerEpoch_, workerCount);\n            dealStorage.maxPaidEpoch = maxPaidEpoch;\n\n            _postCommitPeriod(balance, currentEpoch);\n\n            emit MaxPaidEpochUpdated(maxPaidEpoch);\n        }\n\n        paymentToken().safeTransfer(msg.sender, amount);\n\n        emit Withdrawn(amount);\n    }\n\n    function withdrawRewards(bytes32 computeUnitId) external {\n        DealStorage storage dealStorage = _getDealStorage();\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        uint workerCount = getComputeUnitCount();\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\n\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\n\n        uint globalGapsEpochCount = balance.getGapsEpochCount();\n\n        uint reward = ((currentEpoch - computeUnitPaymentInfo.startedEpoch) - (globalGapsEpochCount - computeUnitPaymentInfo.gapsDelta)) *\n            pricePerWorkerEpoch_;\n\n        require(reward > 0, \"No rewards\");\n\n        computeUnitPaymentInfo.startedEpoch = currentEpoch;\n        computeUnitPaymentInfo.gapsDelta = globalGapsEpochCount;\n\n        balance.setLockedBalance(balance.getLockedBalance() - reward);\n\n        _postCommitPeriod(balance, currentEpoch);\n\n        paymentToken().safeTransfer(msg.sender, reward);\n\n        emit RewardWithdrawn(computeUnitId, reward);\n    }\n\n    function createComputeUnit(address computeProvider, bytes32 peerId) public returns (bytes32) {\n        DealStorage storage dealStorage = _getDealStorage();\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        (bytes32 computeUnitId, uint newComputeUnitCount) = _createComputeUnit(currentEpoch, computeProvider, peerId);\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\n\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\n\n        uint maxPaidEpoch = dealStorage.maxPaidEpoch;\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, newComputeUnitCount - 1, pricePerWorkerEpoch_);\n\n        if (newComputeUnitCount >= minWorkers() && maxPaidEpoch > currentEpoch) {\n            uint newMaxPaidEpoch = _calculateMaxPaidEpoch(\n                currentEpoch,\n                balance.getTotalBalance(),\n                pricePerWorkerEpoch_,\n                newComputeUnitCount\n            );\n            dealStorage.maxPaidEpoch = newMaxPaidEpoch;\n\n            emit MaxPaidEpochUpdated(newMaxPaidEpoch);\n        }\n\n        _postCommitPeriod(balance, currentEpoch);\n\n        computeUnitPaymentInfo.startedEpoch = currentEpoch;\n        computeUnitPaymentInfo.gapsDelta = balance.getGapsEpochCount();\n\n        return computeUnitId;\n    }\n\n    function removeComputeUnit(bytes32 computeUnitId) public {\n        DealStorage storage dealStorage = _getDealStorage();\n\n        uint currentEpoch = _globalCore().currentEpoch();\n        uint newComputeUnitCount = _removeComputeUnit(computeUnitId, dealStorage.isEnded ? dealStorage.endedEpoch : currentEpoch);\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\n\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, newComputeUnitCount + 1, pricePerWorkerEpoch_);\n\n        uint minWorkers_ = minWorkers();\n        if (newComputeUnitCount < minWorkers_ && maxPaidEpoch > currentEpoch) {\n            dealStorage.maxPaidEpoch = currentEpoch;\n\n            emit MaxPaidEpochUpdated(currentEpoch);\n        } else if (newComputeUnitCount >= minWorkers_) {\n            uint newMaxPaidEpoch = _calculateMaxPaidEpoch(\n                currentEpoch,\n                balance.getTotalBalance(),\n                pricePerWorkerEpoch_,\n                newComputeUnitCount\n            );\n            dealStorage.maxPaidEpoch = newMaxPaidEpoch;\n\n            emit MaxPaidEpochUpdated(newMaxPaidEpoch);\n        }\n\n        _postCommitPeriod(balance, currentEpoch);\n    }\n\n    function stop() external onlyOwner {\n        DealStorage storage dealStorage = _getDealStorage();\n\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\n        uint currentEpoch = _globalCore().currentEpoch();\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\n\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, getComputeUnitCount(), pricePerWorkerEpoch());\n        _postCommitPeriod(balance, currentEpoch);\n        if (maxPaidEpoch > currentEpoch) {\n            dealStorage.maxPaidEpoch = currentEpoch;\n\n            emit MaxPaidEpochUpdated(currentEpoch);\n        }\n\n        dealStorage.isEnded = true;\n        dealStorage.endedEpoch = currentEpoch;\n\n        emit DealEnded(currentEpoch);\n    }\n}\n"
    },
    "contracts/deal/DealStorageUtils.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"./Deal.sol\";\n\nlibrary DealStorageUtils {\n    // ------------------ TYPES ------------------\n    struct Balance {\n        uint _initTotalBalance;\n        uint _initLockedBalance;\n        uint _initGapsEpochCount;\n        uint _totalBalance;\n        uint _lockedBalance;\n        uint _gapsEpochCount;\n    }\n\n    // ------------------ VIEWS ------------------\n    function getTotalBalance(Balance memory self) internal pure returns (uint) {\n        return self._totalBalance;\n    }\n\n    function getLockedBalance(Balance memory self) internal pure returns (uint) {\n        return self._lockedBalance;\n    }\n\n    function getGapsEpochCount(Balance memory self) internal pure returns (uint) {\n        return self._gapsEpochCount;\n    }\n\n    // ------------------ MUTABLES ------------------\n    function initCache(Deal.DealStorage storage dealStorage) internal view returns (Balance memory) {\n        uint totalBalance = dealStorage.totalBalance;\n        uint lockedBalance = dealStorage.lockedBalance;\n        uint gapsEpochCount = dealStorage.gapsEpochCount;\n\n        return\n            Balance({\n                _initTotalBalance: totalBalance,\n                _initLockedBalance: lockedBalance,\n                _initGapsEpochCount: gapsEpochCount,\n                _totalBalance: totalBalance,\n                _lockedBalance: lockedBalance,\n                _gapsEpochCount: gapsEpochCount\n            });\n    }\n\n    function setTotalBalance(Balance memory self, uint totalBalance) internal pure {\n        self._totalBalance = totalBalance;\n    }\n\n    function setLockedBalance(Balance memory self, uint lockedBalance) internal pure {\n        self._lockedBalance = lockedBalance;\n    }\n\n    function setGapsEpochCount(Balance memory self, uint gapsEpochCount) internal pure {\n        self._gapsEpochCount = gapsEpochCount;\n    }\n\n    function commitToStorage(Balance memory self, Deal.DealStorage storage dealStorage) internal {\n        if (self._initTotalBalance != self._totalBalance) {\n            dealStorage.totalBalance = self._totalBalance;\n        }\n\n        if (self._initLockedBalance != self._lockedBalance) {\n            dealStorage.lockedBalance = self._lockedBalance;\n        }\n\n        if (self._initGapsEpochCount != self._gapsEpochCount) {\n            dealStorage.gapsEpochCount = self._gapsEpochCount;\n        }\n    }\n}\n"
    },
    "contracts/deal/interfaces/IConfig.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../base/Types.sol\";\n\ninterface IConfig {\n    // ------------------ Types ------------------\n    enum AccessType {\n        NONE,\n        WHITELIST,\n        BLACKLIST\n    }\n\n    // ------------------ Events ------------------\n    event AppCIDChanged(CIDV1 newAppCID);\n\n    // ------------------ View Functions ---------------------\n    // function globalCore() external view returns (address);\n\n    function paymentToken() external view returns (IERC20);\n\n    function fluenceToken() external view returns (IERC20);\n\n    function creationBlock() external view returns (uint256);\n\n    function pricePerWorkerEpoch() external view returns (uint256);\n\n    function targetWorkers() external view returns (uint256);\n\n    function collateralPerWorker() external view returns (uint256);\n\n    function minWorkers() external view returns (uint256);\n\n    function effectors() external view returns (CIDV1[] memory);\n\n    function accessType() external view returns (AccessType);\n\n    function isInAccessList(address addr) external view returns (bool);\n\n    function getAccessList() external view returns (address[] memory);\n\n    function appCID() external view returns (CIDV1 memory);\n\n    function maxWorkersPerProvider() external view returns (uint256);\n\n    // ------------------ Mutable Functions ------------------\n    function setAppCID(CIDV1 calldata appCID_) external;\n\n    function changeAccessType(AccessType accessType_) external;\n\n    function removeFromAccessList(address addr) external;\n}\n"
    },
    "contracts/deal/interfaces/IDeal.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IConfig.sol\";\nimport \"./IWorkerManager.sol\";\n\ninterface IDeal is IConfig, IWorkerManager {\n    // ------------------ Types ------------------\n    enum Status {\n        INACTIVE,\n        ACTIVE,\n        ENDED\n    }\n\n    // ----------------- Events -----------------\n    event Deposited(uint256 amount);\n    event Withdrawn(uint256 amount);\n\n    event RewardWithdrawn(bytes32 computeUnitId, uint256 reward);\n\n    event MaxPaidEpochUpdated(uint256 maxPaidEpoch);\n\n    event DealEnded(uint256 endedEpoch);\n\n    // ------------------ Init ------------------\n    function initialize(\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 collateralPerWorker_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerWorkerEpoch_,\n        CIDV1[] calldata effectors_,\n        IConfig.AccessType accessType_,\n        address[] calldata accessList_,\n        address owner_\n    ) external;\n\n    // ------------------ Public Ownable Functions ------------------\n    function deposit(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    // ------------------ Public View Functions ------------------\n    function getStatus() external view returns (Status);\n\n    function getFreeBalance() external view returns (uint256);\n\n    function getRewardAmount(bytes32 computeUnitId) external view returns (uint);\n\n    function getMaxPaidEpoch() external view returns (uint256);\n\n    // ------------------ Public Mutable Functions ------------------\n    function withdrawRewards(bytes32 computeUnitId) external;\n}\n"
    },
    "contracts/deal/interfaces/IWorkerManager.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"../../utils/LinkedListWithUniqueKeys.sol\";\n\ninterface IWorkerManager {\n    // ------------------ Types ------------------\n    struct ComputeUnit {\n        bytes32 id;\n        bytes32 peerId;\n        bytes32 workerId;\n        address owner;\n        uint256 collateral;\n        uint256 created;\n    }\n\n    // ------------------ Events ------------------\n    event ComputeUnitCreated(bytes32 id, address owner);\n    event ComputeUnitRemoved(bytes32 id);\n\n    event WorkerIdUpdated(bytes32 computeUnitId, bytes32 workerId);\n\n    event CollateralWithdrawn(address owner, uint256 amount);\n\n    // ------------------ Public View Functions ---------------------\n    function getComputeUnit(bytes32 id) external view returns (ComputeUnit memory);\n\n    function getComputeUnitCount() external view returns (uint256);\n\n    function getComputeUnits() external view returns (ComputeUnit[] memory);\n\n    function getUnlockCollateralEpoch(bytes32 computeUnitId) external view returns (uint256);\n\n    // ------------------ Public Mutable Functions ---------------------\n    function createComputeUnit(address computeProvider, bytes32 peerId) external returns (bytes32);\n\n    function removeComputeUnit(bytes32 computeUnitId) external;\n\n    function setWorker(bytes32 computeUnitId, bytes32 workerId) external;\n\n    function withdrawCollateral(bytes32 computeUnitId) external;\n}\n"
    },
    "contracts/deal/WorkerManager.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"./Config.sol\";\nimport \"./interfaces/IWorkerManager.sol\";\nimport \"../utils/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nabstract contract WorkerManager is Config, IWorkerManager {\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\n    using SafeERC20 for IERC20;\n\n    // ------------------ Types ------------------\n    struct ComputeProviderInfo {\n        uint256 computeUnitCount;\n        LinkedListWithUniqueKeys.Bytes32List computeUnitsIds;\n    }\n\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.deal.storage.v1.workerManager\")) - 1);\n\n    struct WorkerManagerStorage {\n        // global area\n        uint256 computeUnitCount;\n        mapping(address => ComputeProviderInfo) computeProviderInfo;\n        // compute units area\n        mapping(bytes32 => ComputeUnit) computeUnitById;\n        LinkedListWithUniqueKeys.Bytes32List computeUnitsIdsList;\n        mapping(bytes32 => uint256) collateralWithdrawEpochByComputeUnitId;\n    }\n\n    WorkerManagerStorage private _storage;\n\n    function _getWorkerManagerStorage() private pure returns (WorkerManagerStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ------------------ Constants ------------------\n    bytes32 private constant _COMPUTE_UNIT_ID_PREFIX = keccak256(\"fluence.computeUnit.\");\n    uint256 private constant _WITHDRAW_EPOCH_TIMEOUT = 2;\n\n    // ------------------ Internal Mutable Functions ------------------\n    function _createComputeUnit(\n        uint createdEpoch,\n        address computeProvider,\n        bytes32 peerId\n    ) internal returns (bytes32 id, uint computeUnitCount) {\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\n\n        // check target workers count\n        uint256 globalComputeUnitCount = workerStorage.computeUnitCount;\n        require(globalComputeUnitCount < targetWorkers(), \"Target workers reached\");\n\n        // check peerId isn't exist\n        id = keccak256(abi.encodePacked(_COMPUTE_UNIT_ID_PREFIX, computeProvider, peerId));\n        require(workerStorage.computeUnitById[id].owner == address(0x00), \"Id already used\");\n\n        // check max workers per compute provider\n        uint256 computeUnitCountByCP = workerStorage.computeProviderInfo[computeProvider].computeUnitCount;\n        require(computeUnitCountByCP < maxWorkersPerProvider(), \"Max workers per compute provider reached\");\n\n        // increase computeUnit count\n        workerStorage.computeProviderInfo[computeProvider].computeUnitCount = ++computeUnitCountByCP;\n        workerStorage.computeUnitCount = ++globalComputeUnitCount;\n\n        // get required collateral\n        uint256 collateral = collateralPerWorker();\n\n        // create ComputeUnit\n        workerStorage.computeUnitById[id] = ComputeUnit({\n            id: id,\n            peerId: peerId,\n            workerId: bytes32(0),\n            owner: computeProvider,\n            collateral: collateral,\n            created: createdEpoch\n        });\n\n        // add ComputeUnit to list\n        workerStorage.computeUnitsIdsList.push(id);\n\n        emit ComputeUnitCreated(id, computeProvider);\n\n        // transfer collateral\n        fluenceToken().safeTransferFrom(msg.sender, address(this), collateral);\n\n        return (id, globalComputeUnitCount);\n    }\n\n    function _removeComputeUnit(bytes32 computeUnitId, uint lastWorkedEpoch) public returns (uint computeUnitCount) {\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\n\n        // check owner\n        address computeProvider = workerStorage.computeUnitById[computeUnitId].owner;\n        require(computeProvider != address(0x00), \"ComputeUnit not found\");\n        require(computeProvider == msg.sender || msg.sender == owner(), \"Only provider or deal owner can remove worker\");\n\n        // change computeUnit count\n        uint256 newComputeUnitCount = workerStorage.computeUnitCount;\n        workerStorage.computeProviderInfo[computeProvider].computeUnitCount--;\n        workerStorage.computeUnitCount = --newComputeUnitCount;\n\n        workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] = lastWorkedEpoch + _WITHDRAW_EPOCH_TIMEOUT;\n\n        // remove ComputeUnit\n        workerStorage.computeUnitsIdsList.remove(computeUnitId);\n\n        emit ComputeUnitRemoved(computeUnitId);\n\n        return newComputeUnitCount;\n    }\n\n    // ------------------ Public View Functions ---------------------\n    function getComputeUnit(bytes32 id) public view returns (ComputeUnit memory) {\n        return _getWorkerManagerStorage().computeUnitById[id];\n    }\n\n    function getComputeUnitCount() public view returns (uint256) {\n        return _getWorkerManagerStorage().computeUnitCount;\n    }\n\n    function getComputeUnits() public view returns (ComputeUnit[] memory) {\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\n\n        ComputeUnit[] memory computeUnits = new ComputeUnit[](workerStorage.computeUnitCount);\n\n        uint256 index = 0;\n        bytes32 computeUnitId = workerStorage.computeUnitsIdsList.first();\n        while (computeUnitId != bytes32(0)) {\n            computeUnits[index] = workerStorage.computeUnitById[computeUnitId];\n            index++;\n\n            computeUnitId = workerStorage.computeUnitsIdsList.next(computeUnitId);\n        }\n\n        return computeUnits;\n    }\n\n    function getUnlockCollateralEpoch(bytes32 computeUnitId) external view returns (uint256) {\n        return _getWorkerManagerStorage().collateralWithdrawEpochByComputeUnitId[computeUnitId];\n    }\n\n    // ------------------ Public Mutable Functions ---------------------\n    function setWorker(bytes32 computeUnitId, bytes32 workerId) external {\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\n        ComputeUnit storage computeUnit = workerStorage.computeUnitById[computeUnitId];\n\n        require(workerId != bytes32(0), \"WorkerId can't be empty\");\n\n        computeUnit.workerId = workerId;\n\n        emit WorkerIdUpdated(computeUnitId, workerId);\n    }\n\n    function withdrawCollateral(bytes32 computeUnitId) external {\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\n\n        require(\n            workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] <= _globalCore().currentEpoch(),\n            \"Collateral not available\"\n        );\n\n        // get collateral and compute provider\n        uint256 amount = workerStorage.computeUnitById[computeUnitId].collateral;\n        address computeProvider = workerStorage.computeUnitById[computeUnitId].owner;\n\n        // reset collateral withdraw info\n        workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] = 0;\n\n        // transfer collateral\n        fluenceToken().safeTransfer(computeProvider, amount);\n\n        delete workerStorage.computeUnitById[computeUnitId];\n\n        emit CollateralWithdrawn(computeProvider, amount);\n    }\n}\n"
    },
    "contracts/global/DealFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"./interfaces/IDealFactory.sol\";\nimport \"./interfaces/IGlobalCore.sol\";\nimport \"../deal/interfaces/IDeal.sol\";\nimport \"../utils/Ownable.sol\";\n\ncontract DealFactory is UUPSUpgradeable, IDealFactory {\n    // ----------------- Immutable -----------------\n    IGlobalCore public immutable globalCore;\n    IDeal public immutable dealImpl;\n\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.dealFactory.storage.v1\")) - 1);\n\n    struct DealFactoryStorage {\n        mapping(IDeal => bool) hasDeal;\n    }\n\n    DealFactoryStorage private _storage;\n\n    function _getDealFactoryStorage() private pure returns (DealFactoryStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ----------------- Modifiers -----------------\n    modifier onlyOwner() {\n        require(msg.sender == Ownable(address(globalCore)).owner(), \"Only owner can call this function\");\n        _;\n    }\n\n    // ----------------- Constructor -----------------\n    constructor(IGlobalCore globalCore_, IDeal dealImpl_) {\n        globalCore = globalCore_;\n        dealImpl = dealImpl_;\n        _disableInitializers();\n    }\n\n    // ----------------- View -----------------\n    function hasDeal(IDeal deal) external view returns (bool) {\n        return _getDealFactoryStorage().hasDeal[deal];\n    }\n\n    // ----------------- Mutable -----------------\n    function deployDeal(\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 collateralPerWorker_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerWorkerEpoch_,\n        CIDV1[] calldata effectors_,\n        IDeal.AccessType accessType_,\n        address[] calldata accessList_\n    ) external returns (IDeal) {\n        IDeal deal = IDeal(\n            address(\n                new ERC1967Proxy(\n                    address(dealImpl),\n                    abi.encodeWithSelector(\n                        IDeal.initialize.selector,\n                        appCID_,\n                        paymentToken_,\n                        collateralPerWorker_,\n                        minWorkers_,\n                        targetWorkers_,\n                        maxWorkersPerProvider_,\n                        pricePerWorkerEpoch_,\n                        effectors_,\n                        accessType_,\n                        accessList_,\n                        msg.sender\n                    )\n                )\n            )\n        );\n\n        DealFactoryStorage storage dealFactoryStorage = _getDealFactoryStorage();\n        dealFactoryStorage.hasDeal[deal] = true;\n\n        emit DealCreated(msg.sender, deal, globalCore.currentEpoch());\n\n        return deal;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n"
    },
    "contracts/global/GlobalCore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"../utils/Ownable.sol\";\nimport \"./interfaces/IGlobalCore.sol\";\nimport \"./interfaces/IDealFactory.sol\";\nimport \"./matcher/interfaces/IMatcher.sol\";\n\ncontract GlobalCore is UUPSUpgradeable, Ownable, IGlobalCore {\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.globalCore.storage.v1\")) - 1);\n\n    struct GlobalCoreStorage {\n        IERC20 fluenceToken;\n        uint256 epochDuration;\n        IMatcher matcher;\n        IDealFactory factory;\n    }\n\n    GlobalCoreStorage private _storage;\n\n    function _getGlobalCoreStorage() private pure returns (GlobalCoreStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ------------------ Constuctor ------------------\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ------------------ Initializer ------------------\n    function initialize(IERC20 fluenceToken_, uint256 epochDuration_) external initializer {\n        GlobalCoreStorage storage globalCoreStorage = _getGlobalCoreStorage();\n\n        globalCoreStorage.fluenceToken = fluenceToken_;\n        globalCoreStorage.epochDuration = epochDuration_;\n\n        __Ownable_init(msg.sender);\n    }\n\n    // ------------------ Internal Mutable Functions ------------------\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    // ------------------ external View Functions ------------------\n    function currentEpoch() external view returns (uint256) {\n        return block.timestamp / _getGlobalCoreStorage().epochDuration;\n    }\n\n    function epochDuration() external view returns (uint256) {\n        return _getGlobalCoreStorage().epochDuration;\n    }\n\n    function fluenceToken() external view returns (IERC20) {\n        return _getGlobalCoreStorage().fluenceToken;\n    }\n\n    function matcher() external view returns (IMatcher) {\n        return _getGlobalCoreStorage().matcher;\n    }\n\n    function factory() external view returns (IDealFactory) {\n        return _getGlobalCoreStorage().factory;\n    }\n\n    // ------------------ external Mutable Functions ------------------\n    function setMatcher(IMatcher matcher_) external onlyOwner {\n        _getGlobalCoreStorage().matcher = matcher_;\n    }\n\n    function setFactory(IDealFactory factory_) external onlyOwner {\n        _getGlobalCoreStorage().factory = factory_;\n    }\n}\n"
    },
    "contracts/global/interfaces/IDealFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"../../deal/base/Types.sol\";\nimport \"../../deal/interfaces/IDeal.sol\";\n\ninterface IDealFactory {\n    // ----------------- Events -----------------\n    event DealCreated(address indexed owner, IDeal deal, uint createdAtEpoch);\n\n    // ----------------- View -----------------\n    function hasDeal(IDeal deal) external view returns (bool);\n\n    // ----------------- Mutable -----------------\n    function deployDeal(\n        CIDV1 calldata appCID_,\n        IERC20 paymentToken_,\n        uint256 collateralPerWorker_,\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 pricePerWorkerEpoch_,\n        CIDV1[] calldata effectors_,\n        IDeal.AccessType accessType_,\n        address[] calldata accessList_\n    ) external returns (IDeal);\n}\n"
    },
    "contracts/global/interfaces/IGlobalCore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IDealFactory.sol\";\nimport \"../matcher/interfaces/IMatcher.sol\";\n\npragma solidity ^0.8.19;\n\ninterface IGlobalCore {\n    // ------------------ Events ------------------\n    event MatcherSet(address matcher);\n    event FactorySet(address factory);\n\n    // ------------------ Initializer ------------------\n    function initialize(IERC20 fluenceToken_, uint256 epochDuration_) external;\n\n    // ------------------ external View Functions ------------------\n    function currentEpoch() external view returns (uint256);\n\n    function epochDuration() external view returns (uint256);\n\n    function fluenceToken() external view returns (IERC20);\n\n    function matcher() external view returns (IMatcher);\n\n    function factory() external view returns (IDealFactory);\n\n    // ------------------ external Mutable Functions ------------------\n    function setMatcher(IMatcher matcher_) external;\n\n    function setFactory(IDealFactory factory_) external;\n}\n"
    },
    "contracts/global/matcher/interfaces/IMatcher.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../../deal/base/Types.sol\";\nimport \"../../../deal/interfaces/IDeal.sol\";\n\ninterface IMatcher {\n    // ----------------- Events -----------------\n    event ComputePeerMatched(bytes32 indexed peerId, IDeal deal, bytes32 computeUnitId, uint dealCreationBlock, CIDV1 appCID);\n\n    // ----------------- View -----------------\n    // TODO: move this logic to offchain. Temp solution\n    function findComputePeers(IDeal deal) external view returns (address[] memory computeProviders, bytes32[][] memory computePeers);\n\n    // ----------------- Mutables -----------------\n    function matchDeal(IDeal deal, address[] calldata providers, bytes32[][] calldata peers) external;\n}\n"
    },
    "contracts/global/matcher/interfaces/IMatcherConfig.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../../deal/base/Types.sol\";\nimport \"../../../deal/interfaces/IDeal.sol\";\n\ninterface IMatcherConfig {\n    // ----------------- Types -----------------\n    struct ComputeProvider {\n        uint minPricePerEpoch;\n        uint maxCollateral;\n        IERC20 paymentToken;\n        uint totalFreeWorkerSlots;\n    }\n\n    struct ComputePeer {\n        uint freeWorkerSlots;\n    }\n\n    // ----------------- Events -----------------\n    event ComputeProviderRegistered(\n        address computeProvider,\n        uint minPricePerEpoch,\n        uint maxCollateral,\n        IERC20 paymentToken,\n        CIDV1[] effectors\n    );\n    event ComputeProviderRemoved(address computeProvider);\n\n    event WorkersSlotsChanged(bytes32 peerId, uint newWorkerSlots);\n    event MinPricePerEpochChanged(address computeProvider, uint newMinPricePerEpoch);\n    event MaxCollateralChanged(address computeProvider, uint newMaxCollateral);\n    event PaymentTokenChanged(address computeProvider, IERC20 newPaymentToken);\n    event EffectorAdded(address computeProvider, CIDV1 effector);\n    event EffectorRemoved(address computeProvider, CIDV1 effector);\n\n    // ----------------- View -----------------\n    function getComputeProviderInfo(address provider) external view returns (ComputeProvider memory);\n\n    function getPeersByComputeProvider(address provider) external view returns (bytes32[] memory peerIds, ComputePeer[] memory);\n\n    function getComputePeerInfo(bytes32 peerId) external view returns (ComputePeer memory);\n\n    // ----------------- Mutable -----------------\n    function registerComputeProvider(uint minPricePerEpoch, uint maxCollateral, IERC20 paymentToken, CIDV1[] calldata effectors) external;\n\n    function addWorkersSlots(bytes32 peerId, uint workerSlots) external;\n\n    function subWorkersSlots(bytes32 peerId, uint workerSlots) external;\n\n    function changeMinPricePerEpoch(uint newMinPricePerEpoch) external;\n\n    function changeMaxCollateral(uint newMaxCollateral) external;\n\n    function changePaymentToken(IERC20 newPaymentToken, uint newMaxCollateral) external;\n\n    function addEffector(CIDV1 calldata effector) external;\n\n    function removeEffector(CIDV1 calldata effector) external;\n\n    function removeComputeProvider() external;\n}\n"
    },
    "contracts/global/matcher/Matcher.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./MatcherConfig.sol\";\nimport \"./interfaces/IMatcher.sol\";\nimport \"../../deal/interfaces/IDeal.sol\";\nimport \"../../deal/interfaces/IConfig.sol\";\n\ncontract Matcher is MatcherConfig, IMatcher {\n    using SafeERC20 for IERC20;\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\n    using ComputeProvidersList for ComputeProvidersList.List;\n    using ComputeProvidersList for ComputeProvidersList.ComputePeersList;\n\n    // ----------------- Constants -----------------\n    uint256 private constant _MIN_REMATCHING_EPOCHS = 2;\n\n    // ----------------- Constructor -----------------\n    constructor(IGlobalCore globalCore_) MatcherConfig(globalCore_) {}\n\n    // ----------------- View -----------------\n    // TODO: move this logic to offchain. Temp solution\n    function findComputePeers(IDeal deal) external view returns (address[] memory computeProviders, bytes32[][] memory computePeers) {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        uint pricePerWorkerEpoch = deal.pricePerWorkerEpoch();\n        uint collateralPerWorker = deal.collateralPerWorker();\n        uint freeWorkerSlots = deal.targetWorkers() - deal.getComputeUnitCount();\n        CIDV1[] memory effectors = deal.effectors();\n        IDeal.AccessType accessType = deal.accessType();\n\n        bytes32 currentId = configStorage.computeProvidersList.first();\n        ComputeProvidersList.List memory foundComputeProviders;\n\n        // TODO: optimize with white list\n        while (currentId != bytes32(0x00) && freeWorkerSlots > 0) {\n            address computeProviderAddress = address(bytes20(currentId));\n\n            if (\n                (accessType == IConfig.AccessType.BLACKLIST && deal.isInAccessList(computeProviderAddress)) ||\n                (accessType == IConfig.AccessType.WHITELIST && !deal.isInAccessList(computeProviderAddress)) ||\n                pricePerWorkerEpoch < configStorage.computeProviderByOwner[computeProviderAddress].minPricePerEpoch ||\n                collateralPerWorker > configStorage.computeProviderByOwner[computeProviderAddress].maxCollateral ||\n                !_doComputeProviderHasEffectors(computeProviderAddress, effectors)\n            ) {\n                currentId = configStorage.computeProvidersList.next(currentId);\n                continue;\n            }\n\n            ComputeProvidersList.ComputePeersList memory foundComputePeers = foundComputeProviders.add(computeProviderAddress);\n\n            LinkedListWithUniqueKeys.Bytes32List storage computePeersList = configStorage.computePeersListByProvider[\n                computeProviderAddress\n            ];\n            bytes32 peerId = computePeersList.first();\n\n            while (peerId != bytes32(0x00) && freeWorkerSlots > 0) {\n                foundComputePeers.add(peerId);\n                freeWorkerSlots--;\n\n                peerId = computePeersList.next(peerId);\n            }\n\n            // get next compute provider\n            currentId = configStorage.computeProvidersList.next(currentId);\n        }\n\n        ComputeProvidersList.CPsAndPeersBytes32Array memory result = foundComputeProviders.toBytes32Array();\n\n        //TODO: fix double copy for ABI encoder with asm\n        return (result.computeProviders, result.computePeers);\n    }\n\n    // ----------------- Mutable -----------------\n    //TODO: refactoring\n    function matchDeal(IDeal deal, address[] calldata providers, bytes32[][] calldata peers) external {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        uint currentEpoch = _globalCore.currentEpoch();\n        require(currentEpoch > configStorage.minMatchingEpochByDeal[deal], \"Deal is not ready for matching\");\n        require(_globalCore.factory().hasDeal(deal), \"Deal is not from factory\");\n\n        IERC20 fluenceToken = _globalCore.fluenceToken();\n\n        // load deal config\n        CIDV1[] memory effectors = deal.effectors();\n        uint dealRequiredCollateral = deal.collateralPerWorker();\n        uint dealPricePerEpoch = deal.pricePerWorkerEpoch();\n        uint freeWorkerSlotsInDeal = deal.targetWorkers() - deal.getComputeUnitCount();\n        IDeal.AccessType accessType = deal.accessType();\n\n        CIDV1 memory dealAppCID = deal.appCID(); //TODO: temp solution for peers. Remove from event in future.\n        uint dealCreationBlock = deal.creationBlock(); //TODO: temp solution for peers. Remove from event in future.\n\n        bool isMatched = false;\n        uint providersLength = providers.length;\n        for (uint i = 0; i < providersLength; i++) {\n            address computeProviderAddress = providers[i];\n\n            if (accessType == IConfig.AccessType.WHITELIST) {\n                require(deal.isInAccessList(computeProviderAddress), \"Compute provider is not in whitelist\");\n            } else if (accessType == IConfig.AccessType.BLACKLIST) {\n                require(!deal.isInAccessList(computeProviderAddress), \"Compute provider is in blacklist\");\n            }\n\n            uint maxCollateral = configStorage.computeProviderByOwner[computeProviderAddress].maxCollateral;\n            uint minPricePerEpoch = configStorage.computeProviderByOwner[computeProviderAddress].minPricePerEpoch;\n\n            if (\n                minPricePerEpoch > dealPricePerEpoch ||\n                maxCollateral < dealRequiredCollateral ||\n                !_doComputeProviderHasEffectors(computeProviderAddress, effectors)\n            ) {\n                continue;\n            }\n\n            uint peersLength = peers[i].length;\n            for (uint j = 0; j < peersLength; j++) {\n                bytes32 peerId = peers[i][j];\n\n                // create ComputeUnits\n                fluenceToken.approve(address(deal), dealRequiredCollateral);\n                bytes32 computeUnitId = deal.createComputeUnit(computeProviderAddress, peerId);\n\n                // refound collateral\n                uint refoundByWorker = maxCollateral - dealRequiredCollateral;\n                if (refoundByWorker > 0) {\n                    fluenceToken.transfer(computeProviderAddress, refoundByWorker);\n                }\n\n                freeWorkerSlotsInDeal--;\n\n                uint freeWorkerSlots = configStorage.computePeerByPeerId[peerId].freeWorkerSlots;\n                freeWorkerSlots--;\n\n                // update free worker slots\n                if (freeWorkerSlots == 0) {\n                    delete configStorage.computePeerByPeerId[peerId];\n                    configStorage.computePeersListByProvider[computeProviderAddress].remove(peerId);\n                } else {\n                    configStorage.computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\n                }\n\n                emit ComputePeerMatched(peerId, deal, computeUnitId, dealCreationBlock, dealAppCID);\n                isMatched = true;\n\n                if (freeWorkerSlotsInDeal == 0) {\n                    return;\n                }\n            }\n        }\n\n        if (isMatched) {\n            configStorage.minMatchingEpochByDeal[deal] = currentEpoch + _MIN_REMATCHING_EPOCHS;\n        }\n    }\n}\n"
    },
    "contracts/global/matcher/MatcherConfig.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IMatcherConfig.sol\";\nimport \"../interfaces/IGlobalCore.sol\";\nimport \"../../utils/LinkedListWithUniqueKeys.sol\";\nimport \"../../utils/ComputeProvidersList.sol\";\nimport \"../../deal/base/Types.sol\";\n\ncontract MatcherConfig is IMatcherConfig {\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\n    using SafeERC20 for IERC20;\n\n    // ----------------- Immutable -----------------\n    IGlobalCore public immutable _globalCore;\n\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.matcher.storage.v1.config\")) - 1);\n\n    struct ConfigStorage {\n        // Compute providers\n        LinkedListWithUniqueKeys.Bytes32List computeProvidersList;\n        mapping(address => ComputeProvider) computeProviderByOwner;\n        // Compute peers\n        mapping(address => LinkedListWithUniqueKeys.Bytes32List) computePeersListByProvider;\n        mapping(bytes32 => ComputePeer) computePeerByPeerId;\n        mapping(address => mapping(bytes32 => bool)) effectorsByComputeProvider;\n        // Matching\n        mapping(IDeal => uint) minMatchingEpochByDeal;\n    }\n\n    ConfigStorage private _storage;\n\n    function _getConfigStorage() internal pure returns (ConfigStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ----------------- Constructor -----------------\n    constructor(IGlobalCore globalCore_) {\n        _globalCore = globalCore_;\n    }\n\n    // ----------------- Internal -----------------\n    function _getComputeProvider(address owner) internal view returns (ComputeProvider storage) {\n        ComputeProvider storage computeProvider = _getConfigStorage().computeProviderByOwner[owner];\n        require(address(computeProvider.paymentToken) != address(0x00), \"Compute provider doesn't exist\");\n\n        return computeProvider;\n    }\n\n    function _doComputeProviderHasEffectors(address computeProvider, CIDV1[] memory effectors) internal view returns (bool) {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        uint256 length = effectors.length;\n        for (uint i = 0; i < length; i++) {\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\n            if (!configStorage.effectorsByComputeProvider[computeProvider][dealEffector]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // ----------------- Public View -----------------\n    function getComputeProviderInfo(address provider) external view returns (ComputeProvider memory) {\n        return _getConfigStorage().computeProviderByOwner[provider];\n    }\n\n    function getPeersByComputeProvider(address provider) external view returns (bytes32[] memory peerIds, ComputePeer[] memory) {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        LinkedListWithUniqueKeys.Bytes32List storage peersList = configStorage.computePeersListByProvider[provider];\n        ComputePeer[] memory result = new ComputePeer[](peersList.length());\n        bytes32[] memory ids = new bytes32[](peersList.length());\n\n        uint i = 0;\n        bytes32 peerId = peersList.first();\n        while (peerId != bytes32(0x00)) {\n            result[i] = configStorage.computePeerByPeerId[peerId];\n            ids[i] = peerId;\n\n            i++;\n\n            peerId = peersList.next(peerId);\n        }\n\n        return (ids, result);\n    }\n\n    function getComputePeerInfo(bytes32 peerId) external view returns (ComputePeer memory) {\n        return _getConfigStorage().computePeerByPeerId[peerId];\n    }\n\n    // ----------------- Public Mutable -----------------\n    function registerComputeProvider(uint minPricePerEpoch, uint maxCollateral, IERC20 paymentToken, CIDV1[] calldata effectors) external {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        //TODO: add global whitelist\n\n        // validate input\n        require(minPricePerEpoch > 0, \"Min price per epoch should be greater than 0\");\n        require(maxCollateral > 0, \"Max collateral should be greater than 0\");\n        require(address(paymentToken) != address(0x00), \"Compute provider already\");\n\n        address owner = msg.sender;\n        require(address(configStorage.computeProviderByOwner[owner].paymentToken) == address(0x00), \"Compute provider already\");\n\n        // register compute provider\n        configStorage.computeProviderByOwner[owner] = ComputeProvider({\n            minPricePerEpoch: minPricePerEpoch,\n            maxCollateral: maxCollateral,\n            paymentToken: paymentToken,\n            totalFreeWorkerSlots: 0\n        });\n        configStorage.computeProvidersList.push(bytes32(bytes20(owner)));\n\n        // register effectors\n        for (uint i = 0; i < effectors.length; i++) {\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\n            configStorage.effectorsByComputeProvider[owner][dealEffector] = true;\n        }\n\n        emit ComputeProviderRegistered(owner, minPricePerEpoch, maxCollateral, paymentToken, effectors);\n    }\n\n    function addWorkersSlots(bytes32 peerId, uint workerSlots) external {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        address owner = msg.sender;\n\n        require(workerSlots > 0, \"Worker slots should be greater than 0\");\n\n        // calculate new free worker slots\n        uint256 freeWorkerSlots = configStorage.computePeerByPeerId[peerId].freeWorkerSlots;\n\n        // add peer to compute provider list if it's not there\n        if (freeWorkerSlots == 0) {\n            configStorage.computePeersListByProvider[owner].push(peerId);\n        }\n\n        freeWorkerSlots += workerSlots;\n\n        configStorage.computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\n        configStorage.computeProviderByOwner[owner].totalFreeWorkerSlots += workerSlots;\n\n        // put collateral\n        uint amount = configStorage.computeProviderByOwner[owner].maxCollateral * workerSlots;\n        configStorage.computeProviderByOwner[owner].paymentToken.safeTransferFrom(owner, address(this), amount);\n\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\n    }\n\n    function subWorkersSlots(bytes32 peerId, uint workerSlots) external {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        address owner = msg.sender;\n\n        // validate input\n        uint256 freeWorkerSlots = configStorage.computePeerByPeerId[peerId].freeWorkerSlots - workerSlots;\n        configStorage.computePeerByPeerId[peerId].freeWorkerSlots = freeWorkerSlots;\n        configStorage.computeProviderByOwner[owner].totalFreeWorkerSlots -= workerSlots;\n\n        // remove peer from compute provider list if it has no free worker slots\n        if (freeWorkerSlots == 0) {\n            configStorage.computePeersListByProvider[owner].remove(peerId);\n        }\n\n        // retrun collateral\n        uint amount = configStorage.computeProviderByOwner[owner].maxCollateral * workerSlots;\n        configStorage.computeProviderByOwner[owner].paymentToken.safeTransfer(owner, amount);\n\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\n    }\n\n    function changeMinPricePerEpoch(uint newMinPricePerEpoch) external {\n        require(newMinPricePerEpoch > 0, \"Min price per epoch should be greater than 0\");\n\n        ComputeProvider storage computeProvider = _getComputeProvider(msg.sender);\n\n        computeProvider.minPricePerEpoch = newMinPricePerEpoch;\n\n        emit MinPricePerEpochChanged(msg.sender, newMinPricePerEpoch);\n    }\n\n    function changeMaxCollateral(uint newMaxCollateral) external {\n        require(newMaxCollateral > 0, \"Max collateral should be greater than 0\");\n\n        address owner = msg.sender;\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\n\n        uint oldMaxCollateral = computeProvider.maxCollateral;\n\n        require(oldMaxCollateral != newMaxCollateral, \"Max collateral is the same\");\n        computeProvider.maxCollateral = newMaxCollateral;\n\n        // if compute provider has no free worker slots. Do nothing.\n        if (computeProvider.totalFreeWorkerSlots == 0) {\n            return;\n        }\n\n        // calculate new collateral\n        if (oldMaxCollateral > newMaxCollateral) {\n            uint amount = (oldMaxCollateral - newMaxCollateral) * computeProvider.totalFreeWorkerSlots;\n\n            computeProvider.paymentToken.safeTransfer(owner, amount);\n        } else {\n            uint amount = (newMaxCollateral - oldMaxCollateral) * computeProvider.totalFreeWorkerSlots;\n\n            computeProvider.paymentToken.safeTransferFrom(owner, address(this), amount);\n        }\n\n        emit MaxCollateralChanged(owner, newMaxCollateral);\n    }\n\n    function changePaymentToken(IERC20 newPaymentToken, uint newMaxCollateral) external {\n        require(address(newPaymentToken) != address(0x00), \"Payment token should be not zero address\");\n\n        address owner = msg.sender;\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\n\n        IERC20 oldPaymentToken = computeProvider.paymentToken;\n        computeProvider.paymentToken = newPaymentToken;\n\n        uint oldAmount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\n        oldPaymentToken.safeTransfer(owner, oldAmount);\n\n        uint newAmount = newMaxCollateral * computeProvider.totalFreeWorkerSlots;\n        newPaymentToken.safeTransferFrom(owner, address(this), newAmount);\n\n        emit PaymentTokenChanged(owner, newPaymentToken);\n    }\n\n    function addEffector(CIDV1 calldata effector) external {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        address owner = msg.sender;\n\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\n\n        require(configStorage.effectorsByComputeProvider[owner][effectorCIDHash] == false, \"Effector already exists\");\n        configStorage.effectorsByComputeProvider[owner][effectorCIDHash] = true;\n\n        emit EffectorAdded(owner, effector);\n    }\n\n    function removeEffector(CIDV1 calldata effector) external {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        address owner = msg.sender;\n\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\n\n        require(configStorage.effectorsByComputeProvider[owner][effectorCIDHash] == true, \"Effector doesn't exist\");\n        configStorage.effectorsByComputeProvider[owner][effectorCIDHash] = false;\n\n        emit EffectorRemoved(owner, effector);\n    }\n\n    function removeComputeProvider() external {\n        ConfigStorage storage configStorage = _getConfigStorage();\n\n        address owner = msg.sender;\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\n\n        require(address(computeProvider.paymentToken) != address(0x00), \"Compute provider doesn't exist\");\n\n        IERC20 paymentToken = computeProvider.paymentToken;\n        uint amount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\n\n        delete computeProvider.minPricePerEpoch;\n        delete computeProvider.maxCollateral;\n        delete computeProvider.paymentToken;\n        delete computeProvider.totalFreeWorkerSlots;\n\n        paymentToken.safeTransfer(owner, amount);\n\n        configStorage.computeProvidersList.remove(bytes32(bytes20(owner)));\n\n        emit ComputeProviderRemoved(owner);\n    }\n}\n"
    },
    "contracts/utils/ComputeProvidersList.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nlibrary ComputeProvidersList {\n    // ------------------ TYPES ------------------\n    struct List {\n        bytes32 firstPtr;\n        bytes32 lastPtr;\n        uint256 length;\n    }\n\n    struct ComputePeersList {\n        bytes32 firstPtr;\n        bytes32 lastPtr;\n        uint256 length;\n    }\n\n    struct ComputeProvider {\n        address value;\n        bytes32 nextPtr;\n        bytes32 computePeersListPtr;\n    }\n\n    struct ComputePeer {\n        bytes32 value;\n        bytes32 nextPtr;\n    }\n\n    struct CPsAndPeersBytes32Array {\n        address[] computeProviders;\n        bytes32[][] computePeers;\n    }\n\n    // ------------------ PRIVATE ------------------\n    function _push(bytes32 listPointer, bytes32 elementPtr) private pure {\n        assembly (\"memory-safe\") {\n            let firstPtrPtr := listPointer\n            let propLastPtrPtr := add(firstPtrPtr, 32) // list.firstPtr\n            let propLengthPtr := add(propLastPtrPtr, 32) // ptr -> list.length\n\n            let firstPtr := mload(listPointer) // list.firstPtr\n            let lastPtr := mload(propLastPtrPtr) // list.lastPtr\n            let length := mload(propLengthPtr) // list.length\n\n            mstore(propLastPtrPtr, elementPtr) // list.lastPtr = elementPtr\n            mstore(propLengthPtr, add(length, 1)) // list.length++\n\n            switch eq(firstPtr, 0)\n            case true {\n                mstore(firstPtrPtr, elementPtr) // list.firstPtr = elementPtr\n            }\n            case false {\n                let propNextPtrPtr := add(lastPtr, 32) // ptr -> element.nextPtr\n                mstore(propNextPtrPtr, elementPtr) // element.nextPtr = elementPtr\n            }\n        }\n    }\n\n    // ------------------ VIEWS ------------------\n    function toBytes32Array(List memory self) internal pure returns (CPsAndPeersBytes32Array memory cpAndPeersBytes32Array) {\n        uint256 length = self.length;\n\n        cpAndPeersBytes32Array.computeProviders = new address[](length);\n        cpAndPeersBytes32Array.computePeers = new bytes32[][](length);\n\n        bytes32 ptr = self.firstPtr;\n        for (uint256 i = 0; i < length; i++) {\n            address value;\n            bytes32 computePeersListPtr;\n            assembly (\"memory-safe\") {\n                value := mload(ptr) // value\n                computePeersListPtr := mload(add(ptr, 64)) // computePeersListPtr\n                ptr := mload(add(ptr, 32)) // nextPtr\n            }\n\n            cpAndPeersBytes32Array.computeProviders[i] = value;\n\n            bytes32 peersPtr;\n            uint256 peersLength;\n            assembly (\"memory-safe\") {\n                peersPtr := mload(computePeersListPtr) // firstPtr\n                peersLength := mload(add(computePeersListPtr, 64)) // length\n            }\n\n            cpAndPeersBytes32Array.computePeers[i] = new bytes32[](peersLength);\n            for (uint256 j = 0; j < peersLength; j++) {\n                bytes32 peerId;\n                assembly (\"memory-safe\") {\n                    peerId := mload(peersPtr) // value\n                    peersPtr := mload(add(peersPtr, 32)) // nextPtr\n                }\n                cpAndPeersBytes32Array.computePeers[i][j] = peerId;\n            }\n        }\n    }\n\n    // -------------- MEMORY MUTABLES ----------------\n    function add(List memory self, address value) internal pure returns (ComputePeersList memory computePeersList) {\n        ComputeProvider memory cp;\n\n        bytes32 cpPtr;\n        bytes32 cpListPtr;\n        bytes32 computePeersListPtr;\n\n        assembly (\"memory-safe\") {\n            cpPtr := cp\n            cpListPtr := self\n            computePeersListPtr := computePeersList\n        }\n\n        cp.value = value;\n        cp.computePeersListPtr = computePeersListPtr;\n\n        _push(cpListPtr, cpPtr);\n    }\n\n    function add(ComputePeersList memory self, bytes32 value) internal pure {\n        ComputePeer memory peer = ComputePeer({ value: value, nextPtr: bytes32(0) });\n\n        bytes32 peerPtr;\n        bytes32 listPt;\n\n        assembly (\"memory-safe\") {\n            peerPtr := peer\n            listPt := self\n        }\n\n        _push(listPt, peerPtr);\n    }\n}\n"
    },
    "contracts/utils/LinkedListWithUniqueKeys.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nlibrary LinkedListWithUniqueKeys {\n    // ------------------ TYPES ------------------\n    struct Element {\n        bytes32 prev;\n        bytes32 next;\n    }\n\n    struct Bytes32List {\n        bytes32 _first;\n        bytes32 _last;\n        uint256 _length;\n        mapping(bytes32 => Element) _elements;\n    }\n\n    // ------------------ PRIVATE ------------------\n    function _has(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\n    }\n\n    // ------------------ VIEWS ------------------\n\n    function first(Bytes32List storage self) internal view returns (bytes32) {\n        return self._first;\n    }\n\n    function last(Bytes32List storage self) internal view returns (bytes32) {\n        return self._last;\n    }\n\n    function length(Bytes32List storage self) internal view returns (uint256) {\n        return self._length;\n    }\n\n    function has(Bytes32List storage self, bytes32 key) internal view returns (bool) {\n        return _has(self, self._elements[key], key);\n    }\n\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\n        return self._elements[key].next;\n    }\n\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\n        return self._elements[key].prev;\n    }\n\n    function toArray(Bytes32List storage self) internal view returns (bytes32[] memory) {\n        uint256 arrayLength = self._length;\n        bytes32[] memory array = new bytes32[](arrayLength);\n\n        bytes32 current = self._first;\n        for (uint256 i = 0; i < arrayLength; i++) {\n            array[i] = current;\n            current = self._elements[current].next;\n        }\n\n        return array;\n    }\n\n    // ------------------ MUTABLES ------------------\n    function push(Bytes32List storage self, bytes32 key) internal {\n        require(key != bytes32(0x00), \"Key cannot be ZERO\");\n        require(!has(self, key), \"Key already exists\");\n\n        bytes32 oldLast = self._last;\n\n        self._length++;\n\n        if (oldLast == 0) {\n            self._first = key;\n            self._last = key;\n            return;\n        }\n\n        self._last = key;\n        self._elements[key].prev = oldLast;\n        self._elements[oldLast].next = key;\n    }\n\n    function remove(Bytes32List storage self, bytes32 key) internal {\n        Element memory element = self._elements[key];\n\n        require(_has(self, element, key), \"Key does not exist\");\n\n        if (element.prev == bytes32(0x00)) {\n            self._first = element.next;\n        }\n\n        if (element.next == bytes32(0x00)) {\n            self._last = element.prev;\n        }\n\n        if (element.prev != bytes32(0x00)) {\n            self._elements[element.prev].next = element.next;\n        }\n\n        if (element.next != bytes32(0x00)) {\n            self._elements[element.next].prev = element.prev;\n        }\n\n        delete self._elements[key];\n\n        self._length--;\n    }\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract Ownable is Initializable {\n    // ------------------ Storage ------------------\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\"fluence.uitls.storage.v1.ownable\")) - 1);\n\n    struct OwnableStorage {\n        address owner;\n    }\n\n    OwnableStorage private _storage;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage s) {\n        bytes32 storageSlot = _STORAGE_SLOT;\n        assembly {\n            s.slot := storageSlot\n        }\n    }\n\n    // ------------------ Other ------------------\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _getOwnableStorage().owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != msg.sender) {\n            revert OwnableUnauthorizedAccount(msg.sender);\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage ownableStorage = _getOwnableStorage();\n\n        address oldOwner = ownableStorage.owner;\n        ownableStorage.owner = newOwner;\n\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}