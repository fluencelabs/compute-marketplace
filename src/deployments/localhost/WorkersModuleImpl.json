{
  "address": "0x908aEBfb6051Bca6d1e684586d7760e53C4c736C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PATCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "PATRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "WorkerRegistred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        }
      ],
      "name": "WorkerUnregistred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        }
      ],
      "name": "createPAT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPAT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct PAT",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPATs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct PAT[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getUnlockedAmountBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "patCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "setWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x879da00b2f2fe2d9826b0ede8c0018d8d60461d85b1dc19a9650f6a1da9566dd",
  "receipt": {
    "to": null,
    "from": "0x627e730fd1361E6FFcee236DAc08F82EAa8ac7cD",
    "contractAddress": "0x908aEBfb6051Bca6d1e684586d7760e53C4c736C",
    "transactionIndex": 0,
    "gasUsed": "2410168",
    "logsBloom": "0x
    "blockHash": "0xb85d7d0dac6e909442227fbae18a2ef065e2541359e8533374fa37d96632b65b",
    "transactionHash": "0x879da00b2f2fe2d9826b0ede8c0018d8d60461d85b1dc19a9650f6a1da9566dd",
    "logs": [],
    "blockNumber": 65,
    "cumulativeGasUsed": "2410168",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "09b009adaa7c41f548683d650f79aaa9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PATCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PATRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"WorkerRegistred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"}],\"name\":\"WorkerUnregistred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"}],\"name\":\"createPAT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPAT\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct PAT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPATs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct PAT[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getUnlockedAmountBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"patCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deal/WorkersModule.sol\":\"WorkersModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/WorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"./base/ModuleBase.sol\\\";\\nimport \\\"../global/interfaces/IGlobalConfig.sol\\\";\\nimport \\\"../utils/LinkedList.sol\\\";\\nimport \\\"../utils/WithdrawRequests.sol\\\";\\nimport \\\"./interfaces/IWorkersModule.sol\\\";\\nimport \\\"./interfaces/IConfigModule.sol\\\";\\nimport \\\"./interfaces/ICore.sol\\\";\\nimport \\\"./interfaces/IStatusModule.sol\\\";\\nimport \\\"./base/Types.sol\\\";\\n\\ncontract WorkersModuleState {\\n    using LinkedList for LinkedList.Bytes32List;\\n\\n    struct OwnerInfo {\\n        uint256 patCount;\\n        LinkedList.Bytes32List patsIds;\\n    }\\n\\n    // ---- Events ----\\n    event PATCreated(bytes32 id, address owner);\\n    event PATRemoved(bytes32 id);\\n\\n    event WorkerRegistred(bytes32 patId, bytes32 workerId);\\n    event WorkerUnregistred(bytes32 patId);\\n\\n    event CollateralWithdrawn(address owner, uint256 amount);\\n\\n    // ---- Constants ----\\n\\n    bytes32 internal constant _PAT_PREFIX = keccak256(\\\"fluence.pat\\\");\\n\\n    // ---- Storage ----\\n    uint256 internal _patCount;\\n\\n    mapping(address => OwnerInfo) internal _ownersInfo;\\n    mapping(bytes32 => PAT) internal _patByPATId;\\n\\n    LinkedList.Bytes32List _patsIdsList;\\n\\n    mapping(address => WithdrawRequests.Requests) internal _requests;\\n}\\n\\ncontract WorkersModuleInternal is WorkersModuleState, ModuleBase {\\n    using LinkedList for LinkedList.Bytes32List;\\n    using WithdrawRequests for WithdrawRequests.Requests;\\n    using SafeERC20 for IERC20;\\n\\n    function _createWithdrawRequest(address owner, uint256 amount) internal {\\n        _requests[owner].push(amount);\\n    }\\n\\n    function _createPAT(bytes32 peerId, address owner, address collateralPayer) internal {\\n        uint256 patCountByOwner = _ownersInfo[owner].patCount;\\n        uint256 patCount = _patCount;\\n\\n        ICore core = _core();\\n        IConfigModule config = core.configModule();\\n\\n        require(patCount < config.targetWorkers(), \\\"Target workers reached\\\");\\n        require(patCountByOwner < config.maxWorkersPerProvider(), \\\"Max workers per provider reached\\\");\\n\\n        uint256 requiredCollateral = config.requiredCollateral();\\n        config.fluenceToken().safeTransferFrom(collateralPayer, address(this), requiredCollateral);\\n\\n        patCount++;\\n\\n        IStatusModule statusController = core.statusModule();\\n\\n        {\\n            DealStatus status = statusController.status();\\n            if (status == DealStatus.WaitingForWorkers && patCount >= config.minWorkers()) {\\n                status = DealStatus.Working;\\n                statusController.changeStatus(status);\\n            }\\n        }\\n\\n        bytes32 id = keccak256(abi.encodePacked(_PAT_PREFIX, owner, peerId, patCountByOwner));\\n\\n        require(_patByPATId[id].owner == address(0x00), \\\"Id already used\\\");\\n\\n        _patByPATId[id] = PAT({\\n            id: id,\\n            peerId: peerId,\\n            workerId: bytes32(0),\\n            owner: owner,\\n            collateral: requiredCollateral,\\n            created: config.globalConfig().epochManager().currentEpoch()\\n        });\\n\\n        _ownersInfo[owner].patCount = patCountByOwner + 1;\\n        _patCount = patCount;\\n\\n        _patsIdsList.push(id);\\n\\n        emit PATCreated(id, owner);\\n    }\\n}\\n\\ncontract WorkersModule is WorkersModuleInternal, IWorkersModule {\\n    using LinkedList for LinkedList.Bytes32List;\\n    using WithdrawRequests for WithdrawRequests.Requests;\\n    using SafeERC20 for IERC20;\\n\\n    function getPAT(bytes32 id) external view returns (PAT memory) {\\n        return _patByPATId[id];\\n    }\\n\\n    function patCount() external view returns (uint256) {\\n        return _patCount;\\n    }\\n\\n    // only for reading from frontend\\n    function getPATs() public view returns (PAT[] memory) {\\n        PAT[] memory pats = new PAT[](_patCount);\\n\\n        uint256 index = 0;\\n        bytes32 patId = _patsIdsList.first();\\n        while (patId != bytes32(0)) {\\n            pats[index] = _patByPATId[patId];\\n            index++;\\n\\n            patId = _patsIdsList.next(patId);\\n        }\\n\\n        return pats;\\n    }\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256) {\\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\\n        return _requests[owner].getAmountBy(timestamp - globalConfig.withdrawTimeout());\\n    }\\n\\n    // ---- Public mutables ----\\n\\n    function createPAT(address computeProvider, bytes32 peerId) external {\\n        require(address(_core().configModule().globalConfig().matcher()) == msg.sender, \\\"Only matcher can call this method\\\");\\n\\n        _createPAT(peerId, computeProvider, msg.sender);\\n    }\\n\\n    function setWorker(bytes32 patId, bytes32 workerId) external {\\n        PAT storage pat = _patByPATId[patId];\\n\\n        if (pat.workerId != bytes32(0)) {\\n            emit WorkerUnregistred(patId);\\n        }\\n\\n        pat.workerId = workerId;\\n\\n        emit WorkerRegistred(patId, workerId);\\n    }\\n\\n    function exit(bytes32 patId) external {\\n        PAT storage pat = _patByPATId[patId];\\n        address owner = pat.owner;\\n\\n        require(owner == msg.sender, \\\"PAT doesn't exist\\\");\\n\\n        ICore core = _core();\\n        IConfigModule config = core.configModule();\\n\\n        IStatusModule statusController = core.statusModule();\\n\\n        _createWithdrawRequest(owner, pat.collateral);\\n\\n        uint256 newPatCount = _patCount - 1;\\n\\n        if (statusController.status() == DealStatus.Working && newPatCount < config.minWorkers()) {\\n            statusController.changeStatus(DealStatus.WaitingForWorkers);\\n        }\\n\\n        _ownersInfo[owner].patCount--;\\n        _patCount = newPatCount;\\n\\n        delete _patByPATId[patId];\\n\\n        _patsIdsList.remove(patId);\\n\\n        emit PATRemoved(patId);\\n    }\\n\\n    function withdrawCollateral(address owner) external {\\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\\n\\n        uint256 amount = _requests[owner].confirmBy(block.timestamp - globalConfig.withdrawTimeout());\\n\\n        globalConfig.fluenceToken().safeTransfer(owner, amount);\\n\\n        emit CollateralWithdrawn(owner, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xbd7e11ab291a6592f1a58ed4dadd9da7c9d893cf81de3d03cc971107558057f4\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\n\\ncontract ModuleBase is UUPSUpgradeable {\\n    bytes32 private constant _CORE_SLOT = keccak256(\\\"network.fluence.proxy.core\\\");\\n\\n    modifier onlyModule(Module module) {\\n        require(_core().moduleByType(module) == msg.sender, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyModules(Module[] calldata modules) {\\n        Module callerModule = _core().moduleByAddress(msg.sender);\\n\\n        bool isRequiredModule = false;\\n        for (uint256 i = 0; i < modules.length; i++) {\\n            if (modules[i] != callerModule) {\\n                continue;\\n            }\\n\\n            isRequiredModule = true;\\n            break;\\n        }\\n\\n        require(isRequiredModule, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_core().owner() == msg.sender, \\\"ModuleBase: caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCore() {\\n        require(address(_core()) == msg.sender, \\\"ModuleBase: caller is not core\\\");\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyCore {\\n        //TODO: check that new implementation from DAO\\n    }\\n\\n    function _core() internal view returns (ICore) {\\n        return ICore(StorageSlot.getAddressSlot(_CORE_SLOT).value);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x001458f0530bf630f1c300058ea8d14bbffdd850516b98e4a98a0246ac415e82\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nstruct Particle {\\n    string air;\\n    string prevData;\\n    string params;\\n    string callResults;\\n}\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\",\"keccak256\":\"0xf93b0de9200f057680d3aae95194cc340ab2b4449c2802e0d765a1f31e81c8b7\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfigModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\nimport \\\"../../global/interfaces/IParticleVerifyer.sol\\\";\\nimport \\\"../../global/interfaces/IGlobalConfig.sol\\\";\\n\\ninterface IConfigModule {\\n    function initialize(\\n        IERC20 paymentToken_,\\n        uint256 pricePerEpoch_,\\n        uint256 requiredCollateral_,\\n        CIDV1 calldata appCID_,\\n        uint256 minWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 targetWorkers_,\\n        CIDV1[] calldata effectorWasmsCids_\\n    ) external;\\n\\n    function globalConfig() external view returns (IGlobalConfig);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function particleVerifyer() external view returns (IParticleVerifyer);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function pricePerEpoch() external view returns (uint256);\\n\\n    function requiredCollateral() external view returns (uint256);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n}\\n\",\"keccak256\":\"0x7732f67045048e33830c0d726f727f9b6ff3d6404f072570a6c6eddee4059418\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IConfigModule.sol\\\";\\nimport \\\"./IPaymentModule.sol\\\";\\nimport \\\"./IStatusModule.sol\\\";\\nimport \\\"./IWorkersModule.sol\\\";\\n\\nenum Module {\\n    None,\\n    Config,\\n    Payment,\\n    Status,\\n    Workers\\n}\\n\\ninterface ICore {\\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\\n\\n    function moduleByType(Module module) external view returns (address);\\n\\n    function moduleByAddress(address module) external view returns (Module);\\n\\n    function configModule() external view returns (IConfigModule);\\n\\n    function paymentModule() external view returns (IPaymentModule);\\n\\n    function statusModule() external view returns (IStatusModule);\\n\\n    function workersModule() external view returns (IWorkersModule);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xac6992f807db36edcacd78f986cf376fb0db20596ccee5d532dca443ecb75e79\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IPaymentModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IPaymentModule {\\n    function balance() external view returns (uint256);\\n\\n    function rewardAmount(bytes32 particleHash, bytes32 patId) external view returns (uint);\\n\\n    function depositToPaymentBalance(uint256 amount) external;\\n\\n    function withdrawFromPaymentBalance(uint256 amount) external;\\n\\n    function commitParticle(Particle calldata particle) external;\\n\\n    function withdrawReward(bytes32 patId, bytes32[] calldata particlesHashes) external;\\n}\\n\",\"keccak256\":\"0x69e87cb96fdeb4dcb0b6c62d75b65076c085638d49a08b8aa65fded932e98de0\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IStatusModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nenum DealStatus {\\n    WaitingForWorkers,\\n    Working\\n}\\n\\ninterface IStatusModule {\\n    event StatusChanged(DealStatus newStatus);\\n\\n    function status() external view returns (DealStatus);\\n\\n    function startWorkingEpoch() external view returns (uint256);\\n\\n    function changeStatus(DealStatus status_) external;\\n}\\n\",\"keccak256\":\"0x3c670bd4876900f94f1de097ddc97fccb898d3a37e47ed55f5e36ed4c26a728e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../base/Types.sol\\\";\\n\\nstruct PAT {\\n    bytes32 id;\\n    bytes32 peerId;\\n    bytes32 workerId;\\n    address owner;\\n    uint256 collateral;\\n    uint256 created;\\n}\\n\\ninterface IWorkersModule {\\n    function getPATs() external view returns (PAT[] memory);\\n\\n    function patCount() external view returns (uint256);\\n\\n    function getPAT(bytes32 id) external view returns (PAT memory);\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\\n\\n    function createPAT(address owner, bytes32 peerId) external;\\n\\n    function exit(bytes32 id) external;\\n\\n    function withdrawCollateral(address owner) external;\\n\\n    function setWorker(bytes32 id, bytes32 workerId) external;\\n}\\n\",\"keccak256\":\"0x895d334bb205743038152b9d80dd7357055c98d388d622cecf5c2a9f2f50fe70\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IEpochManager {\\n    function epochDuration() external view returns (uint256);\\n\\n    function currentEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2dce187734fef8462cf222ec53569253aae570020578c7d470545b476ac3e87d\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IFactory {\\n    function isDeal(address addr) external view returns (bool);\\n\\n    function createDeal(\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        CIDV1 calldata appCID_,\\n        CIDV1[] calldata effectors\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8c2c4ac19b466b701a282339069aa2df46c98c70b74d587afbfbf53ed0905a14\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEpochManager.sol\\\";\\nimport \\\"./IMatcher.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IGlobalConfig {\\n    function owner() external view returns (address);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function withdrawTimeout() external view returns (uint);\\n\\n    function epochManager() external view returns (IEpochManager);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0xf5f3740cd208be3ee6019fefb519e46757d546b224f08dacf462250871aafa06\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/interfaces/ICore.sol\\\";\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IMatcher {\\n    function getFreeWorkersSolts(address computeProvider, bytes32 peerId) external view returns (uint);\\n\\n    function matchWithDeal(ICore deal) external;\\n}\\n\",\"keccak256\":\"0x7bea3746a31766e2b5ab68cb6f517edc68e10e1a43042ee58e6096b925b92655\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IParticleVerifyer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport { Particle } from \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IParticleVerifyer {\\n    function verifyParticle(Particle calldata particle) external returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xa59cf51c885735527bce2a5306ad84b553cd83f74e297de0b331289d9d3786e2\",\"license\":\"Apache-2.0\"},\"contracts/utils/LinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nlibrary LinkedList {\\n    struct Element {\\n        bytes32 prev;\\n        bytes32 next;\\n    }\\n\\n    struct Bytes32List {\\n        bytes32 _first;\\n        bytes32 _last;\\n        mapping(bytes32 => Element) _elements;\\n    }\\n\\n    function _init(Bytes32List storage self, bytes32 key) private {\\n        self._first = key;\\n        self._last = key;\\n    }\\n\\n    function push(Bytes32List storage self, bytes32 key) internal {\\n        bytes32 oldLast = self._last;\\n\\n        require(key != bytes32(0x00), \\\"Key cannot be ZERO\\\");\\n\\n        require(!exist(self, key), \\\"Key already exists\\\");\\n\\n        if (oldLast == 0) {\\n            _init(self, key);\\n            return;\\n        }\\n\\n        self._last = key;\\n        self._elements[key].prev = oldLast;\\n        self._elements[oldLast].next = key;\\n    }\\n\\n    function first(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._first;\\n    }\\n\\n    function last(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._last;\\n    }\\n\\n    function remove(Bytes32List storage self, bytes32 key) internal {\\n        Element memory element = self._elements[key];\\n\\n        require(_exist(self, element, key), \\\"Key does not exist\\\");\\n\\n        delete self._elements[key];\\n\\n        if (element.prev != bytes32(0x00)) {\\n            self._elements[element.prev].next = element.next;\\n        } else {\\n            self._first = element.next;\\n        }\\n\\n        if (element.next != bytes32(0x00)) {\\n            self._elements[element.next].prev = element.prev;\\n        } else {\\n            self._last = element.prev;\\n        }\\n    }\\n\\n    function exist(Bytes32List storage self, bytes32 key) internal view returns (bool) {\\n        return _exist(self, self._elements[key], key);\\n    }\\n\\n    function _exist(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\\n    }\\n\\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].next;\\n    }\\n\\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].prev;\\n    }\\n}\\n\",\"keccak256\":\"0xa1daa42378d580a0e5d1060181fbd984ba29e7b7d502b05a980ce09b8bfc5b8b\",\"license\":\"Apache-2.0\"},\"contracts/utils/WithdrawRequests.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nlibrary WithdrawRequests {\\n    struct Requests {\\n        Request[] _requests;\\n        uint256 _indexOffset;\\n    }\\n\\n    struct Request {\\n        uint32 _createTimestamp;\\n        uint224 _cumulative;\\n    }\\n\\n    function getAt(Requests storage self, uint256 index) internal view returns (uint256 timestamp, uint256 amount) {\\n        uint256 realLength = self._requests.length;\\n        uint256 realIndex = index + self._indexOffset;\\n\\n        if (realIndex >= realLength) {\\n            revert(\\\"Index is out of range\\\");\\n        }\\n\\n        Request storage request = self._requests[realIndex];\\n\\n        amount = request._cumulative;\\n        if (realIndex != 0) {\\n            Request storage previousRequest = self._requests[realIndex - 1];\\n            amount -= previousRequest._cumulative;\\n        }\\n\\n        return (request._createTimestamp, amount);\\n    }\\n\\n    function length(Requests storage self) internal view returns (uint256) {\\n        return self._requests.length - self._indexOffset;\\n    }\\n\\n    function getAmountBy(Requests storage self, uint256 timestamp) internal view returns (uint256) {\\n        (, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\\n        return amount;\\n    }\\n\\n    function push(Requests storage self, uint256 amount) internal {\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        require(amount > 0, \\\"Amount can't be zero\\\");\\n        require(amount <= type(uint224).max, \\\"Amount is too big\\\");\\n\\n        //TODO: check overflow\\n        uint224 uint224Amount = uint224(amount);\\n        uint256 realLength = self._requests.length;\\n        uint256 currentLength = realLength - self._indexOffset;\\n\\n        if (currentLength != 0) {\\n            Request storage last = self._requests[realLength - 1];\\n            if (last._createTimestamp == timestamp) {\\n                last._cumulative += uint224Amount;\\n                return;\\n            } else {\\n                self._requests.push(Request(timestamp, last._cumulative + uint224Amount));\\n            }\\n        } else {\\n            self._requests.push(Request(timestamp, uint224Amount));\\n        }\\n    }\\n\\n    function removeFromLast(Requests storage self, uint256 amount) internal {\\n        uint256 realLength = self._requests.length;\\n        uint256 currentLength = realLength - self._indexOffset;\\n\\n        require(currentLength != 0, \\\"Requests is empty\\\");\\n        require(amount <= type(uint224).max, \\\"Amount is too big\\\");\\n\\n        //TODO: check overflow\\n        uint224 uint224Amount = uint224(amount);\\n\\n        Request storage last = self._requests[currentLength - 1];\\n        uint256 currentAmount = last._cumulative;\\n\\n        require(currentAmount >= uint224Amount, \\\"Not enough amount\\\");\\n\\n        if (uint224Amount < currentAmount) {\\n            last._cumulative -= uint224Amount;\\n        } else {\\n            self._requests.pop();\\n        }\\n    }\\n\\n    function confirmBy(Requests storage self, uint256 timestamp) internal returns (uint256) {\\n        (uint256 index, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\\n        self._indexOffset = index + 1;\\n        return amount;\\n    }\\n\\n    function _getIndexAndAmountBy(Requests storage self, uint256 timestamp) private view returns (uint256, uint256) {\\n        uint256 realLength = self._requests.length;\\n        uint256 indexOffset = self._indexOffset;\\n\\n        uint256 currentLength = realLength - indexOffset;\\n\\n        require(currentLength != 0, \\\"Requests is empty\\\");\\n\\n        (uint256 index, Request storage request) = _getIndexBy(self, indexOffset, realLength - 1, timestamp);\\n        uint256 amount = request._cumulative;\\n        if (indexOffset != 0) {\\n            amount -= self._requests[indexOffset - 1]._cumulative;\\n        }\\n\\n        return (index, amount);\\n    }\\n\\n    function _getIndexBy(\\n        Requests storage self,\\n        uint256 startLow,\\n        uint256 startHigh,\\n        uint256 timestamp\\n    ) private view returns (uint256, Request storage request) {\\n        uint256 low = startLow;\\n        uint256 high = startHigh;\\n\\n        uint256 mid = (low + high) / 2;\\n        request = self._requests[mid];\\n\\n        while (low != high) {\\n            uint256 midTimestamp = request._createTimestamp;\\n            if (midTimestamp == timestamp) {\\n                return (mid, request);\\n            } else if (midTimestamp < timestamp) {\\n                low = mid + 1;\\n            } else {\\n                high = mid - 1;\\n            }\\n\\n            mid = (low + high) / 2;\\n            request = self._requests[mid];\\n        }\\n\\n        return (mid, request);\\n    }\\n}\\n\",\"keccak256\":\"0x8590be01c5c1c8a70eac20c611c0ed6dade5416b1c43070f2b7cef460dd540e7\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100315730608052612add90816100378239608051818181611283015281816113c401526117250152f35b600080fdfe608060408181526004918236101561001657600080fd5b600090813560e01c9081630ca3626314611a58575080633659cfe6146116ef5780634f1ef2861461133a57806352d1902d146112585780636ad0c854146112375780636b0ea62714611162578063928d300e14610e6f578063c44a916d146104b6578063cb35a195146102e4578063d5053ab0146102545763f3b6a45d1461009d57600080fd5b34610251578060031936011261025157918254907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06100f36100de8461234f565b936100eb86519586611fd0565b80855261234f565b01845b8181106102345750506003805485815b61019e575050505081519160208080850192818652845180945285019301945b8281106101335784840385f35b9091928260c08261018f6001948a5160a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b01960191019492919094610126565b818795975260029060208281526102218888209289516101bd81611f7c565b8454815260019586860154858301528501548b82015273ffffffffffffffffffffffffffffffffffffffff8886015416606082015288850154608082015260058095015460a0820152610210828d612367565b5261021b818c612367565b50612391565b9387525285852001549081969496610106565b60209061024296949661231d565b828289010152019492946100f6565b80fd5b509190346102e057806003193601126102e0577f8d9d99306df0b03f2391cff2ff94674c032cc09f3cf089db54a8b021125a054d913560243581855260026020528060028487200180546102b2575b5582519182526020820152a180f35b7fa2f1ead3b1f30f052d979d7f19d3d3668f00f45a0a23ae4588cc918c5b738f9760208651868152a16102a3565b8280fd5b50346102515781600319360112610251576102fd611f13565b9273ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541694845180967f68f1e99a00000000000000000000000000000000000000000000000000000000825281856020998a935afa90811561048f5783929188918791610499575b50858851809581937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa91821561048f5787929184918793610460575b5016855260068252858520938651809481937f9c15d1a2000000000000000000000000000000000000000000000000000000008352165afa928315610455579261041f575b5061041161041792602435612400565b906128fb565b915191825250f35b91508382813d831161044e575b6104368183611fd0565b8101031261044957905190610411610401565b600080fd5b503d61042c565b8451903d90823e3d90fd5b610481919350843d8611610488575b6104798183611fd0565b8101906123d4565b91386103bc565b503d61046f565b86513d87823e3d90fd5b6104b09150823d8411610488576104798183611fd0565b3861037b565b508290346102515782600319360112610251576104d1611f13565b9260249283359073ffffffffffffffffffffffffffffffffffffffff90817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416908451907f68f1e99a000000000000000000000000000000000000000000000000000000009384835260209485848481885afa938415610e65578994610e46575b50875186818581867fa7c1abe000000000000000000000000000000000000000000000000000000000998a8352165afa908115610e1f57839188918c91610e29575b50858b51809481937f7e7e66b2000000000000000000000000000000000000000000000000000000008352165afa908115610e1f578a91610de5575b508233911603610d7e57818b1696878a5260018752888a2054948a54928a51908152888187818b5afa908115610a4e579085918d91610d61575b5016908a517f2943dcab00000000000000000000000000000000000000000000000000000000815289818881865afa908115610b51578d91610d34575b50841015610cf3578a517f8a0c725b00000000000000000000000000000000000000000000000000000000815289818881865afa908115610b51578d91610cc6575b50871015610c86578a51937fb53105a300000000000000000000000000000000000000000000000000000000855289858881865afa948515610b51578d95610c57575b508b517fac027f970000000000000000000000000000000000000000000000000000000081528a818981875afa908115610bd0578f928f8f948e948c96610768956107639492610c38575b5051917f23b872dd000000000000000000000000000000000000000000000000000000008784015233908301523060448301528a60648301526064825261075e82611fb4565b612432565b612391565b998d51928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa908115610b51579086918e91610c1b575b50168b517f200d2ed20000000000000000000000000000000000000000000000000000000081528a818981855afa908115610bd0578e91610bee575b506002811015610bdc571580610b5f575b610af6575b508460038d9e9f9c809e9d8c7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008351918201927f8bab011e0edd6a03e41f22d7bebfacfbde93a6fbd86b71db78d8af308790c295845260601b16838201528760548201528b60748201526074815261086e81611fb4565b5190209d8e815260028d5220015416610ab4578890868d518094819382525afa908115610a4e57849189918e91610a97575b50868d51809481937fe2d2bfe3000000000000000000000000000000000000000000000000000000008352165afa908115610a4e5784929189918e91610a58575b50868d51809781937f76671808000000000000000000000000000000000000000000000000000000008352165afa938415610a4e578c94928b8a95938e8d948997610a0e575b5060059798600282519a61093a8c611f7c565b858c52808c01948552838c019583875260608d0198895260808d01998a5260a08d019a8b528352522097518855516001880155516002870155600386019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055518484015551910155600182018092116109fc5750869750837ff9afe7870c7ad4010cedbe87273d2282bcedb40f6734c102d53059c8da187bdf9752600183528588205586556109f083612542565b8351928352820152a180f35b8760118a92634e487b7160e01b835252fd5b96505096505093905082813d8311610a47575b610a2b8183611fd0565b8101031261044957886005938b8a968f958f9051969897610927565b503d610a21565b8b513d8e823e3d90fd5b9293505081813d8311610a90575b610a708183611fd0565b81010312610a8c57518381168103610a8c57908784928f6108e1565b8b80fd5b503d610a66565b610aae9150823d8411610488576104798183611fd0565b8f6108a0565b50606485600f8f8b8f519362461bcd60e51b85528401528201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b803b15610b5b578c80918f8e51809481937f95bc953800000000000000000000000000000000000000000000000000000000835260018d8401525af18015610b5157156107f757610b478d91611f36565b610a8c578e6107f7565b8c513d8f823e3d90fd5b8c80fd5b508b517f2db311930000000000000000000000000000000000000000000000000000000081528a818981875afa908115610bd0578e91610ba3575b508910156107f2565b90508a81813d8311610bc9575b610bba8183611fd0565b81010312610449575138610b9a565b503d610bb0565b8e8e51903d90823e3d90fd5b8e8e60218a634e487b7160e01b835252fd5b610c0e91508b3d8d11610c14575b610c068183611fd0565b81019061240d565b386107e1565b503d610bfc565b610c3291508b3d8d11610488576104798183611fd0565b386107a5565b610c50919250873d8911610488576104798183611fd0565b9038610718565b9094508981813d8311610c7f575b610c6f8183611fd0565b810103126104495751938f6106cd565b503d610c65565b6064868a8f818f519362461bcd60e51b85528401528201527f4d617820776f726b657273207065722070726f766964657220726561636865646044820152fd5b90508981813d8311610cec575b610cdd8183611fd0565b8101031261044957518f61068a565b503d610cd3565b60648660168f8c8f519362461bcd60e51b85528401528201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b90508981813d8311610d5a575b610d4b8183611fd0565b8101031261044957518f610648565b503d610d41565b610d7891508a3d8c11610488576104798183611fd0565b8f61060b565b60848360218c898c519362461bcd60e51b85528401528201527f4f6e6c79206d6174636865722063616e2063616c6c2074686973206d6574686f60448201527f64000000000000000000000000000000000000000000000000000000000000006064820152fd5b90508681813d8311610e18575b610dfc8183611fd0565b81010312610e1457518281168103610e14578c6105d1565b8980fd5b503d610df2565b89513d8c823e3d90fd5b610e409150823d8411610488576104798183611fd0565b8e610595565b610e5e919450863d8811610488576104798183611fd0565b928b610553565b88513d8b823e3d90fd5b5091346102e05760208060031936011261115e57610e8b611f13565b9073ffffffffffffffffffffffffffffffffffffffff928082857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168751928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa90811561113757859184918991611141575b50838851809881937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa948515611137578795611118575b50808416875260068352858720941685517f9c15d1a200000000000000000000000000000000000000000000000000000000815283818481855afa90811561110e5788916110df575b50610f98610f9e9142612400565b866128fb565b95600182018092116110cc5790600185939201558651928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa9081156110c25761109f927fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d96926110729289916110a5575b5083517fa9059cbb000000000000000000000000000000000000000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff861660248301526044808301889052825261075e606483611fd0565b51928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a180f35b6110bc9150823d8411610488576104798183611fd0565b38611016565b85513d88823e3d90fd5b602489601186634e487b7160e01b835252fd5b90508381813d8311611107575b6110f68183611fd0565b810103126104495751610f98610f8a565b503d6110ec565b87513d8a823e3d90fd5b611130919550833d8511610488576104798183611fd0565b9338610f41565b86513d89823e3d90fd5b6111589150823d8411610488576104798183611fd0565b38610f05565b8380fd5b509190346102e05760206003193601126102e0578060056112359260c09561118861231d565b508535815260026020522082519461119f86611f7c565b815486526001820154602087015260028201548487015273ffffffffffffffffffffffffffffffffffffffff60038301541660608701528101546080860152015460a084015251809260a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565bf35b509034611254578160031936011261125457602091549051908152f35b5080fd5b508290346102515780600319360112610251575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036112d257602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b5082826003193601126112545761134f611f13565b9060249384359067ffffffffffffffff82116116eb57366023830112156116eb57818301359161137e83612011565b61138a83519182611fd0565b83815260209384820192368a83830101116116e7578189928b88930186378301015273ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016906113f18230141561204b565b6114207f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9282845416146120bc565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036116a6577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611489575050505050505061148691925061212d565b80f35b87939496989597169086517f52d1902d00000000000000000000000000000000000000000000000000000000815288818b81865afa60009181611677575b506115335760848a602e8d8c8c519362461bcd60e51b85528401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9991939694989295990361161057505061154c8461212d565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611608575b611589575b505050505080f35b6115fd946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986115e08a611f98565b60278a528901528701525190845af46115f76121ff565b9161222f565b508180808080611581565b50600161157c565b9060296084928886519362461bcd60e51b85528401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918a82813d831161169f575b61168e8183611fd0565b81010312610251575051908c6114c7565b503d611684565b606487601e8c8989519362461bcd60e51b85528401528201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b8880fd5b8480fd5b509190346102e05760208060031936011261115e5761170c611f13565b9173ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000166117518130141561204b565b6117807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9183835416146120bc565b817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303611a16578251908482019282841067ffffffffffffffff851117611a01578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561180457505050505050611486915061212d565b8693949596169085517f52d1902d00000000000000000000000000000000000000000000000000000000815287818a81865afa600091816119d2575b506118ad576084898989519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b97919294979593950361196a57506118c48461212d565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611962575b61190057505050505080f35b611957946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986115e08a611f98565b503880808080611581565b5060006118f4565b6084908684519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d83116119fa575b6119e98183611fd0565b810103126102515750519038611840565b503d6119df565b604188634e487b7160e01b6000525260246000fd5b6064868585519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b828486346102e0576020918260031936011261115e578135918285526002845281852073ffffffffffffffffffffffffffffffffffffffff968760038301541690338203611ed35750877fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416918451927f68f1e99a00000000000000000000000000000000000000000000000000000000845287848681845afa938415611db5578593929189918b96611eb4575b508751948580927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa928315611db5579085918a94611e8f575b5090611b5b910154828a5260068952868a2061274b565b8754927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92838501948511611e7c578a169086519a7f200d2ed2000000000000000000000000000000000000000000000000000000008c52898c8881865afa9b8c15611e72578b9c611e53575b5060028c1015611e4057896001809d149283611dbf575b505050611d5b575b5087528786528387209081548015611d48570190558555828552600284526000600583872082815582898201558260028201558760038201558284820155015560058452818520825190611c3a82611f60565b878154918284520154868301918183521590811591611d3e575b508015611d33575b8015611d29575b15611ce75784875260058652838720600080825590890155815196977f444a3a44058938b8969bdac08b1dda569100d49a708e17765e90dafd7be0933197908115611cdb578251918a52858a2001555b51918215611cd157505190865260058452818620555b51908152a180f35b9150519055611cc9565b50508051600355611cb3565b6064838786519162461bcd60e51b8352820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b5082548514611c63565b506003548514611c5c565b9050151589611c54565b602489601187634e487b7160e01b835252fd5b803b156116e75788809160248851809481937f95bc9538000000000000000000000000000000000000000000000000000000008352818b8401525af18015611db55715611be757611dae90989198611f36565b9689611be7565b86513d8b823e3d90fd5b90919250878951809481937f2db31193000000000000000000000000000000000000000000000000000000008352165afa908115611e36578a91611e09575b5084108b8981611bdf565b90508881813d8311611e2f575b611e208183611fd0565b81010312610e1457518b611dfe565b503d611e16565b87513d8c823e3d90fd5b60248b602189634e487b7160e01b835252fd5b611e6b919c508a3d8c11610c1457610c068183611fd0565b9a8c611bc8565b88513d8d823e3d90fd5b60248a601188634e487b7160e01b835252fd5b611b5b92919450611eac908a3d8c11610488576104798183611fd0565b939091611b44565b611ecc919650823d8411610488576104798183611fd0565b948c611b07565b80878562461bcd60e51b60649452820152601160248201527f50415420646f65736e27742065786973740000000000000000000000000000006044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361044957565b67ffffffffffffffff8111611f4a57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611f4a57604052565b60c0810190811067ffffffffffffffff821117611f4a57604052565b6060810190811067ffffffffffffffff821117611f4a57604052565b60a0810190811067ffffffffffffffff821117611f4a57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611f4a57604052565b67ffffffffffffffff8111611f4a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b1561205257565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b156120c357565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b156121955773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d1561222a573d9061221082612011565b9161221e6040519384611fd0565b82523d6000602084013e565b606090565b919290156122905750815115612243575090565b3b1561224c5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156122a35750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110612306575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b8181018301518682016044015285935082016122c5565b6040519061232a82611f7c565b8160a06000918281528260208201528260408201528260608201528260808201520152565b67ffffffffffffffff8111611f4a5760051b60200190565b805182101561237b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146123be5760010190565b634e487b7160e01b600052601160045260246000fd5b90816020910312610449575173ffffffffffffffffffffffffffffffffffffffff811681036104495790565b919082039182116123be57565b90816020910312610449575160028110156104495790565b919082018092116123be57565b73ffffffffffffffffffffffffffffffffffffffff169061249960405161245881611f60565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16115f76121ff565b80519182159184831561251e575b5050509050156124b45750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312611254578201519081151582036102515750803880846124a7565b6004805482156126435760008381526005602052604091828220835184810181811067ffffffffffffffff82111761263057906020929186526001825492838352015492839101521590811591612626575b50801561261b575b8015612612575b6125cf578481156125c65760019455848252600560205280838320558152200155565b60035550505055565b606484602085519162461bcd60e51b8352820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b508085146125a3565b50600354851461259c565b9050151538612594565b602485604189634e487b7160e01b835252fd5b60648260206040519162461bcd60e51b8352820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b805482101561237b5760005260206000200190600090565b805468010000000000000000811015611f4a576126c191600182018155612687565b61270557815160209283015190921b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b565b634e487b7160e01b600052600060045260246000fd5b9190917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff808094169116019182116123be57565b63ffffffff908142169083156128b7577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff93848111612873578416938154612793600184015482612400565b15612851577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116123be576127cc9083612687565b50805490948116840361282257505050506127ee61270392825460201c61271b565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b6128379192939450946127039560201c61271b565b6040519361284485611f60565b845216602083015261269f565b5050909150612703926040519261286784611f60565b8352602083015261269f565b606460405162461bcd60e51b815260206004820152601160248201527f416d6f756e7420697320746f6f206269670000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f416d6f756e742063616e2774206265207a65726f0000000000000000000000006044820152fd5b91909180546001820154906129108282612400565b1561298e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff948582019182116123be5761294c9183856129d2565b9290925460201c9482612961575b5050509190565b82939592019283116123be576129859261297a91612687565b505460201c90612400565b9138808061295a565b606460405162461bcd60e51b815260206004820152601160248201527f526571756573747320697320656d7074790000000000000000000000000000006044820152fd5b90939290916129e18186612425565b90600191821c936129f28582612687565b50965b828103612a055750505050509190565b875463ffffffff16858103612a1e575050505050509190565b8598509592949091939510600014612a745750838101809111612a5f57925b612a478385612425565b811c93612a548584612687565b5096939192906129f5565b60246000634e487b7160e01b81526011600452fd5b9392507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908111612a5f5791612a3d56fea2646970667358221220d5d83166b5a0997a6272c262b84edfc6d6586f9556c0437261028c86d095a21d64736f6c63430008110033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600090813560e01c9081630ca3626314611a58575080633659cfe6146116ef5780634f1ef2861461133a57806352d1902d146112585780636ad0c854146112375780636b0ea62714611162578063928d300e14610e6f578063c44a916d146104b6578063cb35a195146102e4578063d5053ab0146102545763f3b6a45d1461009d57600080fd5b34610251578060031936011261025157918254907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06100f36100de8461234f565b936100eb86519586611fd0565b80855261234f565b01845b8181106102345750506003805485815b61019e575050505081519160208080850192818652845180945285019301945b8281106101335784840385f35b9091928260c08261018f6001948a5160a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b01960191019492919094610126565b818795975260029060208281526102218888209289516101bd81611f7c565b8454815260019586860154858301528501548b82015273ffffffffffffffffffffffffffffffffffffffff8886015416606082015288850154608082015260058095015460a0820152610210828d612367565b5261021b818c612367565b50612391565b9387525285852001549081969496610106565b60209061024296949661231d565b828289010152019492946100f6565b80fd5b509190346102e057806003193601126102e0577f8d9d99306df0b03f2391cff2ff94674c032cc09f3cf089db54a8b021125a054d913560243581855260026020528060028487200180546102b2575b5582519182526020820152a180f35b7fa2f1ead3b1f30f052d979d7f19d3d3668f00f45a0a23ae4588cc918c5b738f9760208651868152a16102a3565b8280fd5b50346102515781600319360112610251576102fd611f13565b9273ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541694845180967f68f1e99a00000000000000000000000000000000000000000000000000000000825281856020998a935afa90811561048f5783929188918791610499575b50858851809581937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa91821561048f5787929184918793610460575b5016855260068252858520938651809481937f9c15d1a2000000000000000000000000000000000000000000000000000000008352165afa928315610455579261041f575b5061041161041792602435612400565b906128fb565b915191825250f35b91508382813d831161044e575b6104368183611fd0565b8101031261044957905190610411610401565b600080fd5b503d61042c565b8451903d90823e3d90fd5b610481919350843d8611610488575b6104798183611fd0565b8101906123d4565b91386103bc565b503d61046f565b86513d87823e3d90fd5b6104b09150823d8411610488576104798183611fd0565b3861037b565b508290346102515782600319360112610251576104d1611f13565b9260249283359073ffffffffffffffffffffffffffffffffffffffff90817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416908451907f68f1e99a000000000000000000000000000000000000000000000000000000009384835260209485848481885afa938415610e65578994610e46575b50875186818581867fa7c1abe000000000000000000000000000000000000000000000000000000000998a8352165afa908115610e1f57839188918c91610e29575b50858b51809481937f7e7e66b2000000000000000000000000000000000000000000000000000000008352165afa908115610e1f578a91610de5575b508233911603610d7e57818b1696878a5260018752888a2054948a54928a51908152888187818b5afa908115610a4e579085918d91610d61575b5016908a517f2943dcab00000000000000000000000000000000000000000000000000000000815289818881865afa908115610b51578d91610d34575b50841015610cf3578a517f8a0c725b00000000000000000000000000000000000000000000000000000000815289818881865afa908115610b51578d91610cc6575b50871015610c86578a51937fb53105a300000000000000000000000000000000000000000000000000000000855289858881865afa948515610b51578d95610c57575b508b517fac027f970000000000000000000000000000000000000000000000000000000081528a818981875afa908115610bd0578f928f8f948e948c96610768956107639492610c38575b5051917f23b872dd000000000000000000000000000000000000000000000000000000008784015233908301523060448301528a60648301526064825261075e82611fb4565b612432565b612391565b998d51928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa908115610b51579086918e91610c1b575b50168b517f200d2ed20000000000000000000000000000000000000000000000000000000081528a818981855afa908115610bd0578e91610bee575b506002811015610bdc571580610b5f575b610af6575b508460038d9e9f9c809e9d8c7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008351918201927f8bab011e0edd6a03e41f22d7bebfacfbde93a6fbd86b71db78d8af308790c295845260601b16838201528760548201528b60748201526074815261086e81611fb4565b5190209d8e815260028d5220015416610ab4578890868d518094819382525afa908115610a4e57849189918e91610a97575b50868d51809481937fe2d2bfe3000000000000000000000000000000000000000000000000000000008352165afa908115610a4e5784929189918e91610a58575b50868d51809781937f76671808000000000000000000000000000000000000000000000000000000008352165afa938415610a4e578c94928b8a95938e8d948997610a0e575b5060059798600282519a61093a8c611f7c565b858c52808c01948552838c019583875260608d0198895260808d01998a5260a08d019a8b528352522097518855516001880155516002870155600386019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055518484015551910155600182018092116109fc5750869750837ff9afe7870c7ad4010cedbe87273d2282bcedb40f6734c102d53059c8da187bdf9752600183528588205586556109f083612542565b8351928352820152a180f35b8760118a92634e487b7160e01b835252fd5b96505096505093905082813d8311610a47575b610a2b8183611fd0565b8101031261044957886005938b8a968f958f9051969897610927565b503d610a21565b8b513d8e823e3d90fd5b9293505081813d8311610a90575b610a708183611fd0565b81010312610a8c57518381168103610a8c57908784928f6108e1565b8b80fd5b503d610a66565b610aae9150823d8411610488576104798183611fd0565b8f6108a0565b50606485600f8f8b8f519362461bcd60e51b85528401528201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b803b15610b5b578c80918f8e51809481937f95bc953800000000000000000000000000000000000000000000000000000000835260018d8401525af18015610b5157156107f757610b478d91611f36565b610a8c578e6107f7565b8c513d8f823e3d90fd5b8c80fd5b508b517f2db311930000000000000000000000000000000000000000000000000000000081528a818981875afa908115610bd0578e91610ba3575b508910156107f2565b90508a81813d8311610bc9575b610bba8183611fd0565b81010312610449575138610b9a565b503d610bb0565b8e8e51903d90823e3d90fd5b8e8e60218a634e487b7160e01b835252fd5b610c0e91508b3d8d11610c14575b610c068183611fd0565b81019061240d565b386107e1565b503d610bfc565b610c3291508b3d8d11610488576104798183611fd0565b386107a5565b610c50919250873d8911610488576104798183611fd0565b9038610718565b9094508981813d8311610c7f575b610c6f8183611fd0565b810103126104495751938f6106cd565b503d610c65565b6064868a8f818f519362461bcd60e51b85528401528201527f4d617820776f726b657273207065722070726f766964657220726561636865646044820152fd5b90508981813d8311610cec575b610cdd8183611fd0565b8101031261044957518f61068a565b503d610cd3565b60648660168f8c8f519362461bcd60e51b85528401528201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b90508981813d8311610d5a575b610d4b8183611fd0565b8101031261044957518f610648565b503d610d41565b610d7891508a3d8c11610488576104798183611fd0565b8f61060b565b60848360218c898c519362461bcd60e51b85528401528201527f4f6e6c79206d6174636865722063616e2063616c6c2074686973206d6574686f60448201527f64000000000000000000000000000000000000000000000000000000000000006064820152fd5b90508681813d8311610e18575b610dfc8183611fd0565b81010312610e1457518281168103610e14578c6105d1565b8980fd5b503d610df2565b89513d8c823e3d90fd5b610e409150823d8411610488576104798183611fd0565b8e610595565b610e5e919450863d8811610488576104798183611fd0565b928b610553565b88513d8b823e3d90fd5b5091346102e05760208060031936011261115e57610e8b611f13565b9073ffffffffffffffffffffffffffffffffffffffff928082857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168751928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa90811561113757859184918991611141575b50838851809881937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa948515611137578795611118575b50808416875260068352858720941685517f9c15d1a200000000000000000000000000000000000000000000000000000000815283818481855afa90811561110e5788916110df575b50610f98610f9e9142612400565b866128fb565b95600182018092116110cc5790600185939201558651928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa9081156110c25761109f927fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d96926110729289916110a5575b5083517fa9059cbb000000000000000000000000000000000000000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff861660248301526044808301889052825261075e606483611fd0565b51928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a180f35b6110bc9150823d8411610488576104798183611fd0565b38611016565b85513d88823e3d90fd5b602489601186634e487b7160e01b835252fd5b90508381813d8311611107575b6110f68183611fd0565b810103126104495751610f98610f8a565b503d6110ec565b87513d8a823e3d90fd5b611130919550833d8511610488576104798183611fd0565b9338610f41565b86513d89823e3d90fd5b6111589150823d8411610488576104798183611fd0565b38610f05565b8380fd5b509190346102e05760206003193601126102e0578060056112359260c09561118861231d565b508535815260026020522082519461119f86611f7c565b815486526001820154602087015260028201548487015273ffffffffffffffffffffffffffffffffffffffff60038301541660608701528101546080860152015460a084015251809260a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565bf35b509034611254578160031936011261125457602091549051908152f35b5080fd5b508290346102515780600319360112610251575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036112d257602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b5082826003193601126112545761134f611f13565b9060249384359067ffffffffffffffff82116116eb57366023830112156116eb57818301359161137e83612011565b61138a83519182611fd0565b83815260209384820192368a83830101116116e7578189928b88930186378301015273ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016906113f18230141561204b565b6114207f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9282845416146120bc565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036116a6577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611489575050505050505061148691925061212d565b80f35b87939496989597169086517f52d1902d00000000000000000000000000000000000000000000000000000000815288818b81865afa60009181611677575b506115335760848a602e8d8c8c519362461bcd60e51b85528401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9991939694989295990361161057505061154c8461212d565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611608575b611589575b505050505080f35b6115fd946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986115e08a611f98565b60278a528901528701525190845af46115f76121ff565b9161222f565b508180808080611581565b50600161157c565b9060296084928886519362461bcd60e51b85528401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918a82813d831161169f575b61168e8183611fd0565b81010312610251575051908c6114c7565b503d611684565b606487601e8c8989519362461bcd60e51b85528401528201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b8880fd5b8480fd5b509190346102e05760208060031936011261115e5761170c611f13565b9173ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000166117518130141561204b565b6117807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9183835416146120bc565b817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303611a16578251908482019282841067ffffffffffffffff851117611a01578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561180457505050505050611486915061212d565b8693949596169085517f52d1902d00000000000000000000000000000000000000000000000000000000815287818a81865afa600091816119d2575b506118ad576084898989519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b97919294979593950361196a57506118c48461212d565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611962575b61190057505050505080f35b611957946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986115e08a611f98565b503880808080611581565b5060006118f4565b6084908684519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d83116119fa575b6119e98183611fd0565b810103126102515750519038611840565b503d6119df565b604188634e487b7160e01b6000525260246000fd5b6064868585519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b828486346102e0576020918260031936011261115e578135918285526002845281852073ffffffffffffffffffffffffffffffffffffffff968760038301541690338203611ed35750877fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416918451927f68f1e99a00000000000000000000000000000000000000000000000000000000845287848681845afa938415611db5578593929189918b96611eb4575b508751948580927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa928315611db5579085918a94611e8f575b5090611b5b910154828a5260068952868a2061274b565b8754927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92838501948511611e7c578a169086519a7f200d2ed2000000000000000000000000000000000000000000000000000000008c52898c8881865afa9b8c15611e72578b9c611e53575b5060028c1015611e4057896001809d149283611dbf575b505050611d5b575b5087528786528387209081548015611d48570190558555828552600284526000600583872082815582898201558260028201558760038201558284820155015560058452818520825190611c3a82611f60565b878154918284520154868301918183521590811591611d3e575b508015611d33575b8015611d29575b15611ce75784875260058652838720600080825590890155815196977f444a3a44058938b8969bdac08b1dda569100d49a708e17765e90dafd7be0933197908115611cdb578251918a52858a2001555b51918215611cd157505190865260058452818620555b51908152a180f35b9150519055611cc9565b50508051600355611cb3565b6064838786519162461bcd60e51b8352820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b5082548514611c63565b506003548514611c5c565b9050151589611c54565b602489601187634e487b7160e01b835252fd5b803b156116e75788809160248851809481937f95bc9538000000000000000000000000000000000000000000000000000000008352818b8401525af18015611db55715611be757611dae90989198611f36565b9689611be7565b86513d8b823e3d90fd5b90919250878951809481937f2db31193000000000000000000000000000000000000000000000000000000008352165afa908115611e36578a91611e09575b5084108b8981611bdf565b90508881813d8311611e2f575b611e208183611fd0565b81010312610e1457518b611dfe565b503d611e16565b87513d8c823e3d90fd5b60248b602189634e487b7160e01b835252fd5b611e6b919c508a3d8c11610c1457610c068183611fd0565b9a8c611bc8565b88513d8d823e3d90fd5b60248a601188634e487b7160e01b835252fd5b611b5b92919450611eac908a3d8c11610488576104798183611fd0565b939091611b44565b611ecc919650823d8411610488576104798183611fd0565b948c611b07565b80878562461bcd60e51b60649452820152601160248201527f50415420646f65736e27742065786973740000000000000000000000000000006044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361044957565b67ffffffffffffffff8111611f4a57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611f4a57604052565b60c0810190811067ffffffffffffffff821117611f4a57604052565b6060810190811067ffffffffffffffff821117611f4a57604052565b60a0810190811067ffffffffffffffff821117611f4a57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611f4a57604052565b67ffffffffffffffff8111611f4a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b1561205257565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b156120c357565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b156121955773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d1561222a573d9061221082612011565b9161221e6040519384611fd0565b82523d6000602084013e565b606090565b919290156122905750815115612243575090565b3b1561224c5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156122a35750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110612306575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b8181018301518682016044015285935082016122c5565b6040519061232a82611f7c565b8160a06000918281528260208201528260408201528260608201528260808201520152565b67ffffffffffffffff8111611f4a5760051b60200190565b805182101561237b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146123be5760010190565b634e487b7160e01b600052601160045260246000fd5b90816020910312610449575173ffffffffffffffffffffffffffffffffffffffff811681036104495790565b919082039182116123be57565b90816020910312610449575160028110156104495790565b919082018092116123be57565b73ffffffffffffffffffffffffffffffffffffffff169061249960405161245881611f60565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16115f76121ff565b80519182159184831561251e575b5050509050156124b45750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312611254578201519081151582036102515750803880846124a7565b6004805482156126435760008381526005602052604091828220835184810181811067ffffffffffffffff82111761263057906020929186526001825492838352015492839101521590811591612626575b50801561261b575b8015612612575b6125cf578481156125c65760019455848252600560205280838320558152200155565b60035550505055565b606484602085519162461bcd60e51b8352820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b508085146125a3565b50600354851461259c565b9050151538612594565b602485604189634e487b7160e01b835252fd5b60648260206040519162461bcd60e51b8352820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b805482101561237b5760005260206000200190600090565b805468010000000000000000811015611f4a576126c191600182018155612687565b61270557815160209283015190921b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b565b634e487b7160e01b600052600060045260246000fd5b9190917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff808094169116019182116123be57565b63ffffffff908142169083156128b7577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff93848111612873578416938154612793600184015482612400565b15612851577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116123be576127cc9083612687565b50805490948116840361282257505050506127ee61270392825460201c61271b565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b6128379192939450946127039560201c61271b565b6040519361284485611f60565b845216602083015261269f565b5050909150612703926040519261286784611f60565b8352602083015261269f565b606460405162461bcd60e51b815260206004820152601160248201527f416d6f756e7420697320746f6f206269670000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f416d6f756e742063616e2774206265207a65726f0000000000000000000000006044820152fd5b91909180546001820154906129108282612400565b1561298e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff948582019182116123be5761294c9183856129d2565b9290925460201c9482612961575b5050509190565b82939592019283116123be576129859261297a91612687565b505460201c90612400565b9138808061295a565b606460405162461bcd60e51b815260206004820152601160248201527f526571756573747320697320656d7074790000000000000000000000000000006044820152fd5b90939290916129e18186612425565b90600191821c936129f28582612687565b50965b828103612a055750505050509190565b875463ffffffff16858103612a1e575050505050509190565b8598509592949091939510600014612a745750838101809111612a5f57925b612a478385612425565b811c93612a548584612687565b5096939192906129f5565b60246000634e487b7160e01b81526011600452fd5b9392507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908111612a5f5791612a3d56fea2646970667358221220d5d83166b5a0997a6272c262b84edfc6d6586f9556c0437261028c86d095a21d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6668,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_patCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6673,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_ownersInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(OwnerInfo)6635_storage)"
      },
      {
        "astId": 6678,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_patByPATId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(PAT)7740_storage)"
      },
      {
        "astId": 6681,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_patsIdsList",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Bytes32List)10237_storage"
      },
      {
        "astId": 6686,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_requests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Requests)10542_storage)"
      },
      {
        "astId": 7392,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Request)10547_storage)dyn_storage": {
        "base": "t_struct(Request)10547_storage",
        "encoding": "dynamic_array",
        "label": "struct WithdrawRequests.Request[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(OwnerInfo)6635_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorkersModuleState.OwnerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OwnerInfo)6635_storage"
      },
      "t_mapping(t_address,t_struct(Requests)10542_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WithdrawRequests.Requests)",
        "numberOfBytes": "32",
        "value": "t_struct(Requests)10542_storage"
      },
      "t_mapping(t_bytes32,t_struct(Element)10227_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedList.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)10227_storage"
      },
      "t_mapping(t_bytes32,t_struct(PAT)7740_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PAT)",
        "numberOfBytes": "32",
        "value": "t_struct(PAT)7740_storage"
      },
      "t_struct(Bytes32List)10237_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Bytes32List",
        "members": [
          {
            "astId": 10229,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_first",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10231,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_last",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10236,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_elements",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(Element)10227_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Element)10227_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Element",
        "members": [
          {
            "astId": 10224,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10226,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OwnerInfo)6635_storage": {
        "encoding": "inplace",
        "label": "struct WorkersModuleState.OwnerInfo",
        "members": [
          {
            "astId": 6631,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "patCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6634,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "patsIds",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Bytes32List)10237_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PAT)7740_storage": {
        "encoding": "inplace",
        "label": "struct PAT",
        "members": [
          {
            "astId": 7729,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7731,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 7733,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "workerId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 7735,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7737,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7739,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "created",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Request)10547_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRequests.Request",
        "members": [
          {
            "astId": 10544,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_createTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10546,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_cumulative",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Requests)10542_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRequests.Requests",
        "members": [
          {
            "astId": 10539,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_requests",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Request)10547_storage)dyn_storage"
          },
          {
            "astId": 10541,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_indexOffset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}