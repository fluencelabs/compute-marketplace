{
  "address": "0x0f68c702dC151D07038fA40ab3Ed1f9b8BAC2981",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGlobalConfig",
          "name": "globalConfig_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "patIds",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dealCreationBlock",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "appCID",
          "type": "tuple"
        }
      ],
      "name": "ComputePeerMatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dealCreationBlock",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "appCID",
          "type": "tuple"
        }
      ],
      "name": "ComputeProviderMatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPricePerEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1[]",
          "name": "effectors",
          "type": "tuple[]"
        }
      ],
      "name": "ComputeProviderRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWorkerSlots",
          "type": "uint256"
        }
      ],
      "name": "WorkersSlotsChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "effector",
          "type": "tuple"
        }
      ],
      "name": "addEffector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "workerSlots",
          "type": "uint256"
        }
      ],
      "name": "addWorkersSlots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxCollateral",
          "type": "uint256"
        }
      ],
      "name": "changeMaxCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinPricePerEpoch",
          "type": "uint256"
        }
      ],
      "name": "changeMinPricePerEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "newPaymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMaxCollateral",
          "type": "uint256"
        }
      ],
      "name": "changePaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "computePeerByPeerIdHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "freeWorkerSlots",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "computeProviderByOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minPricePerEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalFreeWorkerSlots",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        }
      ],
      "name": "getFreeWorkersSolts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalConfig",
      "outputs": [
        {
          "internalType": "contract IGlobalConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICore",
          "name": "deal",
          "type": "address"
        }
      ],
      "name": "matchWithDeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minPricePerEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1[]",
          "name": "effectors",
          "type": "tuple[]"
        }
      ],
      "name": "registerComputeProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeComputeProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "effector",
          "type": "tuple"
        }
      ],
      "name": "removeEffector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "hasAccess",
          "type": "bool"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "workerSlots",
          "type": "uint256"
        }
      ],
      "name": "subWorkersSlots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc90578861e20cd7013a6411898e95faedbb0715dfa4c88135da8e6efa0abece8",
  "receipt": {
    "to": null,
    "from": "0x627e730fd1361E6FFcee236DAc08F82EAa8ac7cD",
    "contractAddress": "0x0f68c702dC151D07038fA40ab3Ed1f9b8BAC2981",
    "transactionIndex": 0,
    "gasUsed": "2902116",
    "logsBloom": "0x
    "blockHash": "0x2485212e90f57c7ef73e6ca00cf508f4753d5b233130f9ccf50c42454dbded87",
    "transactionHash": "0xc90578861e20cd7013a6411898e95faedbb0715dfa4c88135da8e6efa0abece8",
    "logs": [],
    "blockNumber": 71,
    "cumulativeGasUsed": "2902116",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x79EeA23C90e7D142D903833AB6F835aC06cCbAce"
  ],
  "numDeployments": 1,
  "solcInputHash": "09b009adaa7c41f548683d650f79aaa9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGlobalConfig\",\"name\":\"globalConfig_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"patIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealCreationBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"appCID\",\"type\":\"tuple\"}],\"name\":\"ComputePeerMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealCreationBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"appCID\",\"type\":\"tuple\"}],\"name\":\"ComputeProviderMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPricePerEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors\",\"type\":\"tuple[]\"}],\"name\":\"ComputeProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWorkerSlots\",\"type\":\"uint256\"}],\"name\":\"WorkersSlotsChanged\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"effector\",\"type\":\"tuple\"}],\"name\":\"addEffector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workerSlots\",\"type\":\"uint256\"}],\"name\":\"addWorkersSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxCollateral\",\"type\":\"uint256\"}],\"name\":\"changeMaxCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPricePerEpoch\",\"type\":\"uint256\"}],\"name\":\"changeMinPricePerEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newPaymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxCollateral\",\"type\":\"uint256\"}],\"name\":\"changePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"computePeerByPeerIdHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"freeWorkerSlots\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"computeProviderByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPricePerEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFreeWorkerSlots\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"}],\"name\":\"getFreeWorkersSolts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalConfig\",\"outputs\":[{\"internalType\":\"contract IGlobalConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICore\",\"name\":\"deal\",\"type\":\"address\"}],\"name\":\"matchWithDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPricePerEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors\",\"type\":\"tuple[]\"}],\"name\":\"registerComputeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeComputeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"effector\",\"type\":\"tuple\"}],\"name\":\"removeEffector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAccess\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workerSlots\",\"type\":\"uint256\"}],\"name\":\"subWorkersSlots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/global/Matcher.sol\":\"Matcher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nstruct Particle {\\n    string air;\\n    string prevData;\\n    string params;\\n    string callResults;\\n}\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\",\"keccak256\":\"0xf93b0de9200f057680d3aae95194cc340ab2b4449c2802e0d765a1f31e81c8b7\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfigModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\nimport \\\"../../global/interfaces/IParticleVerifyer.sol\\\";\\nimport \\\"../../global/interfaces/IGlobalConfig.sol\\\";\\n\\ninterface IConfigModule {\\n    function initialize(\\n        IERC20 paymentToken_,\\n        uint256 pricePerEpoch_,\\n        uint256 requiredCollateral_,\\n        CIDV1 calldata appCID_,\\n        uint256 minWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 targetWorkers_,\\n        CIDV1[] calldata effectorWasmsCids_\\n    ) external;\\n\\n    function globalConfig() external view returns (IGlobalConfig);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function particleVerifyer() external view returns (IParticleVerifyer);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function pricePerEpoch() external view returns (uint256);\\n\\n    function requiredCollateral() external view returns (uint256);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n}\\n\",\"keccak256\":\"0x7732f67045048e33830c0d726f727f9b6ff3d6404f072570a6c6eddee4059418\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IConfigModule.sol\\\";\\nimport \\\"./IPaymentModule.sol\\\";\\nimport \\\"./IStatusModule.sol\\\";\\nimport \\\"./IWorkersModule.sol\\\";\\n\\nenum Module {\\n    None,\\n    Config,\\n    Payment,\\n    Status,\\n    Workers\\n}\\n\\ninterface ICore {\\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\\n\\n    function moduleByType(Module module) external view returns (address);\\n\\n    function moduleByAddress(address module) external view returns (Module);\\n\\n    function configModule() external view returns (IConfigModule);\\n\\n    function paymentModule() external view returns (IPaymentModule);\\n\\n    function statusModule() external view returns (IStatusModule);\\n\\n    function workersModule() external view returns (IWorkersModule);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xac6992f807db36edcacd78f986cf376fb0db20596ccee5d532dca443ecb75e79\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IPaymentModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IPaymentModule {\\n    function balance() external view returns (uint256);\\n\\n    function rewardAmount(bytes32 particleHash, bytes32 patId) external view returns (uint);\\n\\n    function depositToPaymentBalance(uint256 amount) external;\\n\\n    function withdrawFromPaymentBalance(uint256 amount) external;\\n\\n    function commitParticle(Particle calldata particle) external;\\n\\n    function withdrawReward(bytes32 patId, bytes32[] calldata particlesHashes) external;\\n}\\n\",\"keccak256\":\"0x69e87cb96fdeb4dcb0b6c62d75b65076c085638d49a08b8aa65fded932e98de0\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IStatusModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nenum DealStatus {\\n    WaitingForWorkers,\\n    Working\\n}\\n\\ninterface IStatusModule {\\n    event StatusChanged(DealStatus newStatus);\\n\\n    function status() external view returns (DealStatus);\\n\\n    function startWorkingEpoch() external view returns (uint256);\\n\\n    function changeStatus(DealStatus status_) external;\\n}\\n\",\"keccak256\":\"0x3c670bd4876900f94f1de097ddc97fccb898d3a37e47ed55f5e36ed4c26a728e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../base/Types.sol\\\";\\n\\nstruct PAT {\\n    bytes32 id;\\n    bytes32 peerId;\\n    bytes32 workerId;\\n    address owner;\\n    uint256 collateral;\\n    uint256 created;\\n}\\n\\ninterface IWorkersModule {\\n    function getPATs() external view returns (PAT[] memory);\\n\\n    function patCount() external view returns (uint256);\\n\\n    function getPAT(bytes32 id) external view returns (PAT memory);\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\\n\\n    function createPAT(address owner, bytes32 peerId) external;\\n\\n    function exit(bytes32 id) external;\\n\\n    function withdrawCollateral(address owner) external;\\n\\n    function setWorker(bytes32 id, bytes32 workerId) external;\\n}\\n\",\"keccak256\":\"0x895d334bb205743038152b9d80dd7357055c98d388d622cecf5c2a9f2f50fe70\",\"license\":\"Apache-2.0\"},\"contracts/global/Matcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../deal/interfaces/ICore.sol\\\";\\nimport \\\"./interfaces/IGlobalConfig.sol\\\";\\nimport \\\"./interfaces/IMatcher.sol\\\";\\nimport \\\"../utils/LinkedList.sol\\\";\\nimport \\\"../deal/base/Types.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MatcherState {\\n    struct ComputeProvider {\\n        uint minPricePerEpoch;\\n        uint maxCollateral;\\n        IERC20 paymentToken;\\n        uint totalFreeWorkerSlots;\\n    }\\n\\n    struct ComputePeer {\\n        bytes32 peerId;\\n        uint freeWorkerSlots;\\n    }\\n\\n    IGlobalConfig public immutable globalConfig;\\n\\n    // --- Events ---\\n\\n    event ComputeProviderMatched(address indexed computeProvider, address deal, uint dealCreationBlock, CIDV1 appCID);\\n\\n    event ComputePeerMatched(bytes32 indexed peerId, address deal, bytes32[] patIds, uint dealCreationBlock, CIDV1 appCID);\\n\\n    event ComputeProviderRegistered(\\n        address computeProvider,\\n        uint minPricePerEpoch,\\n        uint maxCollateral,\\n        IERC20 paymentToken,\\n        CIDV1[] effectors\\n    );\\n\\n    event WorkersSlotsChanged(bytes32 peerId, uint newWorkerSlots);\\n\\n    // --- Compute Providers ---\\n\\n    mapping(address => ComputeProvider) public computeProviderByOwner;\\n    mapping(bytes32 => ComputePeer) public computePeerByPeerIdHash;\\n\\n    LinkedList.Bytes32List internal _computeProvidersList;\\n    mapping(address => LinkedList.Bytes32List) internal _computePeersListByProvider;\\n\\n    mapping(address => mapping(bytes32 => bool)) internal _effectorsByComputePeerOwner;\\n\\n    // --- Whitelist Area ---\\n    mapping(address => bool) public whitelist;\\n\\n    constructor(IGlobalConfig globalConfig_) {\\n        globalConfig = globalConfig_;\\n    }\\n}\\n\\nabstract contract MatcherInternal is MatcherState, UUPSUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using LinkedList for LinkedList.Bytes32List;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == globalConfig.owner(), \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    function _getComputeProvider(address owner) internal returns (ComputeProvider storage) {\\n        ComputeProvider storage computeProvider = computeProviderByOwner[owner];\\n        require(address(computeProvider.paymentToken) != address(0x00), \\\"Compute provider doesn't exist\\\");\\n\\n        return computeProvider;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    function _isEffectorsMatched(IConfigModule dealConfig, address computeProvider) internal view returns (bool) {\\n        CIDV1[] memory dealEffectors = dealConfig.effectors();\\n\\n        for (uint i = 0; i < dealEffectors.length; i++) {\\n            bytes32 dealEffector = keccak256(abi.encodePacked(dealEffectors[i].prefixes, dealEffectors[i].hash));\\n            if (!_effectorsByComputePeerOwner[computeProvider][dealEffector]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\nabstract contract MatcherOwnable is MatcherInternal {\\n    function setWhiteList(address owner, bool hasAccess) external onlyOwner {\\n        whitelist[owner] = hasAccess;\\n    }\\n}\\n\\ncontract Matcher is IMatcher, MatcherOwnable {\\n    using SafeERC20 for IERC20;\\n    using LinkedList for LinkedList.Bytes32List;\\n\\n    constructor(IGlobalConfig globalConfig_) MatcherState(globalConfig_) {}\\n\\n    function getFreeWorkersSolts(address computeProvider, bytes32 peerId) external view returns (uint) {\\n        return computePeerByPeerIdHash[peerId].freeWorkerSlots;\\n    }\\n\\n    function registerComputeProvider(uint minPricePerEpoch, uint maxCollateral, IERC20 paymentToken, CIDV1[] calldata effectors) external {\\n        //TODO: require(whitelist[owner], \\\"Only whitelisted can call this function\\\");\\n\\n        require(minPricePerEpoch > 0, \\\"Min price per epoch should be greater than 0\\\");\\n        require(maxCollateral > 0, \\\"Max collateral should be greater than 0\\\");\\n        require(address(paymentToken) != address(0x00), \\\"Compute provider already\\\");\\n\\n        address owner = msg.sender;\\n        require(address(computeProviderByOwner[owner].paymentToken) == address(0x00), \\\"Compute provider already\\\");\\n\\n        computeProviderByOwner[owner] = ComputeProvider({\\n            minPricePerEpoch: minPricePerEpoch,\\n            maxCollateral: maxCollateral,\\n            paymentToken: paymentToken,\\n            totalFreeWorkerSlots: 0\\n        });\\n\\n        for (uint i = 0; i < effectors.length; i++) {\\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\\n            _effectorsByComputePeerOwner[owner][dealEffector] = true;\\n        }\\n\\n        _computeProvidersList.push(bytes32(bytes20(owner)));\\n\\n        emit ComputeProviderRegistered(owner, minPricePerEpoch, maxCollateral, paymentToken, effectors);\\n    }\\n\\n    function addWorkersSlots(bytes32 peerId, uint workerSlots) external {\\n        address owner = msg.sender;\\n\\n        require(workerSlots > 0, \\\"Worker slots should be greater than 0\\\");\\n\\n        uint256 freeWorkerSlots = computePeerByPeerIdHash[peerId].freeWorkerSlots + workerSlots;\\n        computePeerByPeerIdHash[peerId].freeWorkerSlots = freeWorkerSlots;\\n\\n        if (freeWorkerSlots == workerSlots) {\\n            _computePeersListByProvider[owner].push(peerId);\\n        }\\n\\n        uint amount = computeProviderByOwner[owner].maxCollateral * workerSlots;\\n        computeProviderByOwner[owner].paymentToken.safeTransferFrom(owner, address(this), amount);\\n\\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\\n    }\\n\\n    function subWorkersSlots(bytes32 peerId, uint workerSlots) external {\\n        address owner = msg.sender;\\n\\n        uint256 freeWorkerSlots = computePeerByPeerIdHash[peerId].freeWorkerSlots - workerSlots;\\n        computePeerByPeerIdHash[peerId].freeWorkerSlots = freeWorkerSlots;\\n\\n        if (freeWorkerSlots == 0) {\\n            _computePeersListByProvider[owner].remove(peerId);\\n        }\\n\\n        uint amount = computeProviderByOwner[owner].maxCollateral * workerSlots;\\n        computeProviderByOwner[owner].paymentToken.safeTransferFrom(address(this), owner, amount);\\n\\n        emit WorkersSlotsChanged(peerId, freeWorkerSlots);\\n    }\\n\\n    function changeMinPricePerEpoch(uint newMinPricePerEpoch) external {\\n        require(newMinPricePerEpoch > 0, \\\"Min price per epoch should be greater than 0\\\");\\n\\n        ComputeProvider storage computeProvider = _getComputeProvider(msg.sender);\\n\\n        computeProvider.minPricePerEpoch = newMinPricePerEpoch;\\n\\n        // event\\n    }\\n\\n    function changeMaxCollateral(uint newMaxCollateral) external {\\n        require(newMaxCollateral > 0, \\\"Max collateral should be greater than 0\\\");\\n\\n        address owner = msg.sender;\\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\\n\\n        uint oldMaxCollateral = computeProvider.maxCollateral;\\n        computeProvider.maxCollateral = newMaxCollateral;\\n\\n        if (computeProvider.totalFreeWorkerSlots == 0 || oldMaxCollateral == newMaxCollateral) {\\n            return;\\n        }\\n\\n        if (oldMaxCollateral > newMaxCollateral) {\\n            uint amount = (oldMaxCollateral - newMaxCollateral) * computeProvider.totalFreeWorkerSlots;\\n\\n            computeProvider.paymentToken.safeTransfer(owner, amount);\\n        } else {\\n            uint amount = (newMaxCollateral - oldMaxCollateral) * computeProvider.totalFreeWorkerSlots;\\n\\n            computeProvider.paymentToken.safeTransferFrom(owner, address(this), amount);\\n        }\\n\\n        // event\\n    }\\n\\n    function changePaymentToken(IERC20 newPaymentToken, uint newMaxCollateral) external {\\n        require(address(newPaymentToken) != address(0x00), \\\"Payment token should be not zero address\\\");\\n\\n        address owner = msg.sender;\\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\\n\\n        IERC20 oldPaymentToken = computeProvider.paymentToken;\\n        computeProvider.paymentToken = newPaymentToken;\\n\\n        uint oldAmount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\\n        oldPaymentToken.safeTransfer(owner, oldAmount);\\n\\n        uint newAmount = newMaxCollateral * computeProvider.totalFreeWorkerSlots;\\n        newPaymentToken.safeTransferFrom(owner, address(this), newAmount);\\n\\n        // event\\n    }\\n\\n    function addEffector(CIDV1 calldata effector) external {\\n        address owner = msg.sender;\\n\\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\\n\\n        require(_effectorsByComputePeerOwner[owner][effectorCIDHash] == false, \\\"Effector already exists\\\");\\n        _effectorsByComputePeerOwner[owner][effectorCIDHash] = true;\\n    }\\n\\n    function removeEffector(CIDV1 calldata effector) external {\\n        address owner = msg.sender;\\n\\n        bytes32 effectorCIDHash = keccak256(abi.encodePacked(effector.prefixes, effector.hash));\\n\\n        require(_effectorsByComputePeerOwner[owner][effectorCIDHash] == true, \\\"Effector doesn't exist\\\");\\n        _effectorsByComputePeerOwner[owner][effectorCIDHash] = false;\\n    }\\n\\n    function removeComputeProvider() external {\\n        address owner = msg.sender;\\n        ComputeProvider storage computeProvider = _getComputeProvider(owner);\\n\\n        require(address(computeProvider.paymentToken) != address(0x00), \\\"Compute provider doesn't exist\\\");\\n\\n        IERC20 paymentToken = computeProvider.paymentToken;\\n        uint amount = computeProvider.maxCollateral * computeProvider.totalFreeWorkerSlots;\\n\\n        delete computeProvider.minPricePerEpoch;\\n        delete computeProvider.maxCollateral;\\n        delete computeProvider.paymentToken;\\n        delete computeProvider.totalFreeWorkerSlots;\\n\\n        paymentToken.safeTransfer(owner, amount);\\n\\n        _computeProvidersList.remove(bytes32(bytes20(owner)));\\n\\n        // event\\n    }\\n\\n    // --- Deals ---\\n\\n    function matchWithDeal(ICore deal) external {\\n        require(globalConfig.factory().isDeal(address(deal)), \\\"Deal is not from factory\\\");\\n\\n        IConfigModule config = deal.configModule();\\n        uint requiredCollateral = config.requiredCollateral();\\n        uint pricePerEpoch = config.pricePerEpoch();\\n        uint maxWorkersPerProvider = config.maxWorkersPerProvider();\\n        uint creationBlock = config.creationBlock();\\n        CIDV1 memory appCID = config.appCID();\\n\\n        IWorkersModule workersModule = deal.workersModule();\\n        uint freeWorkerSlotsInDeal = config.targetWorkers() - workersModule.patCount();\\n\\n        bytes32 currentId = _computeProvidersList.first();\\n        while (currentId != bytes32(0x00) && freeWorkerSlotsInDeal > 0) {\\n            address computeProviderAddress = address(bytes20(currentId));\\n\\n            ComputeProvider storage computeProvider = computeProviderByOwner[computeProviderAddress];\\n            uint maxCollateral = computeProvider.maxCollateral;\\n\\n            if (\\n                computeProvider.minPricePerEpoch > pricePerEpoch ||\\n                maxCollateral < requiredCollateral ||\\n                !_isEffectorsMatched(config, computeProviderAddress)\\n            ) {\\n                currentId = _computeProvidersList.next(currentId);\\n                continue;\\n            }\\n\\n            _findPeersForMatching(\\n                computeProviderAddress,\\n                maxWorkersPerProvider,\\n                freeWorkerSlotsInDeal,\\n                maxCollateral,\\n                requiredCollateral,\\n                address(deal),\\n                workersModule,\\n                creationBlock,\\n                appCID\\n            );\\n\\n            currentId = _computeProvidersList.next(currentId);\\n\\n            emit ComputeProviderMatched(computeProviderAddress, address(deal), creationBlock, appCID);\\n        }\\n    }\\n\\n    function _findPeersForMatching(\\n        address computeProvider,\\n        uint maxWorkersPerProvider,\\n        uint freeWorkerSlotsInDeal,\\n        uint maxCollateral,\\n        uint requiredCollateral,\\n        address deal,\\n        IWorkersModule workersModule,\\n        uint dealCreationBlock,\\n        CIDV1 memory appCID\\n    ) internal {\\n        bytes32 hashOfPeerId = _computePeersListByProvider[computeProvider].first();\\n\\n        while (hashOfPeerId != bytes32(0x00)) {\\n            bytes32 peerId = computePeerByPeerIdHash[hashOfPeerId].peerId;\\n            uint freeWorkerSlots = computePeerByPeerIdHash[hashOfPeerId].freeWorkerSlots;\\n\\n            uint receivedWorkersSlots;\\n            if (maxWorkersPerProvider > freeWorkerSlots) {\\n                receivedWorkersSlots = freeWorkerSlots;\\n            } else {\\n                receivedWorkersSlots = maxWorkersPerProvider;\\n            }\\n\\n            if (receivedWorkersSlots > freeWorkerSlotsInDeal) {\\n                receivedWorkersSlots = freeWorkerSlotsInDeal;\\n            }\\n\\n            if (receivedWorkersSlots == freeWorkerSlots) {\\n                delete computePeerByPeerIdHash[hashOfPeerId];\\n                _computePeersListByProvider[computeProvider].remove(hashOfPeerId);\\n            } else {\\n                computePeerByPeerIdHash[hashOfPeerId].freeWorkerSlots = freeWorkerSlots - receivedWorkersSlots;\\n            }\\n\\n            globalConfig.fluenceToken().approve(address(workersModule), requiredCollateral * receivedWorkersSlots);\\n            for (uint j = 0; j < receivedWorkersSlots; j++) {\\n                workersModule.createPAT(computeProvider, peerId);\\n            }\\n\\n            uint refoundByWorker = maxCollateral - requiredCollateral;\\n            if (refoundByWorker > 0) {\\n                globalConfig.fluenceToken().transfer(computeProvider, refoundByWorker * receivedWorkersSlots);\\n            }\\n\\n            hashOfPeerId = _computePeersListByProvider[computeProvider].next(hashOfPeerId);\\n\\n            PAT[] memory pats = workersModule.getPATs();\\n            bytes32[] memory patIds = new bytes32[](pats.length);\\n\\n            uint patLength = pats.length;\\n            for (uint i = 0; i < patLength; i++) {\\n                patIds[i] = pats[i].id;\\n            }\\n\\n            emit ComputePeerMatched(peerId, deal, patIds, dealCreationBlock, appCID);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5655a165d730aace7fdc8c490051cbb2adf68173794f8ace5ba87afc1087f62c\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IEpochManager {\\n    function epochDuration() external view returns (uint256);\\n\\n    function currentEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2dce187734fef8462cf222ec53569253aae570020578c7d470545b476ac3e87d\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IFactory {\\n    function isDeal(address addr) external view returns (bool);\\n\\n    function createDeal(\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        CIDV1 calldata appCID_,\\n        CIDV1[] calldata effectors\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8c2c4ac19b466b701a282339069aa2df46c98c70b74d587afbfbf53ed0905a14\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEpochManager.sol\\\";\\nimport \\\"./IMatcher.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IGlobalConfig {\\n    function owner() external view returns (address);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function withdrawTimeout() external view returns (uint);\\n\\n    function epochManager() external view returns (IEpochManager);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0xf5f3740cd208be3ee6019fefb519e46757d546b224f08dacf462250871aafa06\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/interfaces/ICore.sol\\\";\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IMatcher {\\n    function getFreeWorkersSolts(address computeProvider, bytes32 peerId) external view returns (uint);\\n\\n    function matchWithDeal(ICore deal) external;\\n}\\n\",\"keccak256\":\"0x7bea3746a31766e2b5ab68cb6f517edc68e10e1a43042ee58e6096b925b92655\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IParticleVerifyer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport { Particle } from \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IParticleVerifyer {\\n    function verifyParticle(Particle calldata particle) external returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0xa59cf51c885735527bce2a5306ad84b553cd83f74e297de0b331289d9d3786e2\",\"license\":\"Apache-2.0\"},\"contracts/utils/LinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nlibrary LinkedList {\\n    struct Element {\\n        bytes32 prev;\\n        bytes32 next;\\n    }\\n\\n    struct Bytes32List {\\n        bytes32 _first;\\n        bytes32 _last;\\n        mapping(bytes32 => Element) _elements;\\n    }\\n\\n    function _init(Bytes32List storage self, bytes32 key) private {\\n        self._first = key;\\n        self._last = key;\\n    }\\n\\n    function push(Bytes32List storage self, bytes32 key) internal {\\n        bytes32 oldLast = self._last;\\n\\n        require(key != bytes32(0x00), \\\"Key cannot be ZERO\\\");\\n\\n        require(!exist(self, key), \\\"Key already exists\\\");\\n\\n        if (oldLast == 0) {\\n            _init(self, key);\\n            return;\\n        }\\n\\n        self._last = key;\\n        self._elements[key].prev = oldLast;\\n        self._elements[oldLast].next = key;\\n    }\\n\\n    function first(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._first;\\n    }\\n\\n    function last(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._last;\\n    }\\n\\n    function remove(Bytes32List storage self, bytes32 key) internal {\\n        Element memory element = self._elements[key];\\n\\n        require(_exist(self, element, key), \\\"Key does not exist\\\");\\n\\n        delete self._elements[key];\\n\\n        if (element.prev != bytes32(0x00)) {\\n            self._elements[element.prev].next = element.next;\\n        } else {\\n            self._first = element.next;\\n        }\\n\\n        if (element.next != bytes32(0x00)) {\\n            self._elements[element.next].prev = element.prev;\\n        } else {\\n            self._last = element.prev;\\n        }\\n    }\\n\\n    function exist(Bytes32List storage self, bytes32 key) internal view returns (bool) {\\n        return _exist(self, self._elements[key], key);\\n    }\\n\\n    function _exist(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\\n    }\\n\\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].next;\\n    }\\n\\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].prev;\\n    }\\n}\\n\",\"keccak256\":\"0xa1daa42378d580a0e5d1060181fbd984ba29e7b7d502b05a980ce09b8bfc5b8b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c034620000b557601f620034a838819003918201601f19168301916001600160401b03831184841017620000ba57808492602094604052833981010312620000b557516001600160a01b0381168103620000b5576080523060a0526040516133d79081620000d182396080518181816102740152818161076501528181610c98015281816112c00152818161139d01528181611f5801526122ca015260a051818181611d8901528181611ece01526122400152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6101a0604052600436101561001357600080fd5b60003560e01c80633659cfe61461220d5780634f1ef28614611e4357806352d1902d14611d6157806355eb409a14611a5d578063571458481461194757806359a6bf5f146117e05780635a733e9b146117745780635c768997146115e35780636868bda3146115c75780636b50b7a71461158f57806373e8f7e9146114825780637f178450146114575780638d14e127146113305780639b19251a146112e4578063a7c1abe014611293578063b63af4b114611160578063c6c44ed1146101fc578063c94be829146101c75763f6ee7139146100ee57600080fd5b346101c2577f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f604061011f36612599565b8160005260206001815261019d61016e610140846001886000200154612c96565b93856000526001845284600188600020015584156101a8575b33600052600084526001876000200154612adb565b336000526000835273ffffffffffffffffffffffffffffffffffffffff60028760002001541633903090612aee565b8351928352820152a1005b33600052600584526101bd8688600020613243565b610159565b600080fd5b346101c25760206003193601126101c25760043560005260016020526040806000206001815491015482519182526020820152f35b346101c25760206003193601126101c257600435806101605273ffffffffffffffffffffffffffffffffffffffff8116036101c2576040517fc45a015500000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561091457600091611110575b50602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f4db44e640000000000000000000000000000000000000000000000000000000083528161016051166004840152165afa908115610914576000916110f1575b50156110ad576040517f68f1e99a00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff61016051165afa9081156109145760009161105e575b5073ffffffffffffffffffffffffffffffffffffffff8116604051917fb53105a3000000000000000000000000000000000000000000000000000000008352602083600481855afa9283156109145760009361102a575b506040517f5fc8f59c000000000000000000000000000000000000000000000000000000008152602081600481865afa801561091457600061010052610ff6575b506040517f8a0c725b000000000000000000000000000000000000000000000000000000008152602081600481865afa90811561091457600091610fc4575b50604051927f17634514000000000000000000000000000000000000000000000000000000008452602084600481845afa93841561091457600094610f90575b50604051927f9bc66868000000000000000000000000000000000000000000000000000000008452604084600481855afa93841561091457600094610f55575b50604051917f2ed52a7700000000000000000000000000000000000000000000000000000000835260208360048173ffffffffffffffffffffffffffffffffffffffff61016051165afa92831561091457600093610f03575b506020600491604051928380927f2943dcab0000000000000000000000000000000000000000000000000000000082525afa90811561091457600091610ed1575b50604051907f6ad0c85400000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff88165afa90811561091457600091610e9b575b6105b59250612c96565b600254935b84151580610e92575b15610e90578460601c948560005260006020526040600020600181015490610100519054118015610e87575b8015610e76575b610e5b57866000526005602052604060002054805b6106aa5750506000526004602052600160406000200154947f75b7752ab93f69b3f56f714070d5d77bb1be0aa312e598f06a83430230705e1a608060405173ffffffffffffffffffffffffffffffffffffffff610160511681528a60208201526106a4604082018b602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565ba26105ba565b9390989599928460009996989952600160205260406000205497600160406000200154808311600014610e515780610120525b836101205111610e47575b61012051818103610e2757505085600052600160205260006001604082208281550155896000526005602052610722866040600020613243565b6040517fac027f9700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa8015610914578d60209161081e93600091610e0a575b5073ffffffffffffffffffffffffffffffffffffffff6000816107c3610120518d612adb565b94604051978896879586937f095ea7b300000000000000000000000000000000000000000000000000000000855216600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af1801561091457610ddb575b5060005b610120518110156109205773ffffffffffffffffffffffffffffffffffffffff8d163b156101c2578c9060008b60448e8373ffffffffffffffffffffffffffffffffffffffff60405197889586947fc44a916d00000000000000000000000000000000000000000000000000000000865260048601526024850152165af18015610914576108ca575b6108c59150612a40565b610832565b67ffffffffffffffff82116108e5576108c5916040526108bb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040513d6000823e3d90fd5b509a92939894999190959796996109378a84612c96565b80610c54575b50856000526005602052600260406000200190600052602052600160406000200154604051997ff3b6a45d000000000000000000000000000000000000000000000000000000008b5260008b60048173ffffffffffffffffffffffffffffffffffffffff89165afa9a8b156109145760009b610b3e575b508a519c6109c18e612ea2565b6040519e8f916109d1908361251e565b8082526109dd90612ea2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001903690602001378b51608052600060e0525b60805160e05190811015610a4e57610a3a8f91610a2e908f612eba565b51519160e05190612eba565b52610a4660e051612a40565b60e052610a11565b5097959498909c8293979a9b50604051806101405260a08082019173ffffffffffffffffffffffffffffffffffffffff6101605116905260206101405101528151809152602060c061014051019201906000905b808210610b22575050507f55e61a24ecdae954582245e5e611fb06905d6af967334fff4db72793bebc72a9908d6040610140510152610b148d6060610140510190602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565b6101405180910390a261060b565b8251845286955060209384019390920191600190910190610aa2565b909a503d806000833e610b51818361251e565b60208282810103126101c25781519067ffffffffffffffff82116101c257808301601f8385010112156101c2578183015190610b8c82612ea2565b93610b9a604051958661251e565b82855260208501828201602060c086028785010101116101c257602085830101905b602060c0860287850101018210610bda57505050505050998d6109b4565b60c08285850103126101c2576040518060c081011067ffffffffffffffff60c0830111176108e55760c09181836020930160405284518152828501518382015260408501516040820152610c3060608601612881565b60608201526080808601519082015260a08086015190820152815201910190610bbc565b604051907fac027f9700000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa8060c0521561091457602091610d439160009160c051610da8575b5061012051610ce391612adb565b61018090815260405160a08181527fa9059cbb0000000000000000000000000000000000000000000000000000000090915251905173ffffffffffffffffffffffffffffffffffffffff8b16600483015260248201529182906044820190565b0390600073ffffffffffffffffffffffffffffffffffffffff60a05192165af1801561091457610d74575b8c61093d565b60203d602011610da1575b80610d8f610d9b9260a05161251e565b60a05190810190612b6c565b50610d6e565b503d610d7f565b610ce3919250610dcd90853d8711610dd4575b610dc5818361251e565b8101906130ae565b9190610cd5565b503d610dbb565b610dfc9060203d602011610e03575b610df4818361251e565b810190612b6c565b508c61082e565b503d610dea565b610e219150833d8511610dd457610dc5818361251e565b3861079d565b610e3091612c96565b866000526001602052600160406000200155610722565b83610120526106e8565b82610120526106dd565b509094506000526004602052600160406000200154936105ba565b50610e818786612ece565b156105f6565b508981106105ef565b005b508115156105c3565b90506020823d602011610ec9575b81610eb66020938361251e565b810103126101c2576105b59151906105ab565b3d9150610ea9565b90506020813d602011610efb575b81610eec6020938361251e565b810103126101c2575187610555565b3d9150610edf565b9092506020813d602011610f4d575b81610f1f6020938361251e565b810103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c257916020610514565b3d9150610f12565b90935060403d604011610f89575b610f6d818361251e565b81016040828203126101c257610f8291612e50565b92866104bb565b503d610f63565b9093506020813d602011610fbc575b81610fac6020938361251e565b810103126101c25751928561047b565b3d9150610f9f565b90506020813d602011610fee575b81610fdf6020938361251e565b810103126101c257518461043b565b3d9150610fd2565b6020813d602011611022575b8161100f6020938361251e565b810103126101c2575161010052836103fc565b3d9150611002565b9092506020813d602011611056575b816110466020938361251e565b810103126101c2575191836103bb565b3d9150611039565b90506020813d6020116110a5575b816110796020938361251e565b810103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c25781610364565b3d915061106c565b606460405162461bcd60e51b815260206004820152601860248201527f4465616c206973206e6f742066726f6d20666163746f727900000000000000006044820152fd5b61110a915060203d602011610e0357610df4818361251e565b81610307565b90506020813d602011611158575b8161112b6020938361251e565b810103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c25760206102a5565b3d915061111e565b346101c25760406003193601126101c257611179612aac565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911660208083019182526024803590840152916111e681604481015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261251e565b519020903360005260068152604060002082600052815260ff6040600020541661124f57336000526006815260406000209160005252604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055600080f35b6064906040519062461bcd60e51b82526004820152601760248201527f4566666563746f7220616c7265616479206578697374730000000000000000006044820152fd5b346101c25760006003193601126101c257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346101c25760206003193601126101c25773ffffffffffffffffffffffffffffffffffffffff6113126124c3565b166000526007602052602060ff604060002054166040519015158152f35b346101c25760406003193601126101c2576113496124c3565b602435908115158092036101c257604051907f8da5cb5b00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff91602081600481867f0000000000000000000000000000000000000000000000000000000000000000165afa801561091457839060009061141b575b6113dc92501633146128a2565b16600052600760205260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055600080f35b50506020813d821161144f575b816114356020938361251e565b810103126101c2578261144a6113dc92612881565b6113cf565b3d9150611428565b346101c25760206003193601126101c257600435611476811515612913565b61147f33612cee565b55005b346101c25760406003193601126101c25761149b612aac565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911660208083019182526024803590840152916114e081604481016111ba565b5190209033600052600681526040600020826000528152600160ff6040600020541615150361154b5733600052600681526040600020916000525260406000207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055600080f35b6064906040519062461bcd60e51b82526004820152601660248201527f4566666563746f7220646f65736e2774206578697374000000000000000000006044820152fd5b346101c25760406003193601126101c2576115a86124c3565b5060243560005260016020526020600160406000200154604051908152f35b346101c25760206003193601126101c257610e90600435612d27565b346101c25760006003193601126101c25761167461160033612cee565b600281016000815473ffffffffffffffffffffffffffffffffffffffff81169261162b841515612ca3565b7fffffffffffffffffffffffff00000000000000000000000000000000000000006001860192848454948161166660038b0197885490612adb565b995555169055553390612de9565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b168060005260046020526040600020906001604051926116b8846124e6565b80548452015490602083019182526116d0818461331c565b156117305760009081526004602052604081208181556001015581518015611725578151906000526001604060002001555b5190811561171f5751906000526004602052604060002055600080f35b51600355005b508051600255611702565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346101c25760206003193601126101c257608073ffffffffffffffffffffffffffffffffffffffff806117a56124c3565b166000526000602052604060002090815491600360018201549260028301541691015491604051938452602084015260408301526060820152f35b346101c2576117ee36612599565b80156118dd5781600052602091600183526001604060002001548281018091116118ae577f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f9361019d61186a60409585600052600184528460018860002001558085146118995733600052600084526001876000200154612adb565b336000526000835273ffffffffffffffffffffffffffffffffffffffff60028760002001541630903390612aee565b33600052600584526101bd86886000206131d0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b608460405162461bcd60e51b815260206004820152602560248201527f576f726b657220736c6f74732073686f756c642062652067726561746572207460448201527f68616e20300000000000000000000000000000000000000000000000000000006064820152fd5b346101c25760406003193601126101c2576119606124c3565b73ffffffffffffffffffffffffffffffffffffffff908181169182156119f357610e90926119e06119e99261199433612cee565b92600284018054917fffffffffffffffffffffffff000000000000000000000000000000000000000083161790556119d760036001860154950194855490612adb565b91339116612de9565b54602435612adb565b9030903390612aee565b608460405162461bcd60e51b815260206004820152602860248201527f5061796d656e7420746f6b656e2073686f756c64206265206e6f74207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152fd5b346101c25760806003193601126101c25760043560243560443573ffffffffffffffffffffffffffffffffffffffff908181168091036101c2576064359367ffffffffffffffff908186116101c257366023870112156101c2578560040135928284116101c25760248701966006906024369187841b0101116101c257611ae5831515612913565b611af0871515612984565b611afb8215156129f5565b3360005260209360008552611b1a8760026040600020015416156129f5565b6040519060808201908111828210176108e557604097969597528381526003878201898152604083018581526060840191600083523360005260008b5260406000209451855551986001998a860155600285019151167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790555191015560005b848110611c81575050908291611bd87fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166130da565b6040519660a0880192338952878901526040880152606087015260a060808701525260c08401949260005b828110611c32577f658bee377ff55ceae5c8883fc1d0ec604e9179fba1a50f0f094091cefa2eef0486880387a1005b90919293958635907fffffffff0000000000000000000000000000000000000000000000000000000082168092036101c257908152868301358382015260409081019601939291908301611c03565b611c9081868b99979899612a6d565b35907fffffffff00000000000000000000000000000000000000000000000000000000821682036101c257611d58916111ba611d1188611cd2858f8d90612a6d565b01356040519283918b8301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b5190203360005283875260406000209060005286526040600020887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055612a40565b95949395611b9e565b346101c25760006003193601126101c25773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003611dd95760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60406003193601126101c257611e576124c3565b6024359067ffffffffffffffff82116101c257366023830112156101c2578160040135611e838161255f565b92611e91604051948561251e565b8184526020918285019136602483830101116101c25781600092602486930185378601015273ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690611efb823014156125af565b611f2a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614612620565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa80156109145782906000906121d5575b611f9792501633146128a2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611fcf5750505050610e909150612691565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa600091816121a6575b5061207a576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361213c5761208883612691565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590612134575b6120be57005b60008091610e90957f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c604051966120f488612502565b602788528701527f206661696c65640000000000000000000000000000000000000000000000000060408701525190845af461212e612763565b91612793565b5060016120b8565b6084846040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d83116121ce575b6121be818361251e565b810103126101c25751908861200b565b503d6121b4565b50508481813d8311612206575b6121ec818361251e565b810103126101c25781612201611f9792612881565b611f8a565b503d6121e2565b346101c2576020806003193601126101c2576122276124c3565b73ffffffffffffffffffffffffffffffffffffffff91827f0000000000000000000000000000000000000000000000000000000000000000169261226d843014156125af565b61229c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614612620565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528281600481857f0000000000000000000000000000000000000000000000000000000000000000165afa801561091457829060009061248b575b61230992501633146128a2565b604051938285019185831067ffffffffffffffff8411176108e557826040526000865260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354166000146123665750505050610e909150612691565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa6000918161245c575b50612411576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361213c5761241f83612691565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590612454576120be57005b5060006120b8565b9091508681813d8311612484575b612474818361251e565b810103126101c2575190886123a2565b503d61246a565b50508281813d83116124bc575b6124a2818361251e565b810103126101c257816124b761230992612881565b6122fc565b503d612498565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101c257565b6040810190811067ffffffffffffffff8211176108e557604052565b6060810190811067ffffffffffffffff8211176108e557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108e557604052565b67ffffffffffffffff81116108e557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60031960409101126101c2576004359060243590565b156125b657565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561262757565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b156126f95773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d1561278e573d906127748261255f565b91612782604051938461251e565b82523d6000602084013e565b606090565b919290156127f457508151156127a7575090565b3b156127b05790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156128075750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061286a575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201612829565b519073ffffffffffffffffffffffffffffffffffffffff821682036101c257565b156128a957565b608460405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152fd5b1561291a57565b608460405162461bcd60e51b815260206004820152602c60248201527f4d696e207072696365207065722065706f63682073686f756c6420626520677260448201527f6561746572207468616e203000000000000000000000000000000000000000006064820152fd5b1561298b57565b608460405162461bcd60e51b815260206004820152602760248201527f4d617820636f6c6c61746572616c2073686f756c64206265206772656174657260448201527f207468616e2030000000000000000000000000000000000000000000000000006064820152fd5b156129fc57565b606460405162461bcd60e51b815260206004820152601860248201527f436f6d707574652070726f766964657220616c726561647900000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146118ae5760010190565b9190811015612a7d5760061b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6004357fffffffff00000000000000000000000000000000000000000000000000000000811681036101c25790565b818102929181159184041417156118ae57565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff8411176108e557612b6a92604052612b84565b565b908160209103126101c2575180151581036101c25790565b73ffffffffffffffffffffffffffffffffffffffff16604051604081019181831067ffffffffffffffff8411176108e557612bfb926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161212e612763565b805190828215928315612c7e575b50505015612c145750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b612c8e9350820181019101612b6c565b388281612c09565b919082039182116118ae57565b15612caa57565b606460405162461bcd60e51b815260206004820152601e60248201527f436f6d707574652070726f766964657220646f65736e277420657869737400006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff8091166000526000602052612d246040600020916002830154161515612ca3565b90565b612d32811515612984565b612d3b33612cee565b600181019180835493556003820192835480158015612de0575b612dd95782821115612d9d575092612d73612d7b92612b6a95612c96565b905490612adb565b9073ffffffffffffffffffffffffffffffffffffffff60023392015416612de9565b612b6a9450612dcc90612dc760029373ffffffffffffffffffffffffffffffffffffffff95612c96565b612adb565b9201541630903390612aee565b5050505050565b50828214612d55565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff929092166024830152604480830193909352918152612b6a91612e4b60648361251e565b612b84565b91908260409103126101c257604051612e68816124e6565b809280517fffffffff00000000000000000000000000000000000000000000000000000000811681036101c2578252602090810151910152565b67ffffffffffffffff81116108e55760051b60200190565b8051821015612a7d5760209160051b010190565b906040918251927ffc1e5e2a000000000000000000000000000000000000000000000000000000008452600092838560048173ffffffffffffffffffffffffffffffffffffffff8097165afa9485156130a4578495612ff7575b50835b8551811015612fec577fffffffff00000000000000000000000000000000000000000000000000000000612f5f8288612eba565b5151166020906111ba612fb583612f76868c612eba565b5101518751928391868301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b519020908584168752600681528487209187525260ff838620541615612fe357612fde90612a40565b612f2b565b50505050905090565b505050505050600190565b9094503d8085833e613009818361251e565b810190602090818184031261309c5780519067ffffffffffffffff82116130a057019082601f8301121561309c57815161304281612ea2565b9361304f8651958661251e565b818552828086019260061b850101938185116130985783879101925b85841061307f575050505050509338612f28565b849061308b8486612e50565b815201920191869061306b565b8880fd5b8580fd5b8680fd5b82513d86823e3d90fd5b908160209103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c25790565b600354811561318c5760009082825260046020526131158360408420600160405191613105836124e6565b805483520154602082015261331c565b61314857801561313d5760019160409184600355848252600460205280838320558152200155565b505080600255600355565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b60018101908154831561318c5760028201600092858452816020526132138660408620600160405191613202836124e6565b80548352015460208201528361335e565b613148578590831561323c57509060409392916001955585835260205280838320558152200155565b5550505055565b906002820160009082825280602052604092838320906001855192613267846124e6565b805484520154906020830191825261328081848961335e565b156132d95784526020839052848420848155600101849055815180156132cf578151908552600186862001555b519485156132c15750519382526020522055565b905160019091015550505050565b50805186556132ad565b6064865162461bcd60e51b815260206004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b9081511591821592613350575b508115613344575b811561333b575090565b90506003541490565b60025481149150613331565b602001511515915038613329565b8151158015939290613393575b508215613388575b821561337e57505090565b6001015414919050565b805482149250613373565b60200151151592503861336b56fea26469706673582212207d3deafcbe03885e67d241f5449bcbfb53ec466c5726e57ca53af9c96704b6ba64736f6c63430008110033",
  "deployedBytecode": "0x6101a0604052600436101561001357600080fd5b60003560e01c80633659cfe61461220d5780634f1ef28614611e4357806352d1902d14611d6157806355eb409a14611a5d578063571458481461194757806359a6bf5f146117e05780635a733e9b146117745780635c768997146115e35780636868bda3146115c75780636b50b7a71461158f57806373e8f7e9146114825780637f178450146114575780638d14e127146113305780639b19251a146112e4578063a7c1abe014611293578063b63af4b114611160578063c6c44ed1146101fc578063c94be829146101c75763f6ee7139146100ee57600080fd5b346101c2577f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f604061011f36612599565b8160005260206001815261019d61016e610140846001886000200154612c96565b93856000526001845284600188600020015584156101a8575b33600052600084526001876000200154612adb565b336000526000835273ffffffffffffffffffffffffffffffffffffffff60028760002001541633903090612aee565b8351928352820152a1005b33600052600584526101bd8688600020613243565b610159565b600080fd5b346101c25760206003193601126101c25760043560005260016020526040806000206001815491015482519182526020820152f35b346101c25760206003193601126101c257600435806101605273ffffffffffffffffffffffffffffffffffffffff8116036101c2576040517fc45a015500000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561091457600091611110575b50602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f4db44e640000000000000000000000000000000000000000000000000000000083528161016051166004840152165afa908115610914576000916110f1575b50156110ad576040517f68f1e99a00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff61016051165afa9081156109145760009161105e575b5073ffffffffffffffffffffffffffffffffffffffff8116604051917fb53105a3000000000000000000000000000000000000000000000000000000008352602083600481855afa9283156109145760009361102a575b506040517f5fc8f59c000000000000000000000000000000000000000000000000000000008152602081600481865afa801561091457600061010052610ff6575b506040517f8a0c725b000000000000000000000000000000000000000000000000000000008152602081600481865afa90811561091457600091610fc4575b50604051927f17634514000000000000000000000000000000000000000000000000000000008452602084600481845afa93841561091457600094610f90575b50604051927f9bc66868000000000000000000000000000000000000000000000000000000008452604084600481855afa93841561091457600094610f55575b50604051917f2ed52a7700000000000000000000000000000000000000000000000000000000835260208360048173ffffffffffffffffffffffffffffffffffffffff61016051165afa92831561091457600093610f03575b506020600491604051928380927f2943dcab0000000000000000000000000000000000000000000000000000000082525afa90811561091457600091610ed1575b50604051907f6ad0c85400000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff88165afa90811561091457600091610e9b575b6105b59250612c96565b600254935b84151580610e92575b15610e90578460601c948560005260006020526040600020600181015490610100519054118015610e87575b8015610e76575b610e5b57866000526005602052604060002054805b6106aa5750506000526004602052600160406000200154947f75b7752ab93f69b3f56f714070d5d77bb1be0aa312e598f06a83430230705e1a608060405173ffffffffffffffffffffffffffffffffffffffff610160511681528a60208201526106a4604082018b602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565ba26105ba565b9390989599928460009996989952600160205260406000205497600160406000200154808311600014610e515780610120525b836101205111610e47575b61012051818103610e2757505085600052600160205260006001604082208281550155896000526005602052610722866040600020613243565b6040517fac027f9700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa8015610914578d60209161081e93600091610e0a575b5073ffffffffffffffffffffffffffffffffffffffff6000816107c3610120518d612adb565b94604051978896879586937f095ea7b300000000000000000000000000000000000000000000000000000000855216600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af1801561091457610ddb575b5060005b610120518110156109205773ffffffffffffffffffffffffffffffffffffffff8d163b156101c2578c9060008b60448e8373ffffffffffffffffffffffffffffffffffffffff60405197889586947fc44a916d00000000000000000000000000000000000000000000000000000000865260048601526024850152165af18015610914576108ca575b6108c59150612a40565b610832565b67ffffffffffffffff82116108e5576108c5916040526108bb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040513d6000823e3d90fd5b509a92939894999190959796996109378a84612c96565b80610c54575b50856000526005602052600260406000200190600052602052600160406000200154604051997ff3b6a45d000000000000000000000000000000000000000000000000000000008b5260008b60048173ffffffffffffffffffffffffffffffffffffffff89165afa9a8b156109145760009b610b3e575b508a519c6109c18e612ea2565b6040519e8f916109d1908361251e565b8082526109dd90612ea2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001903690602001378b51608052600060e0525b60805160e05190811015610a4e57610a3a8f91610a2e908f612eba565b51519160e05190612eba565b52610a4660e051612a40565b60e052610a11565b5097959498909c8293979a9b50604051806101405260a08082019173ffffffffffffffffffffffffffffffffffffffff6101605116905260206101405101528151809152602060c061014051019201906000905b808210610b22575050507f55e61a24ecdae954582245e5e611fb06905d6af967334fff4db72793bebc72a9908d6040610140510152610b148d6060610140510190602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565b6101405180910390a261060b565b8251845286955060209384019390920191600190910190610aa2565b909a503d806000833e610b51818361251e565b60208282810103126101c25781519067ffffffffffffffff82116101c257808301601f8385010112156101c2578183015190610b8c82612ea2565b93610b9a604051958661251e565b82855260208501828201602060c086028785010101116101c257602085830101905b602060c0860287850101018210610bda57505050505050998d6109b4565b60c08285850103126101c2576040518060c081011067ffffffffffffffff60c0830111176108e55760c09181836020930160405284518152828501518382015260408501516040820152610c3060608601612881565b60608201526080808601519082015260a08086015190820152815201910190610bbc565b604051907fac027f9700000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa8060c0521561091457602091610d439160009160c051610da8575b5061012051610ce391612adb565b61018090815260405160a08181527fa9059cbb0000000000000000000000000000000000000000000000000000000090915251905173ffffffffffffffffffffffffffffffffffffffff8b16600483015260248201529182906044820190565b0390600073ffffffffffffffffffffffffffffffffffffffff60a05192165af1801561091457610d74575b8c61093d565b60203d602011610da1575b80610d8f610d9b9260a05161251e565b60a05190810190612b6c565b50610d6e565b503d610d7f565b610ce3919250610dcd90853d8711610dd4575b610dc5818361251e565b8101906130ae565b9190610cd5565b503d610dbb565b610dfc9060203d602011610e03575b610df4818361251e565b810190612b6c565b508c61082e565b503d610dea565b610e219150833d8511610dd457610dc5818361251e565b3861079d565b610e3091612c96565b866000526001602052600160406000200155610722565b83610120526106e8565b82610120526106dd565b509094506000526004602052600160406000200154936105ba565b50610e818786612ece565b156105f6565b508981106105ef565b005b508115156105c3565b90506020823d602011610ec9575b81610eb66020938361251e565b810103126101c2576105b59151906105ab565b3d9150610ea9565b90506020813d602011610efb575b81610eec6020938361251e565b810103126101c2575187610555565b3d9150610edf565b9092506020813d602011610f4d575b81610f1f6020938361251e565b810103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c257916020610514565b3d9150610f12565b90935060403d604011610f89575b610f6d818361251e565b81016040828203126101c257610f8291612e50565b92866104bb565b503d610f63565b9093506020813d602011610fbc575b81610fac6020938361251e565b810103126101c25751928561047b565b3d9150610f9f565b90506020813d602011610fee575b81610fdf6020938361251e565b810103126101c257518461043b565b3d9150610fd2565b6020813d602011611022575b8161100f6020938361251e565b810103126101c2575161010052836103fc565b3d9150611002565b9092506020813d602011611056575b816110466020938361251e565b810103126101c2575191836103bb565b3d9150611039565b90506020813d6020116110a5575b816110796020938361251e565b810103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c25781610364565b3d915061106c565b606460405162461bcd60e51b815260206004820152601860248201527f4465616c206973206e6f742066726f6d20666163746f727900000000000000006044820152fd5b61110a915060203d602011610e0357610df4818361251e565b81610307565b90506020813d602011611158575b8161112b6020938361251e565b810103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c25760206102a5565b3d915061111e565b346101c25760406003193601126101c257611179612aac565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911660208083019182526024803590840152916111e681604481015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261251e565b519020903360005260068152604060002082600052815260ff6040600020541661124f57336000526006815260406000209160005252604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055600080f35b6064906040519062461bcd60e51b82526004820152601760248201527f4566666563746f7220616c7265616479206578697374730000000000000000006044820152fd5b346101c25760006003193601126101c257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346101c25760206003193601126101c25773ffffffffffffffffffffffffffffffffffffffff6113126124c3565b166000526007602052602060ff604060002054166040519015158152f35b346101c25760406003193601126101c2576113496124c3565b602435908115158092036101c257604051907f8da5cb5b00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff91602081600481867f0000000000000000000000000000000000000000000000000000000000000000165afa801561091457839060009061141b575b6113dc92501633146128a2565b16600052600760205260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055600080f35b50506020813d821161144f575b816114356020938361251e565b810103126101c2578261144a6113dc92612881565b6113cf565b3d9150611428565b346101c25760206003193601126101c257600435611476811515612913565b61147f33612cee565b55005b346101c25760406003193601126101c25761149b612aac565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911660208083019182526024803590840152916114e081604481016111ba565b5190209033600052600681526040600020826000528152600160ff6040600020541615150361154b5733600052600681526040600020916000525260406000207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055600080f35b6064906040519062461bcd60e51b82526004820152601660248201527f4566666563746f7220646f65736e2774206578697374000000000000000000006044820152fd5b346101c25760406003193601126101c2576115a86124c3565b5060243560005260016020526020600160406000200154604051908152f35b346101c25760206003193601126101c257610e90600435612d27565b346101c25760006003193601126101c25761167461160033612cee565b600281016000815473ffffffffffffffffffffffffffffffffffffffff81169261162b841515612ca3565b7fffffffffffffffffffffffff00000000000000000000000000000000000000006001860192848454948161166660038b0197885490612adb565b995555169055553390612de9565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b168060005260046020526040600020906001604051926116b8846124e6565b80548452015490602083019182526116d0818461331c565b156117305760009081526004602052604081208181556001015581518015611725578151906000526001604060002001555b5190811561171f5751906000526004602052604060002055600080f35b51600355005b508051600255611702565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346101c25760206003193601126101c257608073ffffffffffffffffffffffffffffffffffffffff806117a56124c3565b166000526000602052604060002090815491600360018201549260028301541691015491604051938452602084015260408301526060820152f35b346101c2576117ee36612599565b80156118dd5781600052602091600183526001604060002001548281018091116118ae577f1eaffb28f02e49aa8dce586ac73116a047f91a8116d887ed4e72496a2f10283f9361019d61186a60409585600052600184528460018860002001558085146118995733600052600084526001876000200154612adb565b336000526000835273ffffffffffffffffffffffffffffffffffffffff60028760002001541630903390612aee565b33600052600584526101bd86886000206131d0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b608460405162461bcd60e51b815260206004820152602560248201527f576f726b657220736c6f74732073686f756c642062652067726561746572207460448201527f68616e20300000000000000000000000000000000000000000000000000000006064820152fd5b346101c25760406003193601126101c2576119606124c3565b73ffffffffffffffffffffffffffffffffffffffff908181169182156119f357610e90926119e06119e99261199433612cee565b92600284018054917fffffffffffffffffffffffff000000000000000000000000000000000000000083161790556119d760036001860154950194855490612adb565b91339116612de9565b54602435612adb565b9030903390612aee565b608460405162461bcd60e51b815260206004820152602860248201527f5061796d656e7420746f6b656e2073686f756c64206265206e6f74207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152fd5b346101c25760806003193601126101c25760043560243560443573ffffffffffffffffffffffffffffffffffffffff908181168091036101c2576064359367ffffffffffffffff908186116101c257366023870112156101c2578560040135928284116101c25760248701966006906024369187841b0101116101c257611ae5831515612913565b611af0871515612984565b611afb8215156129f5565b3360005260209360008552611b1a8760026040600020015416156129f5565b6040519060808201908111828210176108e557604097969597528381526003878201898152604083018581526060840191600083523360005260008b5260406000209451855551986001998a860155600285019151167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790555191015560005b848110611c81575050908291611bd87fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b166130da565b6040519660a0880192338952878901526040880152606087015260a060808701525260c08401949260005b828110611c32577f658bee377ff55ceae5c8883fc1d0ec604e9179fba1a50f0f094091cefa2eef0486880387a1005b90919293958635907fffffffff0000000000000000000000000000000000000000000000000000000082168092036101c257908152868301358382015260409081019601939291908301611c03565b611c9081868b99979899612a6d565b35907fffffffff00000000000000000000000000000000000000000000000000000000821682036101c257611d58916111ba611d1188611cd2858f8d90612a6d565b01356040519283918b8301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b5190203360005283875260406000209060005286526040600020887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055612a40565b95949395611b9e565b346101c25760006003193601126101c25773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003611dd95760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60406003193601126101c257611e576124c3565b6024359067ffffffffffffffff82116101c257366023830112156101c2578160040135611e838161255f565b92611e91604051948561251e565b8184526020918285019136602483830101116101c25781600092602486930185378601015273ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690611efb823014156125af565b611f2a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614612620565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa80156109145782906000906121d5575b611f9792501633146128a2565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611fcf5750505050610e909150612691565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa600091816121a6575b5061207a576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361213c5761208883612691565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590612134575b6120be57005b60008091610e90957f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c604051966120f488612502565b602788528701527f206661696c65640000000000000000000000000000000000000000000000000060408701525190845af461212e612763565b91612793565b5060016120b8565b6084846040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d83116121ce575b6121be818361251e565b810103126101c25751908861200b565b503d6121b4565b50508481813d8311612206575b6121ec818361251e565b810103126101c25781612201611f9792612881565b611f8a565b503d6121e2565b346101c2576020806003193601126101c2576122276124c3565b73ffffffffffffffffffffffffffffffffffffffff91827f0000000000000000000000000000000000000000000000000000000000000000169261226d843014156125af565b61229c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614612620565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528281600481857f0000000000000000000000000000000000000000000000000000000000000000165afa801561091457829060009061248b575b61230992501633146128a2565b604051938285019185831067ffffffffffffffff8411176108e557826040526000865260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354166000146123665750505050610e909150612691565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa6000918161245c575b50612411576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b0361213c5761241f83612691565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590612454576120be57005b5060006120b8565b9091508681813d8311612484575b612474818361251e565b810103126101c2575190886123a2565b503d61246a565b50508281813d83116124bc575b6124a2818361251e565b810103126101c257816124b761230992612881565b6122fc565b503d612498565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036101c257565b6040810190811067ffffffffffffffff8211176108e557604052565b6060810190811067ffffffffffffffff8211176108e557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108e557604052565b67ffffffffffffffff81116108e557601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60031960409101126101c2576004359060243590565b156125b657565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561262757565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b156126f95773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d1561278e573d906127748261255f565b91612782604051938461251e565b82523d6000602084013e565b606090565b919290156127f457508151156127a7575090565b3b156127b05790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156128075750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061286a575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201612829565b519073ffffffffffffffffffffffffffffffffffffffff821682036101c257565b156128a957565b608460405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152fd5b1561291a57565b608460405162461bcd60e51b815260206004820152602c60248201527f4d696e207072696365207065722065706f63682073686f756c6420626520677260448201527f6561746572207468616e203000000000000000000000000000000000000000006064820152fd5b1561298b57565b608460405162461bcd60e51b815260206004820152602760248201527f4d617820636f6c6c61746572616c2073686f756c64206265206772656174657260448201527f207468616e2030000000000000000000000000000000000000000000000000006064820152fd5b156129fc57565b606460405162461bcd60e51b815260206004820152601860248201527f436f6d707574652070726f766964657220616c726561647900000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146118ae5760010190565b9190811015612a7d5760061b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6004357fffffffff00000000000000000000000000000000000000000000000000000000811681036101c25790565b818102929181159184041417156118ae57565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff8411176108e557612b6a92604052612b84565b565b908160209103126101c2575180151581036101c25790565b73ffffffffffffffffffffffffffffffffffffffff16604051604081019181831067ffffffffffffffff8411176108e557612bfb926040526000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161212e612763565b805190828215928315612c7e575b50505015612c145750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b612c8e9350820181019101612b6c565b388281612c09565b919082039182116118ae57565b15612caa57565b606460405162461bcd60e51b815260206004820152601e60248201527f436f6d707574652070726f766964657220646f65736e277420657869737400006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff8091166000526000602052612d246040600020916002830154161515612ca3565b90565b612d32811515612984565b612d3b33612cee565b600181019180835493556003820192835480158015612de0575b612dd95782821115612d9d575092612d73612d7b92612b6a95612c96565b905490612adb565b9073ffffffffffffffffffffffffffffffffffffffff60023392015416612de9565b612b6a9450612dcc90612dc760029373ffffffffffffffffffffffffffffffffffffffff95612c96565b612adb565b9201541630903390612aee565b5050505050565b50828214612d55565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff929092166024830152604480830193909352918152612b6a91612e4b60648361251e565b612b84565b91908260409103126101c257604051612e68816124e6565b809280517fffffffff00000000000000000000000000000000000000000000000000000000811681036101c2578252602090810151910152565b67ffffffffffffffff81116108e55760051b60200190565b8051821015612a7d5760209160051b010190565b906040918251927ffc1e5e2a000000000000000000000000000000000000000000000000000000008452600092838560048173ffffffffffffffffffffffffffffffffffffffff8097165afa9485156130a4578495612ff7575b50835b8551811015612fec577fffffffff00000000000000000000000000000000000000000000000000000000612f5f8288612eba565b5151166020906111ba612fb583612f76868c612eba565b5101518751928391868301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b519020908584168752600681528487209187525260ff838620541615612fe357612fde90612a40565b612f2b565b50505050905090565b505050505050600190565b9094503d8085833e613009818361251e565b810190602090818184031261309c5780519067ffffffffffffffff82116130a057019082601f8301121561309c57815161304281612ea2565b9361304f8651958661251e565b818552828086019260061b850101938185116130985783879101925b85841061307f575050505050509338612f28565b849061308b8486612e50565b815201920191869061306b565b8880fd5b8580fd5b8680fd5b82513d86823e3d90fd5b908160209103126101c2575173ffffffffffffffffffffffffffffffffffffffff811681036101c25790565b600354811561318c5760009082825260046020526131158360408420600160405191613105836124e6565b805483520154602082015261331c565b61314857801561313d5760019160409184600355848252600460205280838320558152200155565b505080600255600355565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b60018101908154831561318c5760028201600092858452816020526132138660408620600160405191613202836124e6565b80548352015460208201528361335e565b613148578590831561323c57509060409392916001955585835260205280838320558152200155565b5550505055565b906002820160009082825280602052604092838320906001855192613267846124e6565b805484520154906020830191825261328081848961335e565b156132d95784526020839052848420848155600101849055815180156132cf578151908552600186862001555b519485156132c15750519382526020522055565b905160019091015550505050565b50805186556132ad565b6064865162461bcd60e51b815260206004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b9081511591821592613350575b508115613344575b811561333b575090565b90506003541490565b60025481149150613331565b602001511515915038613329565b8151158015939290613393575b508215613388575b821561337e57505090565b6001015414919050565b805482149250613373565b60200151151592503861336b56fea26469706673582212207d3deafcbe03885e67d241f5449bcbfb53ec466c5726e57ca53af9c96704b6ba64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8772,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "computeProviderByOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(ComputeProvider)8713_storage)"
      },
      {
        "astId": 8777,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "computePeerByPeerIdHash",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(ComputePeer)8718_storage)"
      },
      {
        "astId": 8780,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_computeProvidersList",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Bytes32List)10237_storage"
      },
      {
        "astId": 8785,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_computePeersListByProvider",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Bytes32List)10237_storage)"
      },
      {
        "astId": 8791,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_effectorsByComputePeerOwner",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 8795,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "whitelist",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 503,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_initialized",
        "offset": 0,
        "slot": "8",
        "type": "t_uint8"
      },
      {
        "astId": 506,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_initializing",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 485,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "__gap",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "__gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2611": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(Bytes32List)10237_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LinkedList.Bytes32List)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32List)10237_storage"
      },
      "t_mapping(t_address,t_struct(ComputeProvider)8713_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MatcherState.ComputeProvider)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeProvider)8713_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(ComputePeer)8718_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MatcherState.ComputePeer)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputePeer)8718_storage"
      },
      "t_mapping(t_bytes32,t_struct(Element)10227_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedList.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)10227_storage"
      },
      "t_struct(Bytes32List)10237_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Bytes32List",
        "members": [
          {
            "astId": 10229,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "_first",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10231,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "_last",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10236,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "_elements",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(Element)10227_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ComputePeer)8718_storage": {
        "encoding": "inplace",
        "label": "struct MatcherState.ComputePeer",
        "members": [
          {
            "astId": 8715,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "peerId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8717,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "freeWorkerSlots",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ComputeProvider)8713_storage": {
        "encoding": "inplace",
        "label": "struct MatcherState.ComputeProvider",
        "members": [
          {
            "astId": 8705,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "minPricePerEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8707,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "maxCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8710,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "paymentToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)2611"
          },
          {
            "astId": 8712,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "totalFreeWorkerSlots",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Element)10227_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Element",
        "members": [
          {
            "astId": 10224,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10226,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}