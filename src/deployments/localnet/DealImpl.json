{
  "address": "0x79EeA23C90e7D142D903833AB6F835aC06cCbAce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGlobalCore",
          "name": "globalCore_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "newAppCID",
          "type": "tuple"
        }
      ],
      "name": "AppCIDChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ComputeUnitCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ComputeUnitRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endedEpoch",
          "type": "uint256"
        }
      ],
      "name": "DealEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPaidEpoch",
          "type": "uint256"
        }
      ],
      "name": "MaxPaidEpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "WorkerIdUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "lastWorkedEpoch",
          "type": "uint256"
        }
      ],
      "name": "_removeComputeUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "workerCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessType",
      "outputs": [
        {
          "internalType": "enum IConfig.AccessType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appCID",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IConfig.AccessType",
          "name": "accessType_",
          "type": "uint8"
        }
      ],
      "name": "changeAccessType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPerWorker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        }
      ],
      "name": "createComputeUnit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effectors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fluenceToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccessList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getComputeUnit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWorkerManager.ComputeUnit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getComputeUnitCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getComputeUnits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWorkerManager.ComputeUnit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFreeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPaidEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "getRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum IDeal.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "getUnlockCollateralEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWorkerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        }
      ],
      "name": "hasPeer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "appCID_",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20",
          "name": "paymentToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralPerWorker_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWorkers_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetWorkers_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWorkersPerProvider_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerWorkerEpoch_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1[]",
          "name": "effectors_",
          "type": "tuple[]"
        },
        {
          "internalType": "enum IConfig.AccessType",
          "name": "accessType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "accessList_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isInAccessList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWorkersPerProvider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWorkers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerWorkerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "removeComputeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeFromAccessList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1",
          "name": "appCID_",
          "type": "tuple"
        }
      ],
      "name": "setAppCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "setWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetWorkers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "computeUnitId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb48227306dfca92ab59169e04dbc8b2ec1bf1ff0cb36c0abb323b5218d10d75",
  "receipt": {
    "to": null,
    "from": "0x627e730fd1361E6FFcee236DAc08F82EAa8ac7cD",
    "contractAddress": "0x79EeA23C90e7D142D903833AB6F835aC06cCbAce",
    "transactionIndex": 0,
    "gasUsed": "4309420",
    "logsBloom": "0x
    "blockHash": "0xc2f7c29ede2cd46fccee99b5ba50c64a3e4c45ddf207e088948e2ab46d8205be",
    "transactionHash": "0xdb48227306dfca92ab59169e04dbc8b2ec1bf1ff0cb36c0abb323b5218d10d75",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 54,
        "transactionHash": "0xdb48227306dfca92ab59169e04dbc8b2ec1bf1ff0cb36c0abb323b5218d10d75",
        "address": "0x79EeA23C90e7D142D903833AB6F835aC06cCbAce",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xc2f7c29ede2cd46fccee99b5ba50c64a3e4c45ddf207e088948e2ab46d8205be"
      }
    ],
    "blockNumber": 54,
    "cumulativeGasUsed": "4309420",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xea6777e8c011E7968605fd012A9Dd49401ec386C"
  ],
  "numDeployments": 1,
  "solcInputHash": "b515736a5cbcd5173b0e1e2ce796a27d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGlobalCore\",\"name\":\"globalCore_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"newAppCID\",\"type\":\"tuple\"}],\"name\":\"AppCIDChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ComputeUnitCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ComputeUnitRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endedEpoch\",\"type\":\"uint256\"}],\"name\":\"DealEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPaidEpoch\",\"type\":\"uint256\"}],\"name\":\"MaxPaidEpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"WorkerIdUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastWorkedEpoch\",\"type\":\"uint256\"}],\"name\":\"_removeComputeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"workerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessType\",\"outputs\":[{\"internalType\":\"enum IConfig.AccessType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appCID\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IConfig.AccessType\",\"name\":\"accessType_\",\"type\":\"uint8\"}],\"name\":\"changeAccessType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPerWorker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"}],\"name\":\"createComputeUnit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectors\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fluenceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getComputeUnit\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct IWorkerManager.ComputeUnit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComputeUnitCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getComputeUnits\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct IWorkerManager.ComputeUnit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPaidEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum IDeal.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"getUnlockCollateralEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorkerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"}],\"name\":\"hasPeer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"appCID_\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerWorker_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWorkers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetWorkers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWorkersPerProvider_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerWorkerEpoch_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors_\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IConfig.AccessType\",\"name\":\"accessType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"accessList_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isInAccessList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWorkersPerProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWorkers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerWorkerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"removeComputeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeFromAccessList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1\",\"name\":\"appCID_\",\"type\":\"tuple\"}],\"name\":\"setAppCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetWorkers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"computeUnitId\",\"type\":\"bytes32\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deal/Deal.sol\":\"Deal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/Config.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/LinkedListWithUniqueKeys.sol\\\";\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"../global/interfaces/IGlobalCore.sol\\\";\\nimport \\\"../utils/OwnableUpgradableDiamond.sol\\\";\\n\\ncontract Config is UUPSUpgradeable, OwnableUpgradableDiamond, IConfig {\\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\\n\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.deal.storage.v1.config\\\")) - 1);\\n\\n    struct ConfigStorage {\\n        uint256 creationBlock;\\n        CIDV1 appCID;\\n        // --- deal config ---\\n        IERC20 paymentToken;\\n        uint256 collateralPerWorker;\\n        uint256 minWorkers;\\n        uint256 targetWorkers;\\n        uint256 maxWorkersPerProvider;\\n        uint256 pricePerWorkerEpoch;\\n        CIDV1[] effectors;\\n        // --- access ---\\n        AccessType accessType;\\n        LinkedListWithUniqueKeys.Bytes32List accessList;\\n    }\\n\\n    ConfigStorage private _storage;\\n\\n    function _getConfigStorage() private pure returns (ConfigStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Immutable ------------------\\n    IERC20 private immutable _fluenceToken;\\n    IGlobalCore private immutable _globalCore_;\\n\\n    // ------------------ Constructor ------------------\\n    // @custom:oz-upgrades-unsafe-allow state-variable-immutable constructor\\n    constructor(IGlobalCore globalCore_) {\\n        _globalCore_ = globalCore_;\\n        _fluenceToken = globalCore_.fluenceToken();\\n    }\\n\\n    // ------------------ Initializer ------------------\\n    function __Config_init(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        AccessType accessType_,\\n        address[] calldata accessList_,\\n        address owner_\\n    ) internal onlyInitializing {\\n        __Ownable_init(owner_);\\n\\n        __Config_init_unchained(\\n            paymentToken_,\\n            collateralPerWorker_,\\n            minWorkers_,\\n            targetWorkers_,\\n            maxWorkersPerProvider_,\\n            pricePerWorkerEpoch_,\\n            effectors_,\\n            accessType_,\\n            accessList_\\n        );\\n\\n        _setAppCID(appCID_);\\n    }\\n\\n    function __Config_init_unchained(\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        AccessType accessType_,\\n        address[] calldata accessList_\\n    ) internal onlyInitializing {\\n        ConfigStorage storage configStorage = _getConfigStorage();\\n\\n        configStorage.creationBlock = block.number;\\n\\n        // --- init deal config ---\\n        configStorage.paymentToken = paymentToken_;\\n        configStorage.collateralPerWorker = collateralPerWorker_;\\n        configStorage.minWorkers = minWorkers_;\\n        configStorage.targetWorkers = targetWorkers_;\\n        configStorage.maxWorkersPerProvider = maxWorkersPerProvider_;\\n        configStorage.pricePerWorkerEpoch = pricePerWorkerEpoch_;\\n\\n        for (uint256 i = 0; i < effectors_.length; i++) {\\n            configStorage.effectors.push(effectors_[i]);\\n        }\\n\\n        configStorage.accessType = accessType_;\\n\\n        for (uint256 i = 0; i < accessList_.length; i++) {\\n            configStorage.accessList.push(bytes32(bytes20(accessList_[i])));\\n        }\\n    }\\n\\n    // ------------------ View Internal Functions ------------------\\n    function _globalCore() internal view returns (IGlobalCore) {\\n        return _globalCore_;\\n    }\\n\\n    // ------------------ Mutable Internal Functions ------------------\\n    function _setAppCID(CIDV1 calldata appCID_) internal {\\n        _getConfigStorage().appCID = appCID_;\\n\\n        emit AppCIDChanged(appCID_);\\n    }\\n\\n    // ------------------ View Functions ---------------------\\n    function paymentToken() public view returns (IERC20) {\\n        return _getConfigStorage().paymentToken;\\n    }\\n\\n    function fluenceToken() public view returns (IERC20) {\\n        return _fluenceToken;\\n    }\\n\\n    function creationBlock() public view returns (uint256) {\\n        return _getConfigStorage().creationBlock;\\n    }\\n\\n    function pricePerWorkerEpoch() public view returns (uint256) {\\n        return _getConfigStorage().pricePerWorkerEpoch;\\n    }\\n\\n    function targetWorkers() public view returns (uint256) {\\n        return _getConfigStorage().targetWorkers;\\n    }\\n\\n    function collateralPerWorker() public view returns (uint256) {\\n        return _getConfigStorage().collateralPerWorker;\\n    }\\n\\n    function minWorkers() public view returns (uint256) {\\n        return _getConfigStorage().minWorkers;\\n    }\\n\\n    function effectors() public view returns (CIDV1[] memory) {\\n        return _getConfigStorage().effectors;\\n    }\\n\\n    function accessType() public view returns (AccessType) {\\n        return _getConfigStorage().accessType;\\n    }\\n\\n    function isInAccessList(address addr) public view returns (bool) {\\n        return _getConfigStorage().accessList.has(bytes32(bytes20(addr)));\\n    }\\n\\n    function getAccessList() public view returns (address[] memory) {\\n        bytes32[] memory result = _getConfigStorage().accessList.toArray();\\n\\n        /*\\n        TODO: mv to assembly\\n        uint256 length = result.length;\\n        assembly (\\\"memory-safe\\\") {\\n            return(result, mul(length, 32))\\n        }*/\\n\\n        address[] memory result2 = new address[](result.length);\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result2[i] = address(bytes20(result[i]));\\n        }\\n\\n        return result2;\\n    }\\n\\n    function appCID() external view returns (CIDV1 memory) {\\n        return _getConfigStorage().appCID;\\n    }\\n\\n    function maxWorkersPerProvider() public view returns (uint256) {\\n        return _getConfigStorage().maxWorkersPerProvider;\\n    }\\n\\n    // ------------------ Mutable Functions ------------------\\n    function setAppCID(CIDV1 calldata appCID_) public onlyOwner {\\n        _setAppCID(appCID_);\\n    }\\n\\n    function changeAccessType(AccessType accessType_) external onlyOwner {\\n        _getConfigStorage().accessType = accessType_;\\n    }\\n\\n    function removeFromAccessList(address addr) external onlyOwner {\\n        _getConfigStorage().accessList.remove(bytes32(bytes20(addr)));\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x15fba1a896390c659b206dc722a26485fe5c48361acae09ea7ce567fc1a79e36\",\"license\":\"Apache-2.0\"},\"contracts/deal/Deal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./DealStorageUtils.sol\\\";\\nimport \\\"./WorkerManager.sol\\\";\\nimport \\\"./interfaces/IDeal.sol\\\";\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"../global/interfaces/IGlobalCore.sol\\\";\\nimport \\\"../utils/OwnableUpgradableDiamond.sol\\\";\\n\\ncontract Deal is WorkerManager, IDeal {\\n    using BitMaps for BitMaps.BitMap;\\n    using SafeERC20 for IERC20;\\n    using DealStorageUtils for DealStorageUtils.Balance;\\n\\n    // ------------------ Constants ------------------\\n    uint256 private constant _MIN_DPOSITED_EPOCHS = 2;\\n    uint256 private constant _WAIT_EPOCHS_AFTER_ENDING = 2;\\n\\n    // ------------------ Types ------------------\\n    struct ComputeUnitPaymentInfo {\\n        uint256 startedEpoch;\\n        uint256 gapsDelta;\\n    }\\n\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.deal.storage.v1.deal\\\")) - 1);\\n\\n    struct DealStorage {\\n        uint totalBalance;\\n        uint lockedBalance;\\n        uint gapsEpochCount;\\n        uint256 maxPaidEpoch;\\n        uint256 lastCommitedEpoch;\\n        mapping(bytes32 => ComputeUnitPaymentInfo) cUnitPaymentInfo;\\n        bool isEnded;\\n        uint endedEpoch;\\n    }\\n\\n    DealStorage private _storage;\\n\\n    function _getDealStorage() private pure returns (DealStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Constructor ---------------------\\n    constructor(IGlobalCore globalCore_) Config(globalCore_) {\\n        _disableInitializers();\\n    }\\n\\n    // ------------------ Init ------------------\\n    function initialize(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IConfig.AccessType accessType_,\\n        address[] calldata accessList_\\n    ) public initializer {\\n        __Config_init(\\n            appCID_,\\n            paymentToken_,\\n            collateralPerWorker_,\\n            minWorkers_,\\n            targetWorkers_,\\n            maxWorkersPerProvider_,\\n            pricePerWorkerEpoch_,\\n            effectors_,\\n            accessType_,\\n            accessList_,\\n            msg.sender\\n        );\\n    }\\n\\n    // ------------------ Privat Functions ------------------\\n    function _calculateMaxPaidEpoch(\\n        uint currentEpoch,\\n        uint totalBalance,\\n        uint pricePerWorkerEpoch_,\\n        uint workerCount\\n    ) private pure returns (uint256) {\\n        return currentEpoch + totalBalance / (pricePerWorkerEpoch_ * workerCount);\\n    }\\n\\n    function _preCommitPeriod(\\n        DealStorageUtils.Balance memory balance,\\n        uint currentEpoch,\\n        uint maxPaidEpoch,\\n        uint lastCommitedEpoch,\\n        uint currentWorkerCount,\\n        uint pricePerWorkerEpoch_\\n    ) private pure {\\n        if (maxPaidEpoch != 0 && currentEpoch > maxPaidEpoch && maxPaidEpoch > lastCommitedEpoch) {\\n            uint amount = (maxPaidEpoch - lastCommitedEpoch) * pricePerWorkerEpoch_ * currentWorkerCount;\\n\\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\\n            balance.setLockedBalance(balance.getLockedBalance() + amount);\\n            balance.setGapsEpochCount(balance.getGapsEpochCount() + (currentEpoch - maxPaidEpoch));\\n        } else if (maxPaidEpoch == 0 || (currentEpoch > maxPaidEpoch && lastCommitedEpoch >= maxPaidEpoch)) {\\n            balance.setGapsEpochCount(balance.getGapsEpochCount() + (currentEpoch - lastCommitedEpoch));\\n        } else if (maxPaidEpoch != 0 && currentEpoch <= maxPaidEpoch) {\\n            uint amount = (currentEpoch - lastCommitedEpoch) * pricePerWorkerEpoch_ * currentWorkerCount;\\n\\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\\n            balance.setLockedBalance(balance.getLockedBalance() + amount);\\n        }\\n    }\\n\\n    function _postCommitPeriod(\\n        DealStorageUtils.Balance memory balance,\\n        uint currentEpoch,\\n        uint prevWorkerCount,\\n        uint newWorkerCount,\\n        uint minWorkerCount,\\n        uint pricePerWorkerEpoch_\\n    ) private {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        if (prevWorkerCount >= minWorkerCount && newWorkerCount < minWorkerCount) {\\n            dealStorage.maxPaidEpoch = 0;\\n            emit MaxPaidEpochUpdated(0);\\n        } else if (newWorkerCount >= minWorkerCount) {\\n            uint maxPaidEpoch = _calculateMaxPaidEpoch(currentEpoch, balance.getTotalBalance(), pricePerWorkerEpoch_, newWorkerCount);\\n            dealStorage.maxPaidEpoch = maxPaidEpoch;\\n\\n            emit MaxPaidEpochUpdated(maxPaidEpoch);\\n        }\\n\\n        balance.commitToStorage(dealStorage);\\n        dealStorage.lastCommitedEpoch = currentEpoch;\\n    }\\n\\n    // ------------------ Public View Functions ------------------\\n    function getStatus() public view returns (Status) {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        if (dealStorage.isEnded) {\\n            return Status.ENDED;\\n        }\\n\\n        if (getWorkerCount() < minWorkers()) {\\n            return Status.INACTIVE;\\n        } else if (_globalCore().currentEpoch() > dealStorage.maxPaidEpoch) {\\n            return Status.INACTIVE;\\n        } else {\\n            return Status.ACTIVE;\\n        }\\n    }\\n\\n    function getFreeBalance() public view returns (uint256) {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(\\n            balance,\\n            _globalCore().currentEpoch(),\\n            dealStorage.maxPaidEpoch,\\n            dealStorage.lastCommitedEpoch,\\n            getWorkerCount(),\\n            pricePerWorkerEpoch()\\n        );\\n\\n        return balance.getTotalBalance();\\n    }\\n\\n    function getRewardAmount(bytes32 computeUnitId) public view returns (uint) {\\n        DealStorage storage dealStorage = _getDealStorage();\\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getWorkerCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\\n\\n        uint reward = ((currentEpoch - computeUnitPaymentInfo.startedEpoch) -\\n            (balance.getGapsEpochCount() - computeUnitPaymentInfo.gapsDelta)) * pricePerWorkerEpoch_;\\n\\n        return reward;\\n    }\\n\\n    function getMaxPaidEpoch() public view returns (uint256) {\\n        return _getDealStorage().maxPaidEpoch;\\n    }\\n\\n    // ------------------ Public Mutable Functions ------------------\\n    function deposit(uint256 amount) external onlyOwner {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getWorkerCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        uint maxPaidEpoch = dealStorage.maxPaidEpoch;\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\\n\\n        balance.setTotalBalance(balance.getTotalBalance() + amount);\\n\\n        _postCommitPeriod(balance, currentEpoch, workerCount, workerCount, minWorkers(), pricePerWorkerEpoch_);\\n\\n        paymentToken().safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposited(amount);\\n    }\\n\\n    function withdraw(uint256 amount) external onlyOwner {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getWorkerCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        if (dealStorage.isEnded) {\\n            require(currentEpoch > dealStorage.endedEpoch + _WAIT_EPOCHS_AFTER_ENDING, \\\"Can't withdraw before 2 epochs after deal end\\\");\\n            dealStorage.totalBalance -= amount;\\n        } else {\\n            DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n            _preCommitPeriod(\\n                balance,\\n                currentEpoch,\\n                dealStorage.maxPaidEpoch,\\n                dealStorage.lastCommitedEpoch,\\n                workerCount,\\n                pricePerWorkerEpoch_\\n            );\\n\\n            balance.setTotalBalance(balance.getTotalBalance() - amount);\\n\\n            uint minBalance = _MIN_DPOSITED_EPOCHS * pricePerWorkerEpoch_ * targetWorkers();\\n            require(balance.getTotalBalance() >= minBalance, \\\"Free balance needs to cover minimum 2 epochs\\\");\\n\\n            _postCommitPeriod(balance, currentEpoch, workerCount, workerCount, minWorkers(), pricePerWorkerEpoch_);\\n        }\\n\\n        paymentToken().safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(amount);\\n    }\\n\\n    function withdrawRewards(bytes32 computeUnitId) external {\\n        DealStorage storage dealStorage = _getDealStorage();\\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint workerCount = getWorkerCount();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, dealStorage.maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch_);\\n\\n        uint globalGapsEpochCount = balance.getGapsEpochCount();\\n\\n        uint reward = ((currentEpoch - computeUnitPaymentInfo.startedEpoch) - (globalGapsEpochCount - computeUnitPaymentInfo.gapsDelta)) *\\n            pricePerWorkerEpoch_;\\n\\n        require(reward > 0, \\\"No rewards\\\");\\n\\n        computeUnitPaymentInfo.startedEpoch = currentEpoch;\\n        computeUnitPaymentInfo.gapsDelta = globalGapsEpochCount;\\n\\n        balance.setLockedBalance(balance.getLockedBalance() - reward);\\n\\n        //TODO: fix double check prev state\\n        _postCommitPeriod(balance, currentEpoch, workerCount, workerCount, minWorkers(), pricePerWorkerEpoch_);\\n\\n        paymentToken().safeTransfer(msg.sender, reward);\\n\\n        emit RewardWithdrawn(computeUnitId, reward);\\n    }\\n\\n    function setWorker(bytes32 computeUnitId, bytes32 workerId) public {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        //TODO: fix double get worker count\\n        uint prevWorkerCount = getWorkerCount();\\n        uint newWorkerCounts = _setWorker(computeUnitId, workerId);\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n\\n        ComputeUnitPaymentInfo storage computeUnitPaymentInfo = dealStorage.cUnitPaymentInfo[computeUnitId];\\n\\n        uint maxPaidEpoch = dealStorage.maxPaidEpoch;\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, prevWorkerCount, pricePerWorkerEpoch_);\\n\\n        _postCommitPeriod(balance, currentEpoch, prevWorkerCount, newWorkerCounts, minWorkers(), pricePerWorkerEpoch_);\\n\\n        computeUnitPaymentInfo.startedEpoch = currentEpoch;\\n        computeUnitPaymentInfo.gapsDelta = balance.getGapsEpochCount();\\n    }\\n\\n    function removeComputeUnit(bytes32 computeUnitId) public {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        //TODO: fix double get worker count\\n        uint prevWorkerCount = getWorkerCount();\\n        uint newWorkerCount = _removeComputeUnit(computeUnitId, dealStorage.isEnded ? dealStorage.endedEpoch : currentEpoch);\\n        uint pricePerWorkerEpoch_ = pricePerWorkerEpoch();\\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, prevWorkerCount, pricePerWorkerEpoch_);\\n\\n        _postCommitPeriod(balance, currentEpoch, prevWorkerCount, newWorkerCount, minWorkers(), pricePerWorkerEpoch_);\\n    }\\n\\n    function stop() external onlyOwner {\\n        DealStorage storage dealStorage = _getDealStorage();\\n\\n        DealStorageUtils.Balance memory balance = DealStorageUtils.initCache(dealStorage);\\n        uint currentEpoch = _globalCore().currentEpoch();\\n        uint maxPaidEpoch = _getDealStorage().maxPaidEpoch;\\n\\n        uint workerCount = getWorkerCount();\\n\\n        _preCommitPeriod(balance, currentEpoch, maxPaidEpoch, dealStorage.lastCommitedEpoch, workerCount, pricePerWorkerEpoch());\\n        _postCommitPeriod(balance, currentEpoch, workerCount, workerCount, minWorkers(), pricePerWorkerEpoch());\\n\\n        //TODO: fix double write maxPaidEpoch\\n        dealStorage.maxPaidEpoch = 0;\\n        emit MaxPaidEpochUpdated(currentEpoch);\\n\\n        dealStorage.isEnded = true;\\n        dealStorage.endedEpoch = currentEpoch;\\n\\n        emit DealEnded(currentEpoch);\\n    }\\n}\\n\",\"keccak256\":\"0x125d822c7e45fdf5c33b0dbb5d712553e1ee2074a0e0bf5702b7bd560d0b91f7\",\"license\":\"Apache-2.0\"},\"contracts/deal/DealStorageUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Deal.sol\\\";\\n\\nlibrary DealStorageUtils {\\n    // ------------------ TYPES ------------------\\n    struct Balance {\\n        uint _initTotalBalance;\\n        uint _initLockedBalance;\\n        uint _initGapsEpochCount;\\n        uint _totalBalance;\\n        uint _lockedBalance;\\n        uint _gapsEpochCount;\\n    }\\n\\n    // ------------------ VIEWS ------------------\\n    function getTotalBalance(Balance memory self) internal pure returns (uint) {\\n        return self._totalBalance;\\n    }\\n\\n    function getLockedBalance(Balance memory self) internal pure returns (uint) {\\n        return self._lockedBalance;\\n    }\\n\\n    function getGapsEpochCount(Balance memory self) internal pure returns (uint) {\\n        return self._gapsEpochCount;\\n    }\\n\\n    // ------------------ MUTABLES ------------------\\n    function initCache(Deal.DealStorage storage dealStorage) internal view returns (Balance memory) {\\n        uint totalBalance = dealStorage.totalBalance;\\n        uint lockedBalance = dealStorage.lockedBalance;\\n        uint gapsEpochCount = dealStorage.gapsEpochCount;\\n\\n        return\\n            Balance({\\n                _initTotalBalance: totalBalance,\\n                _initLockedBalance: lockedBalance,\\n                _initGapsEpochCount: gapsEpochCount,\\n                _totalBalance: totalBalance,\\n                _lockedBalance: lockedBalance,\\n                _gapsEpochCount: gapsEpochCount\\n            });\\n    }\\n\\n    function setTotalBalance(Balance memory self, uint totalBalance) internal pure {\\n        self._totalBalance = totalBalance;\\n    }\\n\\n    function setLockedBalance(Balance memory self, uint lockedBalance) internal pure {\\n        self._lockedBalance = lockedBalance;\\n    }\\n\\n    function setGapsEpochCount(Balance memory self, uint gapsEpochCount) internal pure {\\n        self._gapsEpochCount = gapsEpochCount;\\n    }\\n\\n    function commitToStorage(Balance memory self, Deal.DealStorage storage dealStorage) internal {\\n        if (self._initTotalBalance != self._totalBalance) {\\n            dealStorage.totalBalance = self._totalBalance;\\n        }\\n\\n        if (self._initLockedBalance != self._lockedBalance) {\\n            dealStorage.lockedBalance = self._lockedBalance;\\n        }\\n\\n        if (self._initGapsEpochCount != self._gapsEpochCount) {\\n            dealStorage.gapsEpochCount = self._gapsEpochCount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x60f2852d9cd8f6c13eff3e74ae35165d63c504de98a8a517af7aaf7c499a6ee8\",\"license\":\"Apache-2.0\"},\"contracts/deal/WorkerManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Config.sol\\\";\\nimport \\\"./interfaces/IWorkerManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract WorkerManager is Config, IWorkerManager {\\n    using LinkedListWithUniqueKeys for LinkedListWithUniqueKeys.Bytes32List;\\n    using SafeERC20 for IERC20;\\n\\n    // ------------------ Types ------------------\\n    struct ComputeProviderInfo {\\n        uint256 computeUnitCount;\\n        LinkedListWithUniqueKeys.Bytes32List computeUnitsIds;\\n    }\\n\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.deal.storage.v1.workerManager\\\")) - 1);\\n\\n    struct WorkerManagerStorage {\\n        // global area\\n        uint256 computeUnitCount;\\n        uint256 workerCount;\\n        mapping(address => ComputeProviderInfo) computeProviderInfo;\\n        // compute units area\\n        mapping(bytes32 => ComputeUnit) computeUnitById;\\n        LinkedListWithUniqueKeys.Bytes32List computeUnitsIdsList;\\n        mapping(bytes32 => uint256) collateralWithdrawEpochByComputeUnitId;\\n    }\\n\\n    WorkerManagerStorage private _storage;\\n\\n    function _getWorkerManagerStorage() private pure returns (WorkerManagerStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Constants ------------------\\n    bytes32 private constant _COMPUTE_UNIT_ID_PREFIX = keccak256(\\\"fluence.computeUnit.\\\");\\n    uint256 private constant _WITHDRAW_EPOCH_TIMEOUT = 2;\\n\\n    // ------------------ Internal View Functions ------------------\\n    function _calculateUnitId(address computeProvider, bytes32 peerId) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_COMPUTE_UNIT_ID_PREFIX, computeProvider, peerId));\\n    }\\n\\n    // ------------------ Internal Mutable Functions ------------------\\n\\n    function _setWorker(bytes32 computeUnitId, bytes32 workerId) internal returns (uint256) {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n        ComputeUnit storage computeUnit = workerStorage.computeUnitById[computeUnitId];\\n\\n        require(workerId != bytes32(0), \\\"WorkerId can't be empty\\\");\\n\\n        uint workerCount = workerStorage.workerCount;\\n        if (computeUnit.workerId == bytes32(0)) {\\n            workerCount++;\\n            workerStorage.workerCount = workerCount;\\n        }\\n\\n        computeUnit.workerId = workerId;\\n\\n        emit WorkerIdUpdated(computeUnitId, workerId);\\n\\n        return workerCount;\\n    }\\n\\n    function _removeComputeUnit(bytes32 computeUnitId, uint lastWorkedEpoch) public returns (uint workerCount) {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        // check owner\\n        address computeProvider = workerStorage.computeUnitById[computeUnitId].owner;\\n        require(computeProvider != address(0x00), \\\"ComputeUnit not found\\\");\\n        require(computeProvider == msg.sender || msg.sender == owner(), \\\"Only provider or deal owner can remove worker\\\");\\n\\n        // change computeUnit count\\n        uint256 newComputeUnitCount = workerStorage.computeUnitCount;\\n        workerStorage.computeProviderInfo[computeProvider].computeUnitCount--;\\n        workerStorage.computeUnitCount = --newComputeUnitCount;\\n\\n        workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] = lastWorkedEpoch + _WITHDRAW_EPOCH_TIMEOUT;\\n\\n        // remove ComputeUnit\\n        workerStorage.computeUnitsIdsList.remove(computeUnitId);\\n\\n        workerCount = workerStorage.workerCount;\\n        if (workerStorage.computeUnitById[computeUnitId].workerId != bytes32(0)) {\\n            workerCount--;\\n            workerStorage.workerCount = workerCount;\\n        }\\n\\n        emit ComputeUnitRemoved(computeUnitId);\\n\\n        return workerCount;\\n    }\\n\\n    // ------------------ Public View Functions ---------------------\\n    function hasPeer(address computeProvider, bytes32 peerId) public view returns (bool) {\\n        bytes32 computeUnitId = _calculateUnitId(computeProvider, peerId);\\n        return _getWorkerManagerStorage().computeUnitById[computeUnitId].peerId != bytes32(0);\\n    }\\n\\n    function getComputeUnit(bytes32 id) public view returns (ComputeUnit memory) {\\n        return _getWorkerManagerStorage().computeUnitById[id];\\n    }\\n\\n    function getComputeUnitCount() public view returns (uint256) {\\n        return _getWorkerManagerStorage().computeUnitCount;\\n    }\\n\\n    function getComputeUnits() public view returns (ComputeUnit[] memory) {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        ComputeUnit[] memory computeUnits = new ComputeUnit[](workerStorage.computeUnitCount);\\n\\n        uint256 index = 0;\\n        bytes32 computeUnitId = workerStorage.computeUnitsIdsList.first();\\n        while (computeUnitId != bytes32(0)) {\\n            computeUnits[index] = workerStorage.computeUnitById[computeUnitId];\\n            index++;\\n\\n            computeUnitId = workerStorage.computeUnitsIdsList.next(computeUnitId);\\n        }\\n\\n        return computeUnits;\\n    }\\n\\n    function getWorkerCount() public view returns (uint256) {\\n        return _getWorkerManagerStorage().workerCount;\\n    }\\n\\n    function getUnlockCollateralEpoch(bytes32 computeUnitId) external view returns (uint256) {\\n        return _getWorkerManagerStorage().collateralWithdrawEpochByComputeUnitId[computeUnitId];\\n    }\\n\\n    // ------------------ Public Mutable Functions ---------------------\\n\\n    function createComputeUnit(address computeProvider, bytes32 peerId) public returns (bytes32) {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        // check target compute units count\\n        uint256 globalComputeUnitCount = workerStorage.computeUnitCount;\\n        require(globalComputeUnitCount < targetWorkers(), \\\"Target units reached\\\");\\n\\n        // check peerId isn't exist\\n        bytes32 id = _calculateUnitId(computeProvider, peerId);\\n        require(workerStorage.computeUnitById[id].owner == address(0x00), \\\"Id already used\\\");\\n\\n        // check max units per compute provider\\n        uint256 computeUnitCountByCP = workerStorage.computeProviderInfo[computeProvider].computeUnitCount;\\n        require(computeUnitCountByCP < maxWorkersPerProvider(), \\\"Max units per compute provider reached\\\");\\n\\n        // increase computeUnit count\\n        workerStorage.computeProviderInfo[computeProvider].computeUnitCount = ++computeUnitCountByCP;\\n        workerStorage.computeUnitCount = ++globalComputeUnitCount;\\n\\n        // get required collateral\\n        uint256 collateral = collateralPerWorker();\\n\\n        // create ComputeUnit\\n        workerStorage.computeUnitById[id] = ComputeUnit({\\n            id: id,\\n            peerId: peerId,\\n            workerId: bytes32(0),\\n            owner: computeProvider,\\n            collateral: collateral,\\n            created: _globalCore().currentEpoch()\\n        });\\n\\n        // add ComputeUnit to list\\n        workerStorage.computeUnitsIdsList.push(id);\\n\\n        emit ComputeUnitCreated(id, computeProvider);\\n\\n        // transfer collateral\\n        fluenceToken().safeTransferFrom(msg.sender, address(this), collateral);\\n\\n        return id;\\n    }\\n\\n    function withdrawCollateral(bytes32 computeUnitId) external {\\n        WorkerManagerStorage storage workerStorage = _getWorkerManagerStorage();\\n\\n        require(\\n            workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] <= _globalCore().currentEpoch(),\\n            \\\"Collateral not available\\\"\\n        );\\n\\n        // get collateral and compute provider\\n        uint256 amount = workerStorage.computeUnitById[computeUnitId].collateral;\\n        address computeProvider = workerStorage.computeUnitById[computeUnitId].owner;\\n\\n        // reset collateral withdraw info\\n        workerStorage.collateralWithdrawEpochByComputeUnitId[computeUnitId] = 0;\\n\\n        // transfer collateral\\n        fluenceToken().safeTransfer(computeProvider, amount);\\n\\n        delete workerStorage.computeUnitById[computeUnitId];\\n\\n        emit CollateralWithdrawn(computeProvider, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd55e762d150fa26f7189788e72dee4966b9de3e23d0c625784562f198e78b983\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\",\"keccak256\":\"0x9b0d5e06acd11ddf64e328e8303e29d1c30b4983b7684ab6121effd804c89e6e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IConfig {\\n    // ------------------ Types ------------------\\n    enum AccessType {\\n        NONE,\\n        WHITELIST,\\n        BLACKLIST\\n    }\\n\\n    // ------------------ Events ------------------\\n    event AppCIDChanged(CIDV1 newAppCID);\\n\\n    // ------------------ View Functions ---------------------\\n    // function globalCore() external view returns (address);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function pricePerWorkerEpoch() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function collateralPerWorker() external view returns (uint256);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function accessType() external view returns (AccessType);\\n\\n    function isInAccessList(address addr) external view returns (bool);\\n\\n    function getAccessList() external view returns (address[] memory);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    // ------------------ Mutable Functions ------------------\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n\\n    function changeAccessType(AccessType accessType_) external;\\n\\n    function removeFromAccessList(address addr) external;\\n}\\n\",\"keccak256\":\"0xea76738cda167fd3c570e8d500e0b55bd5f46058715a02cfa150c0f9e79acdf1\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IDeal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IConfig.sol\\\";\\nimport \\\"./IWorkerManager.sol\\\";\\n\\ninterface IDeal is IConfig, IWorkerManager {\\n    // ------------------ Types ------------------\\n    enum Status {\\n        INACTIVE,\\n        ACTIVE,\\n        ENDED\\n    }\\n\\n    // ----------------- Events -----------------\\n    event Deposited(uint256 amount);\\n    event Withdrawn(uint256 amount);\\n\\n    event RewardWithdrawn(bytes32 computeUnitId, uint256 reward);\\n\\n    event MaxPaidEpochUpdated(uint256 maxPaidEpoch);\\n\\n    event DealEnded(uint256 endedEpoch);\\n\\n    // ------------------ Init ------------------\\n    function initialize(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IConfig.AccessType accessType_,\\n        address[] calldata accessList_\\n    ) external;\\n\\n    // ------------------ Public Ownable Functions ------------------\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    // ------------------ Public View Functions ------------------\\n    function getStatus() external view returns (Status);\\n\\n    function getFreeBalance() external view returns (uint256);\\n\\n    function getRewardAmount(bytes32 computeUnitId) external view returns (uint);\\n\\n    function getMaxPaidEpoch() external view returns (uint256);\\n\\n    // ------------------ Public Mutable Functions ------------------\\n    function withdrawRewards(bytes32 computeUnitId) external;\\n}\\n\",\"keccak256\":\"0x5af687804adfb973c1e4e59bfe4522547a92b014e1b23a44faf1ce1e026c9c05\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkerManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../utils/LinkedListWithUniqueKeys.sol\\\";\\n\\ninterface IWorkerManager {\\n    // ------------------ Types ------------------\\n    struct ComputeUnit {\\n        bytes32 id;\\n        bytes32 peerId;\\n        bytes32 workerId;\\n        address owner;\\n        uint256 collateral;\\n        uint256 created;\\n    }\\n\\n    // ------------------ Events ------------------\\n    event ComputeUnitCreated(bytes32 id, address owner);\\n    event ComputeUnitRemoved(bytes32 id);\\n\\n    event WorkerIdUpdated(bytes32 computeUnitId, bytes32 workerId);\\n\\n    event CollateralWithdrawn(address owner, uint256 amount);\\n\\n    // ------------------ Public View Functions ---------------------\\n    function hasPeer(address computeProvider, bytes32 peerId) external view returns (bool);\\n\\n    function getComputeUnit(bytes32 id) external view returns (ComputeUnit memory);\\n\\n    function getComputeUnitCount() external view returns (uint256);\\n\\n    function getComputeUnits() external view returns (ComputeUnit[] memory);\\n\\n    function getWorkerCount() external view returns (uint256);\\n\\n    function getUnlockCollateralEpoch(bytes32 computeUnitId) external view returns (uint256);\\n\\n    // ------------------ Public Mutable Functions ---------------------\\n    function createComputeUnit(address computeProvider, bytes32 peerId) external returns (bytes32);\\n\\n    function removeComputeUnit(bytes32 computeUnitId) external;\\n\\n    function setWorker(bytes32 computeUnitId, bytes32 workerId) external;\\n\\n    function withdrawCollateral(bytes32 computeUnitId) external;\\n}\\n\",\"keccak256\":\"0x85cfea108b50369e29df7565cb7cb3af7f6e34061c5c69ae4b989acdf141d31f\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IDealFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\nimport \\\"../../deal/interfaces/IDeal.sol\\\";\\n\\ninterface IDealFactory {\\n    // ----------------- Events -----------------\\n    event DealCreated(address indexed owner, IDeal deal, uint createdAtEpoch);\\n\\n    // ----------------- View -----------------\\n    function hasDeal(IDeal deal) external view returns (bool);\\n\\n    // ----------------- Mutable -----------------\\n    function deployDeal(\\n        CIDV1 calldata appCID_,\\n        IERC20 paymentToken_,\\n        uint256 collateralPerWorker_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 pricePerWorkerEpoch_,\\n        CIDV1[] calldata effectors_,\\n        IDeal.AccessType accessType_,\\n        address[] calldata accessList_\\n    ) external returns (IDeal);\\n}\\n\",\"keccak256\":\"0xa3243f85ee0f1f97551e3d70fc565373b7108a24602578ee7b5810397ab30b66\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IDealFactory.sol\\\";\\nimport \\\"../matcher/interfaces/IMatcher.sol\\\";\\n\\npragma solidity ^0.8.19;\\n\\ninterface IGlobalCore {\\n    // ------------------ Events ------------------\\n    event MatcherSet(address matcher);\\n    event FactorySet(address factory);\\n\\n    // ------------------ Initializer ------------------\\n    function initialize(IERC20 fluenceToken_, uint256 epochDuration_) external;\\n\\n    // ------------------ external View Functions ------------------\\n    function currentEpoch() external view returns (uint256);\\n\\n    function epochDuration() external view returns (uint256);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IDealFactory);\\n\\n    // ------------------ external Mutable Functions ------------------\\n    function setMatcher(IMatcher matcher_) external;\\n\\n    function setFactory(IDealFactory factory_) external;\\n}\\n\",\"keccak256\":\"0x3bcf6a0d5f47178b0b709533e3e43e34f5473860eccff2a43544ee6f0e1c75f8\",\"license\":\"Apache-2.0\"},\"contracts/global/matcher/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../deal/base/Types.sol\\\";\\nimport \\\"../../../deal/interfaces/IDeal.sol\\\";\\n\\ninterface IMatcher {\\n    // ----------------- Events -----------------\\n    event ComputePeerMatched(bytes32 indexed peerId, IDeal deal, bytes32 computeUnitId, uint dealCreationBlock, CIDV1 appCID);\\n\\n    // ----------------- View -----------------\\n    // TODO: move this logic to offchain. Temp solution\\n    function findComputePeers(IDeal deal) external view returns (address[] memory computeProviders, bytes32[][] memory computePeers);\\n\\n    // ----------------- Mutables -----------------\\n    function matchDeal(IDeal deal, address[] calldata providers, bytes32[][] calldata peers) external;\\n}\\n\",\"keccak256\":\"0x4338004e25f5442ee1f75badfc7c489b1808d4b8eced2f9fee8288d8b4e2c0b1\",\"license\":\"Apache-2.0\"},\"contracts/utils/LinkedListWithUniqueKeys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nlibrary LinkedListWithUniqueKeys {\\n    // ------------------ TYPES ------------------\\n    struct Element {\\n        bytes32 prev;\\n        bytes32 next;\\n    }\\n\\n    struct Bytes32List {\\n        bytes32 _first;\\n        bytes32 _last;\\n        uint256 _length;\\n        mapping(bytes32 => Element) _elements;\\n    }\\n\\n    // ------------------ PRIVATE ------------------\\n    function _has(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\\n    }\\n\\n    // ------------------ VIEWS ------------------\\n\\n    function first(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._first;\\n    }\\n\\n    function last(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._last;\\n    }\\n\\n    function length(Bytes32List storage self) internal view returns (uint256) {\\n        return self._length;\\n    }\\n\\n    function has(Bytes32List storage self, bytes32 key) internal view returns (bool) {\\n        return _has(self, self._elements[key], key);\\n    }\\n\\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].next;\\n    }\\n\\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].prev;\\n    }\\n\\n    function toArray(Bytes32List storage self) internal view returns (bytes32[] memory) {\\n        uint256 arrayLength = self._length;\\n        bytes32[] memory array = new bytes32[](arrayLength);\\n\\n        bytes32 current = self._first;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            array[i] = current;\\n            current = self._elements[current].next;\\n        }\\n\\n        return array;\\n    }\\n\\n    // ------------------ MUTABLES ------------------\\n    function push(Bytes32List storage self, bytes32 key) internal {\\n        require(key != bytes32(0x00), \\\"Key cannot be ZERO\\\");\\n        require(!has(self, key), \\\"Key already exists\\\");\\n\\n        bytes32 oldLast = self._last;\\n\\n        self._length++;\\n\\n        if (oldLast == 0) {\\n            self._first = key;\\n            self._last = key;\\n            return;\\n        }\\n\\n        self._last = key;\\n        self._elements[key].prev = oldLast;\\n        self._elements[oldLast].next = key;\\n    }\\n\\n    function remove(Bytes32List storage self, bytes32 key) internal {\\n        Element memory element = self._elements[key];\\n\\n        require(_has(self, element, key), \\\"Key does not exist\\\");\\n\\n        if (element.prev == bytes32(0x00)) {\\n            self._first = element.next;\\n        }\\n\\n        if (element.next == bytes32(0x00)) {\\n            self._last = element.prev;\\n        }\\n\\n        if (element.prev != bytes32(0x00)) {\\n            self._elements[element.prev].next = element.next;\\n        }\\n\\n        if (element.next != bytes32(0x00)) {\\n            self._elements[element.next].prev = element.prev;\\n        }\\n\\n        delete self._elements[key];\\n\\n        self._length--;\\n    }\\n}\\n\",\"keccak256\":\"0xb76f0ffe2d1583afcf8743dc060ea05984200676f53101fc1c3f2a450bedcdd3\",\"license\":\"Apache-2.0\"},\"contracts/utils/OwnableUpgradableDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Similar (not fully) to the OZ OwnableUpgradable(Initializable, ContextUpgradeable).\\n * @dev The main difference is in Diamond part,\\n * @dev  e.g. from: https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2964.\\n*/\\ncontract OwnableUpgradableDiamond is Initializable {\\n    // ------------------ Storage ------------------\\n    bytes32 private constant _STORAGE_SLOT = bytes32(uint256(keccak256(\\\"fluence.uitls.storage.v1.ownableupgradablediamond\\\")) - 1);\\n\\n    struct OwnableStorage {\\n        address owner;\\n    }\\n\\n    OwnableStorage private _storage;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage s) {\\n        bytes32 storageSlot = _STORAGE_SLOT;\\n        assembly {\\n            s.slot := storageSlot\\n        }\\n    }\\n\\n    // ------------------ Other ------------------\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _getOwnableStorage().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert OwnableUnauthorizedAccount(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage ownableStorage = _getOwnableStorage();\\n\\n        address oldOwner = ownableStorage.owner;\\n        ownableStorage.owner = newOwner;\\n\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x00358ac47df53f46383699e435987467104201b495292abf235ef30869303ecc\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040908082523462000203578062004ece803803809162000023828562000208565b83396020928391810103126200020357516001600160a01b03908181169081810362000203573060805260c052835163ac027f9760e01b8152908390829060049082905afa908115620001f857600091620001b4575b50905060a0526000549060ff8260081c16620001615760ff8083160362000127575b8251614c8b90816200024382396080518181816118aa015281816119ef0152611f80015260a0518181816105fa01528181610cf2015261107d015260c0518181816104f9015281816107f9015281816109f501528181610c4e01528181610e6c01528181611425015281816121e90152818161240801528181612ebc015281816132ad0152613c600152f35b60ff7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989281191617600055825160ff8152a138806200009b565b60849083519062461bcd60e51b82526004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152fd5b8381813d8311620001f0575b620001cc818362000208565b81010312620001ec57519182168203620001e95750803862000079565b80fd5b5080fd5b503d620001c0565b84513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200022c57604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c908163055236f41461349b5750806307da68f514613246578063108d2f521461320957806314d3b767146130425780631763451414613005578063176474cf14612fe45780631af57b9614612e39578063206bb6e8146128785780632943dcab1461283b5780632b9f5b32146127f05780632db31193146127b35780632e1a7d4d146123a55780633013ce29146123525780633591187c146121955780633659cfe614611f4d578063378b22e414611f105780634b66a30914611cf65780634d7599f114611cb95780634e69d56014611c915780634f1ef2861461196457806352d1902d1461188257806367c17a0b146118215780636cd13448146117e4578063715018a614611744578063745e920b1461164c5780637878e81b1461161e5780637dfb6626146113a05780638a0c725b146113635780638d5ddbb3146111ac5780638da5cb5b146111595780639bc66868146110a1578063ac027f9714611050578063b55ec18a14611007578063b6b55f2514610e0a578063cffe224414610de9578063d3cde34414610bc6578063d5053ab0146108ff578063e93c4f151461079d578063edd0d73414610760578063eebe998f14610366578063f2fde38b1461033b5763fc1e5e2a146101ed57600080fd5b34610336576000600319360112610336577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d805461022a816139b1565b6102376040519182613657565b81815260209182820180946000527fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0956000915b8383106102e55760408051878152865181890181905289928201908960005b8281106102965784840385f35b909192826040826102d66001948a51602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565b01960191019492919094610289565b6002866001926040516102f781613603565b7fffffffff00000000000000000000000000000000000000000000000000000000865460e01b168152848601548382015281520192019201919061026a565b600080fd5b34610336576020600319360112610336576103646103576135a7565b61035f614be5565b614b22565b005b346103365760406003193601126103365761037f6135a7565b6024357fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20918254917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a5483101561071c576103da8183614728565b92836000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2360209581875273ffffffffffffffffffffffffffffffffffffffff9485600360406000200154166106d857851692836000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d228089526040600020547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b5481101561066e57906104936104a593926139c9565b90866000528a526040600020556139c9565b90557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d085492604051947f766718080000000000000000000000000000000000000000000000000000000086528786600481847f0000000000000000000000000000000000000000000000000000000000000000165afa9586156106625787928991600098610626575b5096867f865afb485bc19debe6b3005a955507b9380643890b997437eac163d3345167ba96946040969460059461061e9b89519761056b8961361f565b8489528289019182528a8901926000845260608a01958b875260808b0197885260a08b01988952600052528960002097518855516001880155516002870155600386019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055516004840155519101556105eb86614a29565b81519086825287820152a130337f0000000000000000000000000000000000000000000000000000000000000000613e3d565b604051908152f35b975094925086819492943d831161065b575b6106428183613657565b810103126103365794519490929091869188908661052e565b503d610638565b6040513d6000823e3d90fd5b60848a6040519062461bcd60e51b82526004820152602660248201527f4d617820756e6974732070657220636f6d707574652070726f7669646572207260448201527f65616368656400000000000000000000000000000000000000000000000000006064820152fd5b6064886040519062461bcd60e51b82526004820152600f60248201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f54617267657420756e69747320726561636865640000000000000000000000006044820152fd5b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0854604051908152f35b34610336576000600319360112610336576107b6614256565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115610662576000916108cd575b60206060846108c3857fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2547fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549386613d1d565b0151604051908152f35b90506020813d82116108f7575b816108e760209383613657565b810103126103365751602061082a565b3d91506108da565b34610336576040600319360112610336576004356024357fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2190815492806000526020917fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2383526040600020938115610b8257600286950190815415610b45575b50817fcf79e0e27c8c35d39bd9b727f35e6f79573597f660c88baf483fc1511c49203c926040925581519084825285820152a1604051917f76671808000000000000000000000000000000000000000000000000000000008352808360048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa92831561066257600093610b0e575b5091610b05600194927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f360a0957f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5492600052526040600020967fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f15494610adb8383610ab0614256565b987fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490898b613d1d565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954918587613fc9565b84550151910155005b939192508084813d8311610b3e575b610b278183613657565b810103126103365792519092909190610b05610a26565b503d610b1d565b9450817fcf79e0e27c8c35d39bd9b727f35e6f79573597f660c88baf483fc1511c49203c92604092610b76896139c9565b8098559250925061097f565b6064846040519062461bcd60e51b82526004820152601760248201527f576f726b657249642063616e277420626520656d7074790000000000000000006044820152fd5b346103365760208060031936011261033657600435806000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d28808352604060002054916040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938582600481887f0000000000000000000000000000000000000000000000000000000000000000165afa91821561066257600092610dba575b5011610d76577fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d93816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2391828252604060002094600360048701549601541693825260006040812055610d1685857f00000000000000000000000000000000000000000000000000000000000000006141bd565b6000525260006005604082208281558260018201558260028201558260038201558260048201550155610d71604051928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a1005b6064846040519062461bcd60e51b82526004820152601860248201527f436f6c6c61746572616c206e6f7420617661696c61626c6500000000000000006044820152fd5b9091508581813d8311610de2575b610dd28183613657565b8101031261033657519086610c7f565b503d610dc8565b3461033657604060031936011261033657602061061e60243560043561431f565b34610336576020806003193601126103365760043590610e28614be5565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8284600481847f0000000000000000000000000000000000000000000000000000000000000000165afa93841561066257600094610fd8575b5081610fcf91610fa37f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea967fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5491807fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f15492610f6a8583610f3f614256565b967fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908589613d1d565b60608401610f79898251613d10565b90527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541630903390613e3d565b604051908152a1005b93508284813d8311611000575b610fef8183613657565b810103126103365792519281610e9d565b503d610fe5565b3461033657600060031936011261033657602060ff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e54166040519061104c816135ca565b8152f35b3461033657600060031936011261033657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461033657600060031936011261033657600060206040516110c281613603565b8281520152604080516110d481613603565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d055460e01b7fffffffff00000000000000000000000000000000000000000000000000000000168082527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0654602092830190815283519182525191810191909152f35bf35b3461033657600060031936011261033657602073ffffffffffffffffffffffffffffffffffffffff7fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb805416604051908152f35b34610336576000600319360112610336577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d11546111e8816139b1565b906111f66040519283613657565b8082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09081611225826139b1565b019060209136838601377f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f546000905b8282106113195750505082519061128461126e836139b1565b9261127c6040519485613657565b8084526139b1565b828201930136843760005b84518110156112bf57806112a66112ba92876139f6565b5160601c6112b482866139f6565b526139c9565b61128f565b50925090604051928392818401908285525180915260408401929160005b8281106112ec57505050500390f35b835173ffffffffffffffffffffffffffffffffffffffff16855286955093810193928101926001016112dd565b8061132483886139f6565b526000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d12835261135d600160406000200154916139c9565b90611255565b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b54604051908152f35b346103365760208060031936011261033657600435806000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f3825260406000206040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff908481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa908115610662576000916115f1575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54916114a5614256565b916114f784837fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908588613d1d565b60a08301516115078754836139a4565b6115298661152460018b019361151e8554876139a4565b906139a4565b613cfd565b9788156115ad5789968996868d97877f9b5336625f529f36cb0543297bdf5075b7f6b830bb892ff97c09fbfeae6255d59d9760409d976115a29a61157898555560808401610f798982516139a4565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906141bd565b8351928352820152a1005b60648b6040519062461bcd60e51b82526004820152600a60248201527f4e6f2072657761726473000000000000000000000000000000000000000000006044820152fd5b90508481813d8311611617575b6116088183613657565b81010312610336575185611456565b503d6115fe565b346103365760206003193601126103365760043560038110156103365761036490611647614be5565b613adc565b3461033657602060031936011261033657611665614224565b506004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2360205260c060406000206005604051916116a68361361f565b80548352600181015460208401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a0820152611157604051809260a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b346103365760006003193601126103365761175d614be5565b600073ffffffffffffffffffffffffffffffffffffffff7fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb808054907fffffffffffffffffffffffff000000000000000000000000000000000000000082169055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54604051908152f35b346103365760406003193601126103365761184661183d6135a7565b60243590614728565b6000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2360205260206001604060002001541515604051908152f35b346103365760006003193601126103365773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036118fa5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b6040600319360112610336576119786135a7565b6024359067ffffffffffffffff821161033657366023830112156103365781600401356119a481613698565b926119b26040519485613657565b8184526020918285019136602483830101116103365781600092602486930185378601015273ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690611a1c823014156136d2565b611a4b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614613743565b611a53614be5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a8b575050505061036491506137b4565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa60009181611c62575b50611b36576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611bf857611b44836137b4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590611bf0575b611b7a57005b60008091610364957f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60405196611bb08861363b565b602788528701527f206661696c65640000000000000000000000000000000000000000000000000060408701525190845af4611bea613886565b916138b6565b506001611b74565b6084846040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d8311611c8a575b611c7a8183613657565b8101031261033657519088611ac7565b503d611c70565b34610336576000600319360112610336576020611cac613ba5565b6040519061104c816135ca565b346103365760006003193601126103365760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154604051908152f35b34610336576000600319360112610336577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611d5661126e836139b1565b0160005b818110611ef9578260007fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d245490815b611e205760408051602080825285518183018190528187019383019160005b828110611db55784840385f35b9091928260c082611e116001948a5160a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b01960191019492919094611da8565b816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d238152611ee6604060002093604051611e7f8161361f565b85548152600560019687810154868401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a0820152611ed582896139f6565b52611ee081886139f6565b506139c9565b9360005252604060002001549081611d89565b602090611f04614224565b82828601015201611d5a565b346103365760006003193601126103365760207fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154604051908152f35b346103365760208060031936011261033657611f676135a7565b73ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001692611fad843014156136d2565b611fdc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614613743565b611fe4614be5565b604051938285019185831067ffffffffffffffff84111761216657826040526000865260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014612041575050505061036491506137b4565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa60009181612137575b506120ec576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611bf8576120fa836137b4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a283511580159061212f57611b7a57005b506000611b74565b9091508681813d831161215f575b61214f8183613657565b810103126103365751908861207d565b503d612145565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b34610336576020600319360112610336576040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa80156106625760009061231f575b61036491507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21549060ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f454166000146123165761229b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f5545b60043561431f565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154926122ee8583610f3f614256565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b61229b81612293565b506020813d821161234a575b8161233860209383613657565b81010312610336576103649051612219565b3d915061232b565b3461033657600060031936011261033657602073ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d075416604051908152f35b346103365760208060031936011261033657600435906123c3614be5565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff928281600481877f0000000000000000000000000000000000000000000000000000000000000000165afa90811561066257600091612786575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549160ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f454166000146125f857507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f55460028101925082106125c957111561255f57610fcf817f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b56947fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee6125338382546139a4565b90557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906141bd565b6084826040519062461bcd60e51b82526004820152602d60248201527f43616e2774207769746864726177206265666f726520322065706f636873206160448201527f66746572206465616c20656e64000000000000000000000000000000000000006064820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b612600614256565b9161265284837fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908588613d1d565b606083016126618682516139a4565b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851685036125c9576126ba7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a548660011b613cfd565b90511061271c57610fcf938593837f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569994612717947f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b611578565b6084866040519062461bcd60e51b82526004820152602c60248201527f467265652062616c616e6365206e6565647320746f20636f766572206d696e6960448201527f6d756d20322065706f63687300000000000000000000000000000000000000006064820152fd5b90508281813d83116127ac575b61279d8183613657565b81010312610336575184612439565b503d612793565b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954604051908152f35b34610336576020600319360112610336576004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d286020526020604060002054604051908152f35b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a54604051908152f35b346103365760031936016101608112610336576040136103365760443573ffffffffffffffffffffffffffffffffffffffff811681036103365767ffffffffffffffff8061010435116103365736602361010435011215610336578061010435600401351161033657366024610104356004013560061b610104350101116103365760036101243510156103365780610144351161033657366023610144350112156103365761014435600401351161033657366024610144356004013560051b61014435010111610336576000549060ff8260081c161591828093612e2c575b8015612e15575b15612dab578260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055612d7c575b506129b860ff60005460081c166129aa81613b34565b6129b381613b34565b613b34565b6129c133614b22565b6129d260ff60005460081c16613b34565b437f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d045573ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0791167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790556064357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d08556084357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095560a4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a5560c4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b5560e4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5560005b61010435600401358110612c065750612b2b61012435613adc565b60005b61014435600401358110612ba05750612b45613a0a565b612b4b57005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60248160051b610144350101359073ffffffffffffffffffffffffffffffffffffffff8216820361033657612bfc7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000612c019360601b166148a8565b6139c9565b612b2e565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d54680100000000000000008110156121665760018101807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d55811015612d4d577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d60005260011b90817fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e09501918160061b61010435019260248401357fffffffff000000000000000000000000000000000000000000000000000000008116810361033657612d48947fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0969260449260e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905501359101556139c9565b612b10565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011760005582612994565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156129605750600160ff821614612960565b50600160ff821610612959565b3461033657602080600319360112610336576004356000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f381526040600020604051907f76671808000000000000000000000000000000000000000000000000000000008252828260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561066257600092612fb3575b509061152461061e9261151e7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d215491600160a0612fa77f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5497612f9f89612f52614256565b987fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490858c613d1d565b8454906139a4565b940151910154906139a4565b91508282813d8311612fdd575b612fca8183613657565b8101031261033657905190611524612eed565b503d612fc0565b3461033657604060031936011261033657612ffd614be5565b610364613a0a565b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0454604051908152f35b3461033657602080600319360112610336577fffffffffffffffffffffffffffffffffffffffff00000000000000000000000061307d6135a7565b613085614be5565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d129182825260406000206001604051916130c783613603565b8054835201548382019081526130dd83836147a8565b156131c55781518015908161319c575b8251918215613174575b1561315e575b5050519081613149575b505060005252600060016040822082815501557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1161314581546142f4565b9055005b51906000528383526040600020558380613107565b60005285855260016040600020015585806130fd565b817f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10556130f7565b82517f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f556130ed565b6064846040519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346103365760006003193601126103365760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2054604051908152f35b346103365760006003193601126103365761325f614be5565b613267614256565b604051907f76671808000000000000000000000000000000000000000000000000000000008252602090818360048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9283156106625760009361346b575b509160007f3ad16bb58712aa329948d76146b096a4f4b85e024d99473dc50bcd358811b86c936133cb7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1918254907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21546133a17fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25493827f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549586928b87613d1d565b80877f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b557fcecd349d986645e1758ec135f91f1ad20564a8bcc6c2b5a5eaca9b09841495c582604051838152a17fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055807fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f555604051908152a1005b92508183813d8311613494575b6134828183613657565b810103126103365791519160006132de565b503d613478565b3461033657602060031936011261033657602080917fffffffffffffffffffffffffffffffffffffffff0000000000000000000000006134d96135a7565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d12835260406000209061351481613603565b600182549283835201549384910152159182159261359d575b508115613572575b8115613547575b506040519015158152f35b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1054148261353c565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5481149150613535565b151591508361352d565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361033657565b600311156135d457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040810190811067ffffffffffffffff82111761216657604052565b60c0810190811067ffffffffffffffff82111761216657604052565b6060810190811067ffffffffffffffff82111761216657604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761216657604052565b67ffffffffffffffff811161216657601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b156136d957565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561374a57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b1561381c5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d156138b1573d9061389782613698565b916138a56040519384613657565b82523d6000602084013e565b606090565b9192901561391757508151156138ca575090565b3b156138d35790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561392a5750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061398d575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161394c565b919082039182116125c957565b67ffffffffffffffff81116121665760051b60200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146125c95760010190565b8051821015612d4d5760209160051b010190565b6004357fffffffff00000000000000000000000000000000000000000000000000000000811690818103610336577fc820a66d3bdd50a45cf12cda6dc8ec9e94fb5123edd7da736eea18316f8523a0916040917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d059060e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825416179055602435807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d065582519182526020820152a1565b613ae5816135ca565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055565b15613b3b57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45416613cf8577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d09541115613c1d57600090565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561066257600091613cc4575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1541015613cbf57600090565b600190565b906020823d8211613cf0575b81613cdd60209383613657565b81010312613ced57505138613c91565b80fd5b3d9150613cd0565b600290565b818102929181159184041417156125c957565b919082018092116125c957565b91939092948415801590818092613e34575b80613e2b575b15613d8f57505091613d5860a092611524613d8495611524899a613d8a9a6139a4565b60608201613d678282516139a4565b9052613d7860808301918251613d10565b905201938451926139a4565b90613d10565b90525b565b9080929497969190613e17575b15613db95750505050613d8460a0613d8a939401938451926139a4565b92939281613e0c575b50613dcf575b5050505050565b611524608093611524613e0096613de5956139a4565b9260608101613df58582516139a4565b905201918251613d10565b90523880808080613dc8565b905082111538613dc2565b508085118015613d9c575080861015613d9c565b50878711613d35565b50868611613d2f565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761216657613d8d926040525b73ffffffffffffffffffffffffffffffffffffffff1690613f1c604051613edb81613603565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1611bea613886565b805191821591848315613fa1575b505050905015613f375750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312613fc557820151908115158203613ced575080388084613f2a565b5080fd5b9380919593921015806141b4575b156141015750505060007fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1557fcecd349d986645e1758ec135f91f1ad20564a8bcc6c2b5a5eaca9b09841495c5602060405160008152a15b805160608201518091036140d9575b50602081015160808201518091036140b1575b5060a06040820151910151809103614089575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f255565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05538614064565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef5538614051565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee553861403e565b811015614110575b505061402f565b61411f90606084015192613cfd565b8015614185576141546020917fcecd349d986645e1758ec135f91f1ad20564a8bcc6c2b5a5eaca9b09841495c5930485613d10565b807fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f155604051908152a13880614109565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50808210613fd7565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff929092166024830152604480830193909352918152613d8d9161421f606483613657565b613eb5565b604051906142318261361f565b8160a06000918281528260208201528260408201528260608201528260808201520152565b61425e614224565b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05490604051926142d38461361f565b8084528160208501528260408501526060840152608083015260a082015290565b80156125c9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000918183527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d239160209183835273ffffffffffffffffffffffffffffffffffffffff906040918060038489200154169081156146e5573382149081156146b8575b501561464f576143e87fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d209182549089527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2287528489206143e181546142f4565b90556142f4565b905560028101809111614622578286527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d288452818620557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d27808452818620600183519161445483613603565b80548352015485820190815261446a8583614828565b156145df578151801590816145b6575b825191821561458e575b1561457b575b5050519081614569575b5050828652835284600182822082815501557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d266144d181546142f4565b90556002817fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21968754968582528652200154614534575b7f319861d91651b1d776940afecf33ec848245a2b1fb1854613bbe2a367b54f79293945051908152a190565b61455e7f319861d91651b1d776940afecf33ec848245a2b1fb1854613bbe2a367b54f792946142f4565b809555849350614508565b51908752818552828720553880614494565b89528387526001858a200155388061448a565b817fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2555614484565b82517fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d245561447a565b60648685519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60848584519062461bcd60e51b82526004820152602d60248201527f4f6e6c792070726f7669646572206f72206465616c206f776e65722063616e2060448201527f72656d6f766520776f726b6572000000000000000000000000000000000000006064820152fd5b90507fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb805416331438614381565b60648685519062461bcd60e51b82526004820152601560248201527f436f6d70757465556e6974206e6f7420666f756e6400000000000000000000006044820152fd5b90604051907fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060208301937f0e21d2e2d5be9ded2ebc4e15f49071921d3423c94178bed2c85195b579511f70855260601b1660408301526054820152605481526080810181811067ffffffffffffffff8211176121665760405251902090565b908151159182159261481a575b5081156147ef575b81156147c7575090565b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10541490565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f54811491506147bd565b6020015115159150386147b5565b908151159182159261489a575b50811561486f575b8115614847575090565b90507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d25541490565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d24548114915061483d565b602001511515915038614835565b80156149e55760008181527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d12908160205261490083604083206001604051916148f083613603565b80548352015460208201526147a8565b6149a1577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10918254907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1161495481546139c9565b9055848215614979579060409392916001955585835260205280838320558152200155565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5550505055565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b80156149e55760008181527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d279081602052614a818360408320600160405191614a7183613603565b8054835201546020820152614828565b6149a1577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d25918254907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d26614ad581546139c9565b9055848215614afa579060409392916001955585835260205280838320558152200155565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d245550505055565b73ffffffffffffffffffffffffffffffffffffffff809116908115614bb4577fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb80805490837fffffffffffffffffffffffff00000000000000000000000000000000000000008316179055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b73ffffffffffffffffffffffffffffffffffffffff7fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb8054163303614c2557565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220420222d341a2d3dd8e113c1c03308fb70e02a17f2f1dc969bd95a2852bc078ba64736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163055236f41461349b5750806307da68f514613246578063108d2f521461320957806314d3b767146130425780631763451414613005578063176474cf14612fe45780631af57b9614612e39578063206bb6e8146128785780632943dcab1461283b5780632b9f5b32146127f05780632db31193146127b35780632e1a7d4d146123a55780633013ce29146123525780633591187c146121955780633659cfe614611f4d578063378b22e414611f105780634b66a30914611cf65780634d7599f114611cb95780634e69d56014611c915780634f1ef2861461196457806352d1902d1461188257806367c17a0b146118215780636cd13448146117e4578063715018a614611744578063745e920b1461164c5780637878e81b1461161e5780637dfb6626146113a05780638a0c725b146113635780638d5ddbb3146111ac5780638da5cb5b146111595780639bc66868146110a1578063ac027f9714611050578063b55ec18a14611007578063b6b55f2514610e0a578063cffe224414610de9578063d3cde34414610bc6578063d5053ab0146108ff578063e93c4f151461079d578063edd0d73414610760578063eebe998f14610366578063f2fde38b1461033b5763fc1e5e2a146101ed57600080fd5b34610336576000600319360112610336577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d805461022a816139b1565b6102376040519182613657565b81815260209182820180946000527fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0956000915b8383106102e55760408051878152865181890181905289928201908960005b8281106102965784840385f35b909192826040826102d66001948a51602080917fffffffff0000000000000000000000000000000000000000000000000000000081511684520151910152565b01960191019492919094610289565b6002866001926040516102f781613603565b7fffffffff00000000000000000000000000000000000000000000000000000000865460e01b168152848601548382015281520192019201919061026a565b600080fd5b34610336576020600319360112610336576103646103576135a7565b61035f614be5565b614b22565b005b346103365760406003193601126103365761037f6135a7565b6024357fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20918254917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a5483101561071c576103da8183614728565b92836000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2360209581875273ffffffffffffffffffffffffffffffffffffffff9485600360406000200154166106d857851692836000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d228089526040600020547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b5481101561066e57906104936104a593926139c9565b90866000528a526040600020556139c9565b90557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d085492604051947f766718080000000000000000000000000000000000000000000000000000000086528786600481847f0000000000000000000000000000000000000000000000000000000000000000165afa9586156106625787928991600098610626575b5096867f865afb485bc19debe6b3005a955507b9380643890b997437eac163d3345167ba96946040969460059461061e9b89519761056b8961361f565b8489528289019182528a8901926000845260608a01958b875260808b0197885260a08b01988952600052528960002097518855516001880155516002870155600386019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055516004840155519101556105eb86614a29565b81519086825287820152a130337f0000000000000000000000000000000000000000000000000000000000000000613e3d565b604051908152f35b975094925086819492943d831161065b575b6106428183613657565b810103126103365794519490929091869188908661052e565b503d610638565b6040513d6000823e3d90fd5b60848a6040519062461bcd60e51b82526004820152602660248201527f4d617820756e6974732070657220636f6d707574652070726f7669646572207260448201527f65616368656400000000000000000000000000000000000000000000000000006064820152fd5b6064886040519062461bcd60e51b82526004820152600f60248201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f54617267657420756e69747320726561636865640000000000000000000000006044820152fd5b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0854604051908152f35b34610336576000600319360112610336576107b6614256565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115610662576000916108cd575b60206060846108c3857fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f2547fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549386613d1d565b0151604051908152f35b90506020813d82116108f7575b816108e760209383613657565b810103126103365751602061082a565b3d91506108da565b34610336576040600319360112610336576004356024357fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2190815492806000526020917fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2383526040600020938115610b8257600286950190815415610b45575b50817fcf79e0e27c8c35d39bd9b727f35e6f79573597f660c88baf483fc1511c49203c926040925581519084825285820152a1604051917f76671808000000000000000000000000000000000000000000000000000000008352808360048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa92831561066257600093610b0e575b5091610b05600194927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f360a0957f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5492600052526040600020967fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f15494610adb8383610ab0614256565b987fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490898b613d1d565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954918587613fc9565b84550151910155005b939192508084813d8311610b3e575b610b278183613657565b810103126103365792519092909190610b05610a26565b503d610b1d565b9450817fcf79e0e27c8c35d39bd9b727f35e6f79573597f660c88baf483fc1511c49203c92604092610b76896139c9565b8098559250925061097f565b6064846040519062461bcd60e51b82526004820152601760248201527f576f726b657249642063616e277420626520656d7074790000000000000000006044820152fd5b346103365760208060031936011261033657600435806000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d28808352604060002054916040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938582600481887f0000000000000000000000000000000000000000000000000000000000000000165afa91821561066257600092610dba575b5011610d76577fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d93816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2391828252604060002094600360048701549601541693825260006040812055610d1685857f00000000000000000000000000000000000000000000000000000000000000006141bd565b6000525260006005604082208281558260018201558260028201558260038201558260048201550155610d71604051928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a1005b6064846040519062461bcd60e51b82526004820152601860248201527f436f6c6c61746572616c206e6f7420617661696c61626c6500000000000000006044820152fd5b9091508581813d8311610de2575b610dd28183613657565b8101031261033657519086610c7f565b503d610dc8565b3461033657604060031936011261033657602061061e60243560043561431f565b34610336576020806003193601126103365760043590610e28614be5565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8284600481847f0000000000000000000000000000000000000000000000000000000000000000165afa93841561066257600094610fd8575b5081610fcf91610fa37f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea967fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5491807fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f15492610f6a8583610f3f614256565b967fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908589613d1d565b60608401610f79898251613d10565b90527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541630903390613e3d565b604051908152a1005b93508284813d8311611000575b610fef8183613657565b810103126103365792519281610e9d565b503d610fe5565b3461033657600060031936011261033657602060ff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e54166040519061104c816135ca565b8152f35b3461033657600060031936011261033657602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461033657600060031936011261033657600060206040516110c281613603565b8281520152604080516110d481613603565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d055460e01b7fffffffff00000000000000000000000000000000000000000000000000000000168082527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0654602092830190815283519182525191810191909152f35bf35b3461033657600060031936011261033657602073ffffffffffffffffffffffffffffffffffffffff7fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb805416604051908152f35b34610336576000600319360112610336577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d11546111e8816139b1565b906111f66040519283613657565b8082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09081611225826139b1565b019060209136838601377f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f546000905b8282106113195750505082519061128461126e836139b1565b9261127c6040519485613657565b8084526139b1565b828201930136843760005b84518110156112bf57806112a66112ba92876139f6565b5160601c6112b482866139f6565b526139c9565b61128f565b50925090604051928392818401908285525180915260408401929160005b8281106112ec57505050500390f35b835173ffffffffffffffffffffffffffffffffffffffff16855286955093810193928101926001016112dd565b8061132483886139f6565b526000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d12835261135d600160406000200154916139c9565b90611255565b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b54604051908152f35b346103365760208060031936011261033657600435806000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f3825260406000206040517f7667180800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff908481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa908115610662576000916115f1575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54916114a5614256565b916114f784837fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908588613d1d565b60a08301516115078754836139a4565b6115298661152460018b019361151e8554876139a4565b906139a4565b613cfd565b9788156115ad5789968996868d97877f9b5336625f529f36cb0543297bdf5075b7f6b830bb892ff97c09fbfeae6255d59d9760409d976115a29a61157898555560808401610f798982516139a4565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906141bd565b8351928352820152a1005b60648b6040519062461bcd60e51b82526004820152600a60248201527f4e6f2072657761726473000000000000000000000000000000000000000000006044820152fd5b90508481813d8311611617575b6116088183613657565b81010312610336575185611456565b503d6115fe565b346103365760206003193601126103365760043560038110156103365761036490611647614be5565b613adc565b3461033657602060031936011261033657611665614224565b506004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2360205260c060406000206005604051916116a68361361f565b80548352600181015460208401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a0820152611157604051809260a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b346103365760006003193601126103365761175d614be5565b600073ffffffffffffffffffffffffffffffffffffffff7fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb808054907fffffffffffffffffffffffff000000000000000000000000000000000000000082169055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54604051908152f35b346103365760406003193601126103365761184661183d6135a7565b60243590614728565b6000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2360205260206001604060002001541515604051908152f35b346103365760006003193601126103365773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036118fa5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b6040600319360112610336576119786135a7565b6024359067ffffffffffffffff821161033657366023830112156103365781600401356119a481613698565b926119b26040519485613657565b8184526020918285019136602483830101116103365781600092602486930185378601015273ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690611a1c823014156136d2565b611a4b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614613743565b611a53614be5565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a8b575050505061036491506137b4565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa60009181611c62575b50611b36576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611bf857611b44836137b4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590611bf0575b611b7a57005b60008091610364957f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60405196611bb08861363b565b602788528701527f206661696c65640000000000000000000000000000000000000000000000000060408701525190845af4611bea613886565b916138b6565b506001611b74565b6084846040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d8311611c8a575b611c7a8183613657565b8101031261033657519088611ac7565b503d611c70565b34610336576000600319360112610336576020611cac613ba5565b6040519061104c816135ca565b346103365760006003193601126103365760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154604051908152f35b34610336576000600319360112610336577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d20547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611d5661126e836139b1565b0160005b818110611ef9578260007fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d245490815b611e205760408051602080825285518183018190528187019383019160005b828110611db55784840385f35b9091928260c082611e116001948a5160a0809180518452602081015160208501526040810151604085015273ffffffffffffffffffffffffffffffffffffffff6060820151166060850152608081015160808501520151910152565b01960191019492919094611da8565b816000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d238152611ee6604060002093604051611e7f8161361f565b85548152600560019687810154868401526002810154604084015273ffffffffffffffffffffffffffffffffffffffff600382015416606084015260048101546080840152015460a0820152611ed582896139f6565b52611ee081886139f6565b506139c9565b9360005252604060002001549081611d89565b602090611f04614224565b82828601015201611d5a565b346103365760006003193601126103365760207fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154604051908152f35b346103365760208060031936011261033657611f676135a7565b73ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001692611fad843014156136d2565b611fdc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614613743565b611fe4614be5565b604051938285019185831067ffffffffffffffff84111761216657826040526000865260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435416600014612041575050505061036491506137b4565b84939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa60009181612137575b506120ec576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b03611bf8576120fa836137b4565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a283511580159061212f57611b7a57005b506000611b74565b9091508681813d831161215f575b61214f8183613657565b810103126103365751908861207d565b503d612145565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b34610336576020600319360112610336576040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa80156106625760009061231f575b61036491507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21549060ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f454166000146123165761229b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f5545b60043561431f565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c54927fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f154926122ee8583610f3f614256565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b61229b81612293565b506020813d821161234a575b8161233860209383613657565b81010312610336576103649051612219565b3d915061232b565b3461033657600060031936011261033657602073ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d075416604051908152f35b346103365760208060031936011261033657600435906123c3614be5565b604051917f7667180800000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff928281600481877f0000000000000000000000000000000000000000000000000000000000000000165afa90811561066257600091612786575b507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2154907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549160ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f454166000146125f857507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f55460028101925082106125c957111561255f57610fcf817f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b56947fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee6125338382546139a4565b90557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d07541633906141bd565b6084826040519062461bcd60e51b82526004820152602d60248201527f43616e2774207769746864726177206265666f726520322065706f636873206160448201527f66746572206465616c20656e64000000000000000000000000000000000000006064820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b612600614256565b9161265284837fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f254908588613d1d565b606083016126618682516139a4565b81527f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851685036125c9576126ba7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a548660011b613cfd565b90511061271c57610fcf938593837f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569994612717947f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b611578565b6084866040519062461bcd60e51b82526004820152602c60248201527f467265652062616c616e6365206e6565647320746f20636f766572206d696e6960448201527f6d756d20322065706f63687300000000000000000000000000000000000000006064820152fd5b90508281813d83116127ac575b61279d8183613657565b81010312610336575184612439565b503d612793565b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0954604051908152f35b34610336576020600319360112610336576004356000527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d286020526020604060002054604051908152f35b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a54604051908152f35b346103365760031936016101608112610336576040136103365760443573ffffffffffffffffffffffffffffffffffffffff811681036103365767ffffffffffffffff8061010435116103365736602361010435011215610336578061010435600401351161033657366024610104356004013560061b610104350101116103365760036101243510156103365780610144351161033657366023610144350112156103365761014435600401351161033657366024610144356004013560051b61014435010111610336576000549060ff8260081c161591828093612e2c575b8015612e15575b15612dab578260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00831617600055612d7c575b506129b860ff60005460081c166129aa81613b34565b6129b381613b34565b613b34565b6129c133614b22565b6129d260ff60005460081c16613b34565b437f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d045573ffffffffffffffffffffffffffffffffffffffff7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0791167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790556064357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d08556084357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095560a4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0a5560c4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0b5560e4357f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5560005b61010435600401358110612c065750612b2b61012435613adc565b60005b61014435600401358110612ba05750612b45613a0a565b612b4b57005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60248160051b610144350101359073ffffffffffffffffffffffffffffffffffffffff8216820361033657612bfc7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000612c019360601b166148a8565b6139c9565b612b2e565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d54680100000000000000008110156121665760018101807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d55811015612d4d577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0d60005260011b90817fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e09501918160061b61010435019260248401357fffffffff000000000000000000000000000000000000000000000000000000008116810361033657612d48947fcfcab6f3bf9ee9c2484fd18eeb2a9bd794cfdeb4ec98cce66c941e6633f8e0969260449260e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905501359101556139c9565b612b10565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011760005582612994565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156129605750600160ff821614612960565b50600160ff821610612959565b3461033657602080600319360112610336576004356000527fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f381526040600020604051907f76671808000000000000000000000000000000000000000000000000000000008252828260048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561066257600092612fb3575b509061152461061e9261151e7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d215491600160a0612fa77f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c5497612f9f89612f52614256565b987fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25490858c613d1d565b8454906139a4565b940151910154906139a4565b91508282813d8311612fdd575b612fca8183613657565b8101031261033657905190611524612eed565b503d612fc0565b3461033657604060031936011261033657612ffd614be5565b610364613a0a565b346103365760006003193601126103365760207f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0454604051908152f35b3461033657602080600319360112610336577fffffffffffffffffffffffffffffffffffffffff00000000000000000000000061307d6135a7565b613085614be5565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d129182825260406000206001604051916130c783613603565b8054835201548382019081526130dd83836147a8565b156131c55781518015908161319c575b8251918215613174575b1561315e575b5050519081613149575b505060005252600060016040822082815501557f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1161314581546142f4565b9055005b51906000528383526040600020558380613107565b60005285855260016040600020015585806130fd565b817f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10556130f7565b82517f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f556130ed565b6064846040519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b346103365760006003193601126103365760207fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2054604051908152f35b346103365760006003193601126103365761325f614be5565b613267614256565b604051907f76671808000000000000000000000000000000000000000000000000000000008252602090818360048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9283156106625760009361346b575b509160007f3ad16bb58712aa329948d76146b096a4f4b85e024d99473dc50bcd358811b86c936133cb7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1918254907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21546133a17fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f25493827f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0c549586928b87613d1d565b80877f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d095493613fc9565b557fcecd349d986645e1758ec135f91f1ad20564a8bcc6c2b5a5eaca9b09841495c582604051838152a17fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055807fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f555604051908152a1005b92508183813d8311613494575b6134828183613657565b810103126103365791519160006132de565b503d613478565b3461033657602060031936011261033657602080917fffffffffffffffffffffffffffffffffffffffff0000000000000000000000006134d96135a7565b60601b1690816000527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d12835260406000209061351481613603565b600182549283835201549384910152159182159261359d575b508115613572575b8115613547575b506040519015158152f35b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1054148261353c565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5481149150613535565b151591508361352d565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361033657565b600311156135d457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6040810190811067ffffffffffffffff82111761216657604052565b60c0810190811067ffffffffffffffff82111761216657604052565b6060810190811067ffffffffffffffff82111761216657604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761216657604052565b67ffffffffffffffff811161216657601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b156136d957565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561374a57565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b1561381c5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d156138b1573d9061389782613698565b916138a56040519384613657565b82523d6000602084013e565b606090565b9192901561391757508151156138ca575090565b3b156138d35790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b82519091501561392a5750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b84811061398d575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161394c565b919082039182116125c957565b67ffffffffffffffff81116121665760051b60200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146125c95760010190565b8051821015612d4d5760209160051b010190565b6004357fffffffff00000000000000000000000000000000000000000000000000000000811690818103610336577fc820a66d3bdd50a45cf12cda6dc8ec9e94fb5123edd7da736eea18316f8523a0916040917f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d059060e01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000825416179055602435807f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d065582519182526020820152a1565b613ae5816135ca565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0e9060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055565b15613b3b57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b60ff7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f45416613cf8577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21547f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d09541115613c1d57600090565b6040517f7667180800000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561066257600091613cc4575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1541015613cbf57600090565b600190565b906020823d8211613cf0575b81613cdd60209383613657565b81010312613ced57505138613c91565b80fd5b3d9150613cd0565b600290565b818102929181159184041417156125c957565b919082018092116125c957565b91939092948415801590818092613e34575b80613e2b575b15613d8f57505091613d5860a092611524613d8495611524899a613d8a9a6139a4565b60608201613d678282516139a4565b9052613d7860808301918251613d10565b905201938451926139a4565b90613d10565b90525b565b9080929497969190613e17575b15613db95750505050613d8460a0613d8a939401938451926139a4565b92939281613e0c575b50613dcf575b5050505050565b611524608093611524613e0096613de5956139a4565b9260608101613df58582516139a4565b905201918251613d10565b90523880808080613dc8565b905082111538613dc2565b508085118015613d9c575080861015613d9c565b50878711613d35565b50868611613d2f565b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761216657613d8d926040525b73ffffffffffffffffffffffffffffffffffffffff1690613f1c604051613edb81613603565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1611bea613886565b805191821591848315613fa1575b505050905015613f375750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312613fc557820151908115158203613ced575080388084613f2a565b5080fd5b9380919593921015806141b4575b156141015750505060007fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f1557fcecd349d986645e1758ec135f91f1ad20564a8bcc6c2b5a5eaca9b09841495c5602060405160008152a15b805160608201518091036140d9575b50602081015160808201518091036140b1575b5060a06040820151910151809103614089575b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f255565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05538614064565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef5538614051565b7fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee553861403e565b811015614110575b505061402f565b61411f90606084015192613cfd565b8015614185576141546020917fcecd349d986645e1758ec135f91f1ad20564a8bcc6c2b5a5eaca9b09841495c5930485613d10565b807fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f155604051908152a13880614109565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50808210613fd7565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff929092166024830152604480830193909352918152613d8d9161421f606483613657565b613eb5565b604051906142318261361f565b8160a06000918281528260208201528260408201528260608201528260808201520152565b61425e614224565b507fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ee547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4ef547fc576653ddc86d50a6e4d0122949ce4f03ce67b12fb750e4fa8bed8f88ff5f4f05490604051926142d38461361f565b8084528160208501528260408501526060840152608083015260a082015290565b80156125c9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000918183527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d239160209183835273ffffffffffffffffffffffffffffffffffffffff906040918060038489200154169081156146e5573382149081156146b8575b501561464f576143e87fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d209182549089527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2287528489206143e181546142f4565b90556142f4565b905560028101809111614622578286527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d288452818620557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d27808452818620600183519161445483613603565b80548352015485820190815261446a8583614828565b156145df578151801590816145b6575b825191821561458e575b1561457b575b5050519081614569575b5050828652835284600182822082815501557fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d266144d181546142f4565b90556002817fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d21968754968582528652200154614534575b7f319861d91651b1d776940afecf33ec848245a2b1fb1854613bbe2a367b54f79293945051908152a190565b61455e7f319861d91651b1d776940afecf33ec848245a2b1fb1854613bbe2a367b54f792946142f4565b809555849350614508565b51908752818552828720553880614494565b89528387526001858a200155388061448a565b817fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d2555614484565b82517fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d245561447a565b60648685519062461bcd60e51b82526004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60848584519062461bcd60e51b82526004820152602d60248201527f4f6e6c792070726f7669646572206f72206465616c206f776e65722063616e2060448201527f72656d6f766520776f726b6572000000000000000000000000000000000000006064820152fd5b90507fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb805416331438614381565b60648685519062461bcd60e51b82526004820152601560248201527f436f6d70757465556e6974206e6f7420666f756e6400000000000000000000006044820152fd5b90604051907fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060208301937f0e21d2e2d5be9ded2ebc4e15f49071921d3423c94178bed2c85195b579511f70855260601b1660408301526054820152605481526080810181811067ffffffffffffffff8211176121665760405251902090565b908151159182159261481a575b5081156147ef575b81156147c7575090565b90507f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10541490565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f54811491506147bd565b6020015115159150386147b5565b908151159182159261489a575b50811561486f575b8115614847575090565b90507fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d25541490565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d24548114915061483d565b602001511515915038614835565b80156149e55760008181527f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d12908160205261490083604083206001604051916148f083613603565b80548352015460208201526147a8565b6149a1577f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d10918254907f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d1161495481546139c9565b9055848215614979579060409392916001955585835260205280838320558152200155565b7f8953f5482bc1a621075e75537625fa3bd2025e7df7baf6ba1dbfbf2212912d0f5550505055565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b80156149e55760008181527fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d279081602052614a818360408320600160405191614a7183613603565b8054835201546020820152614828565b6149a1577fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d25918254907fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d26614ad581546139c9565b9055848215614afa579060409392916001955585835260205280838320558152200155565b7fec986952a0671e4b2e5ec4461085fb880bc7a7b88668240f8d55173039155d245550505055565b73ffffffffffffffffffffffffffffffffffffffff809116908115614bb4577fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb80805490837fffffffffffffffffffffffff00000000000000000000000000000000000000008316179055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b60246040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152fd5b73ffffffffffffffffffffffffffffffffffffffff7fc43ef91433cf7d0ab2ca98c18785d28d6a5685461d30e867805d7a83cc8deb8054163303614c2557565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220420222d341a2d3dd8e113c1c03308fb70e02a17f2f1dc969bd95a2852bc078ba64736f6c63430008130033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 371,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 374,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 353,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 668,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9542,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(OwnableStorage)9539_storage"
      },
      {
        "astId": 3476,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(ConfigStorage)3473_storage"
      },
      {
        "astId": 5402,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "117",
        "type": "t_struct(WorkerManagerStorage)5399_storage"
      },
      {
        "astId": 4053,
        "contract": "contracts/deal/Deal.sol:Deal",
        "label": "_storage",
        "offset": 0,
        "slot": "126",
        "type": "t_struct(DealStorage)4050_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(CIDV1)5986_storage)dyn_storage": {
        "base": "t_struct(CIDV1)5986_storage",
        "encoding": "dynamic_array",
        "label": "struct CIDV1[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC20)2321": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(AccessType)5994": {
        "encoding": "inplace",
        "label": "enum IConfig.AccessType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ComputeProviderInfo)5364_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorkerManager.ComputeProviderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeProviderInfo)5364_storage"
      },
      "t_mapping(t_bytes32,t_struct(ComputeUnit)6210_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IWorkerManager.ComputeUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeUnit)6210_storage"
      },
      "t_mapping(t_bytes32,t_struct(ComputeUnitPaymentInfo)4017_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Deal.ComputeUnitPaymentInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeUnitPaymentInfo)4017_storage"
      },
      "t_mapping(t_bytes32,t_struct(Element)9127_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedListWithUniqueKeys.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)9127_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32List)9139_storage": {
        "encoding": "inplace",
        "label": "struct LinkedListWithUniqueKeys.Bytes32List",
        "members": [
          {
            "astId": 9129,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_first",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9131,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_last",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9133,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9138,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "_elements",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(Element)9127_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CIDV1)5986_storage": {
        "encoding": "inplace",
        "label": "struct CIDV1",
        "members": [
          {
            "astId": 5983,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "prefixes",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 5985,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ComputeProviderInfo)5364_storage": {
        "encoding": "inplace",
        "label": "struct WorkerManager.ComputeProviderInfo",
        "members": [
          {
            "astId": 5360,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5363,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitsIds",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Bytes32List)9139_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(ComputeUnit)6210_storage": {
        "encoding": "inplace",
        "label": "struct IWorkerManager.ComputeUnit",
        "members": [
          {
            "astId": 6199,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6201,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6203,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "workerId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 6205,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6207,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "collateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6209,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "created",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ComputeUnitPaymentInfo)4017_storage": {
        "encoding": "inplace",
        "label": "struct Deal.ComputeUnitPaymentInfo",
        "members": [
          {
            "astId": 4014,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "startedEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4016,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "gapsDelta",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ConfigStorage)3473_storage": {
        "encoding": "inplace",
        "label": "struct Config.ConfigStorage",
        "members": [
          {
            "astId": 3446,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "creationBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3449,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "appCID",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(CIDV1)5986_storage"
          },
          {
            "astId": 3452,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "paymentToken",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)2321"
          },
          {
            "astId": 3454,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "collateralPerWorker",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3456,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "minWorkers",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3458,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "targetWorkers",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3460,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "maxWorkersPerProvider",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3462,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "pricePerWorkerEpoch",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3466,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "effectors",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_struct(CIDV1)5986_storage)dyn_storage"
          },
          {
            "astId": 3469,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "accessType",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(AccessType)5994"
          },
          {
            "astId": 3472,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "accessList",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(Bytes32List)9139_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(DealStorage)4050_storage": {
        "encoding": "inplace",
        "label": "struct Deal.DealStorage",
        "members": [
          {
            "astId": 4032,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "totalBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4034,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "lockedBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4036,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "gapsEpochCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4038,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "maxPaidEpoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4040,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "lastCommitedEpoch",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4045,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "cUnitPaymentInfo",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_bytes32,t_struct(ComputeUnitPaymentInfo)4017_storage)"
          },
          {
            "astId": 4047,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "isEnded",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4049,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "endedEpoch",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Element)9127_storage": {
        "encoding": "inplace",
        "label": "struct LinkedListWithUniqueKeys.Element",
        "members": [
          {
            "astId": 9124,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9126,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OwnableStorage)9539_storage": {
        "encoding": "inplace",
        "label": "struct OwnableUpgradableDiamond.OwnableStorage",
        "members": [
          {
            "astId": 9538,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WorkerManagerStorage)5399_storage": {
        "encoding": "inplace",
        "label": "struct WorkerManager.WorkerManagerStorage",
        "members": [
          {
            "astId": 5379,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5381,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "workerCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5386,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeProviderInfo",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(ComputeProviderInfo)5364_storage)"
          },
          {
            "astId": 5391,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitById",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_struct(ComputeUnit)6210_storage)"
          },
          {
            "astId": 5394,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "computeUnitsIdsList",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Bytes32List)9139_storage"
          },
          {
            "astId": 5398,
            "contract": "contracts/deal/Deal.sol:Deal",
            "label": "collateralWithdrawEpochByComputeUnitId",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}