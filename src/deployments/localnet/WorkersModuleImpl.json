{
  "address": "0xbd679f14b9D913e78a7F737839518B03986b31aD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PATCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "PATRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "WorkerRegistred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        }
      ],
      "name": "WorkerUnregistred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "peerId",
          "type": "bytes32"
        }
      ],
      "name": "createPAT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPAT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct PAT",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPATCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPATs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "peerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "workerId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "created",
              "type": "uint256"
            }
          ],
          "internalType": "struct PAT[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getUnlockedAmountBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "patId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "workerId",
          "type": "bytes32"
        }
      ],
      "name": "setWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce4bc1714994ddc93c059c61173b99ddc32bfa1571d3a45cc313d87e22999221",
  "receipt": {
    "to": null,
    "from": "0x627e730fd1361E6FFcee236DAc08F82EAa8ac7cD",
    "contractAddress": "0xbd679f14b9D913e78a7F737839518B03986b31aD",
    "transactionIndex": 0,
    "gasUsed": "2344060",
    "logsBloom": "0x
    "blockHash": "0x4d9d5f5142d0c74b275e518800edabb813070340259f835cc9cd45ec2a739f30",
    "transactionHash": "0xce4bc1714994ddc93c059c61173b99ddc32bfa1571d3a45cc313d87e22999221",
    "logs": [],
    "blockNumber": 64,
    "cumulativeGasUsed": "2344060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7aa10cf0a18fda71d8ff12e995812c76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PATCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PATRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"WorkerRegistred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"}],\"name\":\"WorkerUnregistred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"}],\"name\":\"createPAT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPAT\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct PAT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPATCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPATs\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"peerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"internalType\":\"struct PAT[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getUnlockedAmountBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"patId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"workerId\",\"type\":\"bytes32\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deal/WorkersModule.sol\":\"WorkersModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/WorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"./base/ModuleBase.sol\\\";\\nimport \\\"../global/interfaces/IGlobalConfig.sol\\\";\\nimport \\\"../utils/LinkedList.sol\\\";\\nimport \\\"../utils/WithdrawRequests.sol\\\";\\nimport \\\"./interfaces/IWorkersModule.sol\\\";\\nimport \\\"./interfaces/IConfigModule.sol\\\";\\nimport \\\"./interfaces/ICore.sol\\\";\\nimport \\\"./interfaces/IStatusModule.sol\\\";\\nimport \\\"./base/Types.sol\\\";\\n\\ncontract WorkersModuleState {\\n    using LinkedList for LinkedList.Bytes32List;\\n\\n    // ---- Structs ----\\n\\n    struct OwnerInfo {\\n        uint256 patCount;\\n        LinkedList.Bytes32List patsIds;\\n    }\\n\\n    // ---- Constants ----\\n    bytes32 internal constant _PAT_PREFIX = keccak256(\\\"fluence.pat\\\");\\n\\n    // ---- Events ----\\n    event PATCreated(bytes32 id, address owner);\\n    event PATRemoved(bytes32 id);\\n\\n    event WorkerRegistred(bytes32 patId, bytes32 workerId);\\n    event WorkerUnregistred(bytes32 patId);\\n\\n    event CollateralWithdrawn(address owner, uint256 amount);\\n\\n    // ---- Storage ----\\n    uint256 internal _patCount;\\n    LinkedList.Bytes32List _freeIndexes;\\n\\n    mapping(address => OwnerInfo) internal _ownersInfo;\\n    mapping(bytes32 => PAT) internal _patById;\\n\\n    LinkedList.Bytes32List _patsIdsList;\\n\\n    mapping(address => WithdrawRequests.Requests) internal _withdrawRequests;\\n}\\n\\ncontract WorkersModule is WorkersModuleState, ModuleBase, IWorkersModule {\\n    using LinkedList for LinkedList.Bytes32List;\\n    using WithdrawRequests for WithdrawRequests.Requests;\\n    using SafeERC20 for IERC20;\\n\\n    // ---- Public view ----\\n\\n    function getPAT(bytes32 id) external view returns (PAT memory) {\\n        return _patById[id];\\n    }\\n\\n    function getPATCount() external view returns (uint256) {\\n        return _patCount;\\n    }\\n\\n    function getPATs() public view returns (PAT[] memory) {\\n        PAT[] memory pats = new PAT[](_patCount);\\n\\n        uint256 index = 0;\\n        bytes32 patId = _patsIdsList.first();\\n        while (patId != bytes32(0)) {\\n            pats[index] = _patById[patId];\\n            index++;\\n\\n            patId = _patsIdsList.next(patId);\\n        }\\n\\n        return pats;\\n    }\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256) {\\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\\n        return _withdrawRequests[owner].getAmountBy(timestamp - globalConfig.withdrawTimeout());\\n    }\\n\\n    // ---- Public Mutable ----\\n    function createPAT(address computeProvider, bytes32 peerId) external returns (bytes32) {\\n        ICore core = _core();\\n\\n        // check params and limits\\n        IConfigModule config = core.configModule();\\n\\n        uint256 globalPATCount = _patCount;\\n        require(globalPATCount < config.targetWorkers(), \\\"Target workers reached\\\");\\n\\n        // transfer collateral\\n        uint256 requiredCollateral = config.requiredCollateral();\\n        config.fluenceToken().safeTransferFrom(msg.sender, address(this), requiredCollateral);\\n\\n        // create PAT\\n        bytes32 id = keccak256(abi.encodePacked(_PAT_PREFIX, computeProvider, peerId));\\n        require(_patById[id].owner == address(0x00), \\\"Id already used\\\");\\n\\n        uint256 patCountByOwner = _ownersInfo[computeProvider].patCount;\\n\\n        _ownersInfo[computeProvider].patCount = ++patCountByOwner;\\n        _patCount = ++globalPATCount;\\n\\n        uint index = uint(_freeIndexes.first());\\n        if (index == 0) {\\n            index = globalPATCount;\\n        }\\n\\n        _patById[id] = PAT({\\n            id: id,\\n            peerId: peerId,\\n            index: index,\\n            workerId: bytes32(0),\\n            owner: computeProvider,\\n            collateral: requiredCollateral,\\n            created: block.number\\n        });\\n\\n        _patsIdsList.push(id);\\n\\n        // change status\\n        IStatusModule statusController = core.statusModule();\\n        {\\n            DealStatus status = statusController.status();\\n            if (status == DealStatus.WaitingForWorkers && globalPATCount >= config.minWorkers()) {\\n                status = DealStatus.Working;\\n                statusController.changeStatus(status);\\n            }\\n        }\\n\\n        emit PATCreated(id, computeProvider);\\n\\n        return id;\\n    }\\n\\n    function setWorker(bytes32 patId, bytes32 workerId) external {\\n        PAT storage pat = _patById[patId];\\n\\n        if (pat.workerId != bytes32(0)) {\\n            emit WorkerUnregistred(patId);\\n        }\\n\\n        pat.workerId = workerId;\\n\\n        emit WorkerRegistred(patId, workerId);\\n    }\\n\\n    function exit(bytes32 patId) external {\\n        PAT storage pat = _patById[patId];\\n\\n        // check owner\\n        address owner = pat.owner;\\n        require(owner == msg.sender, \\\"PAT doesn't exist\\\");\\n\\n        // change pat count\\n        uint256 newPatCount = _patCount;\\n        _ownersInfo[owner].patCount--;\\n        _patCount = --newPatCount;\\n\\n        // load modules\\n        ICore core = _core();\\n        IConfigModule config = core.configModule();\\n        IStatusModule statusController = core.statusModule();\\n\\n        // change status\\n        if (statusController.status() == DealStatus.Working && newPatCount < config.minWorkers()) {\\n            statusController.changeStatus(DealStatus.WaitingForWorkers);\\n        }\\n\\n        // return collateral and index\\n        _freeIndexes.push(bytes32(pat.index));\\n        _withdrawRequests[owner].push(pat.collateral);\\n\\n        // remove PAT\\n        delete _patById[patId];\\n        _patsIdsList.remove(patId);\\n\\n        emit PATRemoved(patId);\\n    }\\n\\n    function withdrawCollateral(address owner) external {\\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\\n\\n        uint256 amount = _withdrawRequests[owner].confirmBy(block.timestamp - globalConfig.withdrawTimeout());\\n        globalConfig.fluenceToken().safeTransfer(owner, amount);\\n\\n        emit CollateralWithdrawn(owner, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x233ea665655b1b222e9128c90a3a0d03b679d2b36af31c51640b1f9220568e67\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\n\\ncontract ModuleBase is UUPSUpgradeable {\\n    bytes32 private constant _CORE_SLOT = keccak256(\\\"network.fluence.proxy.core\\\");\\n\\n    modifier onlyModule(Module module) {\\n        require(_core().moduleByType(module) == msg.sender, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyModules(Module[] calldata modules) {\\n        Module callerModule = _core().moduleByAddress(msg.sender);\\n\\n        bool isRequiredModule = false;\\n        for (uint256 i = 0; i < modules.length; i++) {\\n            if (modules[i] != callerModule) {\\n                continue;\\n            }\\n\\n            isRequiredModule = true;\\n            break;\\n        }\\n\\n        require(isRequiredModule, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_core().owner() == msg.sender, \\\"ModuleBase: caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCore() {\\n        require(address(_core()) == msg.sender, \\\"ModuleBase: caller is not core\\\");\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyCore {\\n        //TODO: check that new implementation from DAO\\n    }\\n\\n    function _core() internal view returns (ICore) {\\n        return ICore(StorageSlot.getAddressSlot(_CORE_SLOT).value);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x360c5ef6043a6089f9a7b6b8bf2dc1082d100a96e745d75133d3efd584f9cd7c\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\",\"keccak256\":\"0x9b0d5e06acd11ddf64e328e8303e29d1c30b4983b7684ab6121effd804c89e6e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfigModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\nimport \\\"../../global/interfaces/IGlobalConfig.sol\\\";\\n\\ninterface IConfigModule {\\n    function initialize(\\n        IERC20 paymentToken_,\\n        uint256 pricePerEpoch_,\\n        uint256 requiredCollateral_,\\n        CIDV1 calldata appCID_,\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        CIDV1[] calldata effectorWasmsCids_\\n    ) external;\\n\\n    function globalConfig() external view returns (IGlobalConfig);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function pricePerEpoch() external view returns (uint256);\\n\\n    function requiredCollateral() external view returns (uint256);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n}\\n\",\"keccak256\":\"0xbd12e7f4e91c72b8f85ca8a3e4c9b801fa6f5c8e3fb125b0a708b659a1a0a487\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IConfigModule.sol\\\";\\nimport \\\"./IPaymentModule.sol\\\";\\nimport \\\"./IStatusModule.sol\\\";\\nimport \\\"./IWorkersModule.sol\\\";\\n\\nenum Module {\\n    None,\\n    Config,\\n    Payment,\\n    Status,\\n    Workers\\n}\\n\\ninterface ICore {\\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\\n\\n    function moduleByType(Module module) external view returns (address);\\n\\n    function moduleByAddress(address module) external view returns (Module);\\n\\n    function configModule() external view returns (IConfigModule);\\n\\n    function paymentModule() external view returns (IPaymentModule);\\n\\n    function statusModule() external view returns (IStatusModule);\\n\\n    function workersModule() external view returns (IWorkersModule);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xf4481e85aba2e550992d0a58a2786fe5024dc6a4d374e1a6be7f5c141567d433\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IPaymentModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IPaymentModule {\\n    // ----------------- Types -----------------\\n    struct Particle {\\n        string air;\\n        string prevData;\\n        string params;\\n        string callResults;\\n    }\\n\\n    // ----------------- View -----------------\\n    function getRewardAmount(bytes32 particleHash, bytes32 patId) external view returns (uint);\\n\\n    function getPaymentBalance() external view returns (uint256);\\n\\n    function getLockedBalance() external view returns (uint256);\\n\\n    // ----------------- Mutable -----------------\\n    function depositToPaymentBalance(uint256 amount) external;\\n\\n    function withdrawFromPaymentBalance(uint256 amount) external;\\n\\n    function commitParticle(Particle calldata particle, bytes32[] memory patIds) external;\\n\\n    function withdrawReward(bytes32 patId, bytes32[] calldata particlesHashes) external;\\n}\\n\",\"keccak256\":\"0xba7f0683c5554a53af7b6f255f1a03baa0625e4b1921a269bdda72e931f8e49e\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IStatusModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nenum DealStatus {\\n    WaitingForWorkers,\\n    Working\\n}\\n\\ninterface IStatusModule {\\n    event StatusChanged(DealStatus newStatus);\\n\\n    function status() external view returns (DealStatus);\\n\\n    function startWorkingEpoch() external view returns (uint256);\\n\\n    function changeStatus(DealStatus status_) external;\\n}\\n\",\"keccak256\":\"0x8549a72e45e410676bb7598df990a0e5d4117bbb45f07dc2a3ff725b54f1fc2d\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../base/Types.sol\\\";\\n\\nstruct PAT {\\n    bytes32 id;\\n    uint256 index;\\n    bytes32 peerId;\\n    bytes32 workerId;\\n    address owner;\\n    uint256 collateral;\\n    uint256 created;\\n}\\n\\ninterface IWorkersModule {\\n    // ----------------- View -----------------\\n    function getPAT(bytes32 id) external view returns (PAT memory);\\n\\n    function getPATCount() external view returns (uint256);\\n\\n    function getPATs() external view returns (PAT[] memory);\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\\n\\n    // ----------------- View -----------------\\n    function createPAT(address computeProvider, bytes32 peerId) external returns (bytes32);\\n\\n    function exit(bytes32 id) external;\\n\\n    function withdrawCollateral(address owner) external;\\n\\n    function setWorker(bytes32 id, bytes32 workerId) external;\\n}\\n\",\"keccak256\":\"0xb322a8a09ec63cb79ac7d390e42f3006c0fe4b365413e5dbbc0a9ff34937840c\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\ninterface IEpochManager {\\n    function epochDuration() external view returns (uint256);\\n\\n    function currentEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x63cdc21c2c66a80f2d881f527aeaccc85af47241bdb81858e653c80ba94e58a8\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IFactory {\\n    function isDeal(address addr) external view returns (bool);\\n\\n    function createDeal(\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        CIDV1 calldata appCID_,\\n        CIDV1[] calldata effectors\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x52949a1903131361aac763178bdd03b548a1968ca4e1f2c226ea24b320e3fdd0\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEpochManager.sol\\\";\\nimport \\\"./IMatcher.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IGlobalConfig {\\n    function owner() external view returns (address);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function withdrawTimeout() external view returns (uint);\\n\\n    function epochManager() external view returns (IEpochManager);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0x9093d9dc62b9f134b2167f42a4b462d93ae4b8c9a042f5035960005f316f08fe\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../deal/interfaces/ICore.sol\\\";\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IMatcher {\\n    function getFreeWorkersSolts(bytes32 peerId) external view returns (uint);\\n\\n    function matchWithDeal(ICore deal) external;\\n}\\n\",\"keccak256\":\"0x30a620b75daaf37464bc2f94713767a16402cd05f2fc59f1140a7f8b7d1ecfde\",\"license\":\"Apache-2.0\"},\"contracts/utils/LinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nlibrary LinkedList {\\n    struct Element {\\n        bytes32 prev;\\n        bytes32 next;\\n    }\\n\\n    struct Bytes32List {\\n        bytes32 _first;\\n        bytes32 _last;\\n        mapping(bytes32 => Element) _elements;\\n    }\\n\\n    function push(Bytes32List storage self, bytes32 key) internal {\\n        require(key != bytes32(0x00), \\\"Key cannot be ZERO\\\");\\n        require(!exist(self, key), \\\"Key already exists\\\");\\n\\n        bytes32 oldLast = self._last;\\n\\n        if (oldLast == 0) {\\n            self._first = key;\\n            self._last = key;\\n            return;\\n        }\\n\\n        self._last = key;\\n        self._elements[key].prev = oldLast;\\n        self._elements[oldLast].next = key;\\n    }\\n\\n    function first(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._first;\\n    }\\n\\n    function last(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._last;\\n    }\\n\\n    function remove(Bytes32List storage self, bytes32 key) internal {\\n        Element memory element = self._elements[key];\\n\\n        require(_exist(self, element, key), \\\"Key does not exist\\\");\\n\\n        if (element.prev == bytes32(0x00)) {\\n            self._first = element.next;\\n        }\\n\\n        if (element.next == bytes32(0x00)) {\\n            self._last = element.prev;\\n        }\\n\\n        if (element.prev != bytes32(0x00)) {\\n            self._elements[element.prev].next = element.next;\\n        }\\n\\n        if (element.next != bytes32(0x00)) {\\n            self._elements[element.next].prev = element.prev;\\n        }\\n\\n        delete self._elements[key];\\n    }\\n\\n    function exist(Bytes32List storage self, bytes32 key) internal view returns (bool) {\\n        return _exist(self, self._elements[key], key);\\n    }\\n\\n    function _exist(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\\n    }\\n\\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].next;\\n    }\\n\\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].prev;\\n    }\\n}\\n\",\"keccak256\":\"0x73d1aff09e3148dfda3a50a24a92c240e84ddfbf21967bdf5a5532dd3f3d16c0\",\"license\":\"Apache-2.0\"},\"contracts/utils/WithdrawRequests.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.19;\\n\\nlibrary WithdrawRequests {\\n    struct Requests {\\n        Request[] _requests;\\n        uint256 _indexOffset;\\n    }\\n\\n    struct Request {\\n        uint32 _createTimestamp;\\n        uint224 _cumulative;\\n    }\\n\\n    function getAt(Requests storage self, uint256 index) internal view returns (uint256 timestamp, uint256 amount) {\\n        uint256 realLength = self._requests.length;\\n        uint256 realIndex = index + self._indexOffset;\\n\\n        if (realIndex >= realLength) {\\n            revert(\\\"Index is out of range\\\");\\n        }\\n\\n        Request storage request = self._requests[realIndex];\\n\\n        amount = request._cumulative;\\n        if (realIndex != 0) {\\n            Request storage previousRequest = self._requests[realIndex - 1];\\n            amount -= previousRequest._cumulative;\\n        }\\n\\n        return (request._createTimestamp, amount);\\n    }\\n\\n    function length(Requests storage self) internal view returns (uint256) {\\n        return self._requests.length - self._indexOffset;\\n    }\\n\\n    function getAmountBy(Requests storage self, uint256 timestamp) internal view returns (uint256) {\\n        (, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\\n        return amount;\\n    }\\n\\n    function push(Requests storage self, uint256 amount) internal {\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        require(amount > 0, \\\"Amount can't be zero\\\");\\n        require(amount <= type(uint224).max, \\\"Amount is too big\\\");\\n\\n        //TODO: check overflow\\n        uint224 uint224Amount = uint224(amount);\\n        uint256 realLength = self._requests.length;\\n        uint256 currentLength = realLength - self._indexOffset;\\n\\n        if (currentLength != 0) {\\n            Request storage last = self._requests[realLength - 1];\\n            if (last._createTimestamp == timestamp) {\\n                last._cumulative += uint224Amount;\\n                return;\\n            } else {\\n                self._requests.push(Request(timestamp, last._cumulative + uint224Amount));\\n            }\\n        } else {\\n            self._requests.push(Request(timestamp, uint224Amount));\\n        }\\n    }\\n\\n    function removeFromLast(Requests storage self, uint256 amount) internal {\\n        uint256 realLength = self._requests.length;\\n        uint256 currentLength = realLength - self._indexOffset;\\n\\n        require(currentLength != 0, \\\"Requests is empty\\\");\\n        require(amount <= type(uint224).max, \\\"Amount is too big\\\");\\n\\n        //TODO: check overflow\\n        uint224 uint224Amount = uint224(amount);\\n\\n        Request storage last = self._requests[currentLength - 1];\\n        uint256 currentAmount = last._cumulative;\\n\\n        require(currentAmount >= uint224Amount, \\\"Not enough amount\\\");\\n\\n        if (uint224Amount < currentAmount) {\\n            last._cumulative -= uint224Amount;\\n        } else {\\n            self._requests.pop();\\n        }\\n    }\\n\\n    function confirmBy(Requests storage self, uint256 timestamp) internal returns (uint256) {\\n        (uint256 index, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\\n        self._indexOffset = index + 1;\\n        return amount;\\n    }\\n\\n    function _getIndexAndAmountBy(Requests storage self, uint256 timestamp) private view returns (uint256, uint256) {\\n        uint256 realLength = self._requests.length;\\n        uint256 indexOffset = self._indexOffset;\\n\\n        uint256 currentLength = realLength - indexOffset;\\n\\n        require(currentLength != 0, \\\"Requests is empty\\\");\\n\\n        (uint256 index, Request storage request) = _getIndexBy(self, indexOffset, realLength - 1, timestamp);\\n        uint256 amount = request._cumulative;\\n        if (indexOffset != 0) {\\n            amount -= self._requests[indexOffset - 1]._cumulative;\\n        }\\n\\n        return (index, amount);\\n    }\\n\\n    function _getIndexBy(\\n        Requests storage self,\\n        uint256 startLow,\\n        uint256 startHigh,\\n        uint256 timestamp\\n    ) private view returns (uint256, Request storage request) {\\n        uint256 low = startLow;\\n        uint256 high = startHigh;\\n\\n        uint256 mid = (low + high) / 2;\\n        request = self._requests[mid];\\n\\n        while (low != high) {\\n            uint256 midTimestamp = request._createTimestamp;\\n            if (midTimestamp == timestamp) {\\n                return (mid, request);\\n            } else if (midTimestamp < timestamp) {\\n                low = mid + 1;\\n            } else {\\n                high = mid - 1;\\n            }\\n\\n            mid = (low + high) / 2;\\n            request = self._requests[mid];\\n        }\\n\\n        return (mid, request);\\n    }\\n}\\n\",\"keccak256\":\"0x64a74e094f091064dd11c2bf68743c2dd9522d0bcacc414c4df8e6b93efe92da\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a0806040523461003157306080526129b3908161003782396080518181816110020152818161114401526114c10152f35b600080fdfe608060408181526004908136101561001657600080fd5b60009260e0908435821c9081630ca362631461180d575080633659cfe61461148c5780634e75f6301461146f5780634f1ef286146110b957806352d1902d14610fd75780636b0ea62714610ef1578063928d300e14610be3578063c44a916d146104e1578063cb35a1951461030a578063d5053ab01461027b5763f3b6a45d1461009f57600080fd5b34610277578360031936011261027757835484847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06100f56100e085612113565b946100ed88519687611d8e565b808652612113565b01825b8181106102565750506006805483815b6101b157505050508351938493602090818087019381885286518095528701950193905b8382106101395786860387f35b9184965082866101a1600194969884985160c080918051845260208101516020850152604081015160408501526060810151606085015273ffffffffffffffffffffffffffffffffffffffff608082015116608085015260a081015160a08501520151910152565b019601920186959492939161012c565b818598969795526008600591610241602091848352898c20878b51916101d683611d56565b805483526001808201548785015260028201548e850152600382015460608501528b82015473ffffffffffffffffffffffffffffffffffffffff1660808501529781015460a0840152015460c0820152610230828d61212b565b5261023b818c61212b565b5061216e565b938a5252858820015490819794969597610108565b60209061026697959694976120db565b8282890101520195929493956100f8565b8380fd5b5050346103065780600319360112610306577f8d9d99306df0b03f2391cff2ff94674c032cc09f3cf089db54a8b021125a054d913560243581855260056020528060038487200180546102d8575b5582519182526020820152a180f35b7fa2f1ead3b1f30f052d979d7f19d3d3668f00f45a0a23ae4588cc918c5b738f9760208651868152a16102c9565b8280fd5b505082346104de57816003193601126104de57610325611cd4565b9273ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541694845180967f68f1e99a00000000000000000000000000000000000000000000000000000000825281856020998a935afa9081156104b757839291889187916104c1575b50858851809581937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa9182156104b75787929184918793610488575b5016855260098252858520938651809481937f9c15d1a2000000000000000000000000000000000000000000000000000000008352165afa92831561047d5792610447575b5061043961043f926024356121f6565b906127b8565b915191825250f35b91508382813d8311610476575b61045e8183611d8e565b8101031261047157905190610439610429565b600080fd5b503d610454565b8451903d90823e3d90fd5b6104a9919350843d86116104b0575b6104a18183611d8e565b8101906121ca565b91896103e4565b503d610497565b86513d87823e3d90fd5b6104d89150823d84116104b0576104a18183611d8e565b896103a3565b80fd5b82858534610bdf5782600319360112610bdf576104fc611cd4565b9260249384359373ffffffffffffffffffffffffffffffffffffffff94857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416968451957f68f1e99a000000000000000000000000000000000000000000000000000000008752602097888883818d5afa9788156109c9578598610bc0575b50808554981699828a8c8a51928380927f2943dcab0000000000000000000000000000000000000000000000000000000082525afa908115610b48578791610b93575b50891015610b525787517fb53105a30000000000000000000000000000000000000000000000000000000081528a8185818f5afa908115610b48578791610b1b575b50838b8d8b51928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa908115610b11578891610af4575b5089517f23b872dd000000000000000000000000000000000000000000000000000000008d82015233878201523060448201528260648201526064815260a081019167ffffffffffffffff9282811084821117610ac7578c526106a1919061221b565b89518c8101917f8bab011e0edd6a03e41f22d7bebfacfbde93a6fbd86b71db78d8af308790c29583527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000868c169b60601b168c83015288605483015260548252608082019082821090821117610a9a578b52519020998a885260058c5283858b8a20015416610a5957918960068c8e948c8c6107598b998383528a8a5261074a8884205461216e565b8484528b8b528884205561216e565b9c8d82556001548015610a52575b87519761077389611d56565b8689528a8901918252808901928352606089019380855260808a0195865260a08a0196875260c08a0197438952815260058c522097518855516001880155516002870155516003860155888886019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055516005840155519101556107fe8b61247e565b8951928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa908115610a2b578691610a35575b50169286517f200d2ed200000000000000000000000000000000000000000000000000000000815289818481885afa908115610a2b5786916109fe575b5060028110156109d35715998a610944575b5050859697989594956108cb575b505050507ff9afe7870c7ad4010cedbe87273d2282bcedb40f6734c102d53059c8da187bdf9181519085825286820152a151908152f35b9091809394503b1561027757839160019183885195869485937f95bc95380000000000000000000000000000000000000000000000000000000085528401525af1801561093a5790849291610922575b8080610894565b81925061092e90611cf7565b6104de5780839161091b565b84513d84823e3d90fd5b829a50899088519b8c80927f2db311930000000000000000000000000000000000000000000000000000000082525afa9081156109c9578798999a8698979892610997575b50101598979695948a610886565b965090508986813d81116109c2575b6109b08183611d8e565b8101031261047157879551908b610989565b503d6109a6565b87513d87823e3d90fd5b83866021857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b610a1e91508a3d8c11610a24575b610a168183611d8e565b810190612203565b8b610874565b503d610a0c565b88513d88823e3d90fd5b610a4c91508a3d8c116104b0576104a18183611d8e565b8b610837565b508d610767565b606485600f888f8e519362461bcd60e51b85528401528201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b876041887f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b886041897f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b610b0b91508c8d3d106104b0576104a18183611d8e565b8d61063e565b8a513d8a823e3d90fd5b90508a81813d8311610b41575b610b328183611d8e565b8101031261047157518c610601565b503d610b28565b89513d89823e3d90fd5b6064836016868d8c519362461bcd60e51b85528401528201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b90508a81813d8311610bb9575b610baa8183611d8e565b8101031261047157518c6105bf565b503d610ba0565b610bd8919850893d8b116104b0576104a18183611d8e565b968a61057c565b5080fd5b505090346103065760208060031936011261027757610c00611cd4565b9073ffffffffffffffffffffffffffffffffffffffff928082857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168751928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa908115610eca57859184918991610ed4575b50838851809881937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa948515610eca578795610eab575b50808416875260098352858720941685517f9c15d1a200000000000000000000000000000000000000000000000000000000815283818481855afa908115610ea1578891610e72575b50610d0d610d1391426121f6565b866127b8565b9560018201809211610e465790600185939201558651928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa908115610e3c57610e19927fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d9692610dec928991610e1f575b5083517fa9059cbb000000000000000000000000000000000000000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff8616602483015260448083018890528252610de7606483611d8e565b61221b565b51928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a180f35b610e369150823d84116104b0576104a18183611d8e565b38610d8b565b85513d88823e3d90fd5b6024896011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b90508381813d8311610e9a575b610e898183611d8e565b810103126104715751610d0d610cff565b503d610e7f565b87513d8a823e3d90fd5b610ec3919550833d85116104b0576104a18183611d8e565b9338610cb6565b86513d89823e3d90fd5b610eeb9150823d84116104b0576104a18183611d8e565b38610c7a565b5092346104de5760206003193601126104de5790600681610fd593610f146120db565b508535815260056020522073ffffffffffffffffffffffffffffffffffffffff835195610f4087611d56565b825487526001830154602088015260028301548588015260038301546060880152820154166080860152600581015460a0860152015460c084015251809260c080918051845260208101516020850152604081015160408501526060810151606085015273ffffffffffffffffffffffffffffffffffffffff608082015116608085015260a081015160a08501520151910152565bf35b505091346104de57806003193601126104de575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361105157602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b82858582600319360112610bdf576110cf611cd4565b9060249384359067ffffffffffffffff821161146b573660238301121561146b5781830135916110fe83611dcf565b61110a83519182611d8e565b83815260209384820192368a8383010111611467578189928b88930186378301015273ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169061117182301415611e09565b6111a07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614611e7a565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303611426577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112095750505050505050611206919250611eeb565b80f35b87939496989597169086517f52d1902d00000000000000000000000000000000000000000000000000000000815288818b81865afa600091816113f7575b506112b35760848a602e8d8c8c519362461bcd60e51b85528401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b999193969498929599036113905750506112cc84611eeb565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611388575b611309575b505050505080f35b61137d946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986113608a611d72565b60278a528901528701525190845af4611377611fbd565b91611fed565b508180808080611301565b5060016112fc565b9060296084928886519362461bcd60e51b85528401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918a82813d831161141f575b61140e8183611d8e565b810103126104de575051908c611247565b503d611404565b606487601e8c8989519362461bcd60e51b85528401528201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b8880fd5b8480fd5b848334610bdf5781600319360112610bdf57602091549051908152f35b50503461030657602080600319360112610277576114a8611cd4565b9173ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000166114ed81301415611e09565b61151c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918383541614611e7a565b817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036117cb578251908482019282841067ffffffffffffffff85111761179d578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115a0575050505050506112069150611eeb565b8693949596169085517f52d1902d00000000000000000000000000000000000000000000000000000000815287818a81865afa6000918161176e575b50611649576084898989519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b979192949795939503611706575061166084611eeb565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28151158015906116fe575b61169c57505050505080f35b6116f3946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986113608a611d72565b503880808080611301565b506000611690565b6084908684519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d8311611796575b6117858183611d8e565b810103126104de57505190386115dc565b503d61177b565b6041887f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6064868585519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b85849186346103065760209182600319360112610277578135918285526005845285852073ffffffffffffffffffffffffffffffffffffffff9283838301541690338203611c945750611875875482895284885289892061186e815461232b565b905561232b565b93848855807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168951907f68f1e99a00000000000000000000000000000000000000000000000000000000825288828781845afa918215611bf95786918a918c94611c75575b508c51928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa908115611bf9579083918b91611c58575b5016918a51967f200d2ed200000000000000000000000000000000000000000000000000000000885289888881875afa978815611c4e578b98611c2f575b506002881015611c03578960018099149384611b7b575b50505050611b0f575b509061199d9161198985830154612356565b8752600986526005888820910154906125fb565b8285526005845260006006878720828155828582015582600282015582600382015587848201558260058201550155600884528585208651916119df83611d3a565b838254928385520154868401928184521590811591611b05575b508015611afa575b8015611aef575b15611aad575091817f444a3a44058938b8969bdac08b1dda569100d49a708e17765e90dafd7be093319697936000935180159081611aa3575b8251918215611a9a575b15611a87575b5050519081611a74575b505083875260088552828720828155015551908152a180f35b5190885260088652838820558780611a5b565b8a526008885283868b2001558980611a51565b81600755611a4b565b8251600655611a41565b6064908689519162461bcd60e51b8352820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b506007548514611a08565b506006548514611a01565b90501515896119f9565b803b15611b775787809160248b51809481937f95bc9538000000000000000000000000000000000000000000000000000000008352818a8401525af18015611b6d57156119775796611b6561199d939298611cf7565b969091611977565b89513d8a823e3d90fd5b8780fd5b9091929350878d51809581937f2db31193000000000000000000000000000000000000000000000000000000008352165afa918215611bf9578a92611bc6575b50108a80898161196e565b9091508881813d8311611bf2575b611bde8183611d8e565b81010312611bee5751908b611bbb565b8980fd5b503d611bd4565b8b513d8c823e3d90fd5b60248b6021897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b611c479198508a3d8c11610a2457610a168183611d8e565b968c611957565b8c513d8d823e3d90fd5b611c6f91508a3d8c116104b0576104a18183611d8e565b8c611919565b611c8d919450823d84116104b0576104a18183611d8e565b928d6118dc565b80878562461bcd60e51b60649452820152601160248201527f50415420646f65736e27742065786973740000000000000000000000000000006044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361047157565b67ffffffffffffffff8111611d0b57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611d0b57604052565b60e0810190811067ffffffffffffffff821117611d0b57604052565b6060810190811067ffffffffffffffff821117611d0b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611d0b57604052565b67ffffffffffffffff8111611d0b57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b15611e1057565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15611e8157565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611f535773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611fe8573d90611fce82611dcf565b91611fdc6040519384611d8e565b82523d6000602084013e565b606090565b9192901561204e5750815115612001575090565b3b1561200a5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156120615750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b8481106120c4575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201612083565b604051906120e882611d56565b8160c06000918281528260208201528260408201528260608201528260808201528260a08201520152565b67ffffffffffffffff8111611d0b5760051b60200190565b805182101561213f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461219b5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90816020910312610471575173ffffffffffffffffffffffffffffffffffffffff811681036104715790565b9190820391821161219b57565b90816020910312610471575160028110156104715790565b73ffffffffffffffffffffffffffffffffffffffff169061228260405161224181611d3a565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1611377611fbd565b805191821591848315612307575b50505090501561229d5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312610bdf578201519081151582036104de575080388084612290565b801561219b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b801561243a576000818152600360205260206040822060405161237881611d3a565b6001825492838352015492839101521590811591612430575b508015612425575b801561241a575b6123d65760025480156123cb5760019160409184600255848252600360205280838320558152200155565b505080600155600255565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b5060025482146123a0565b506001548214612399565b9050151538612391565b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b801561243a57600081815260086020526020604082206040516124a081611d3a565b6001825492838352015492839101521590811591612514575b508015612509575b80156124fe575b6123d65760075480156124f35760019160409184600755848252600860205280838320558152200155565b505080600655600755565b5060075482146124c8565b5060065482146124c1565b90501515386124b9565b805482101561213f5760005260206000200190600090565b805468010000000000000000811015611d0b576125589160018201815561251e565b61259c57815160209283015190921b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b9190917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8080941691160191821161219b57565b63ffffffff90814216908315612767577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff938481116127235784169381546126436001840154826121f6565b15612701577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161219b5761267c908361251e565b5080549094811684036126d2575050505061269e61259a92825460201c6125cb565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b6126e791929394509461259a9560201c6125cb565b604051936126f485611d3a565b8452166020830152612536565b505090915061259a926040519261271784611d3a565b83526020830152612536565b606460405162461bcd60e51b815260206004820152601160248201527f416d6f756e7420697320746f6f206269670000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f416d6f756e742063616e2774206265207a65726f0000000000000000000000006044820152fd5b9190820180921161219b57565b91909180546001820154906127cd82826121f6565b1561284b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9485820191821161219b5761280991838561288f565b9290925460201c948261281e575b5050509190565b829395920192831161219b57612842926128379161251e565b505460201c906121f6565b91388080612817565b606460405162461bcd60e51b815260206004820152601160248201527f526571756573747320697320656d7074790000000000000000000000000000006044820152fd5b909392909161289e81866127ab565b90600191821c936128af858261251e565b50965b8281036128c25750505050509190565b875463ffffffff168581036128db575050505050509190565b859850959294909193951060001461294a575083810180911161291c57925b61290483856127ab565b811c93612911858461251e565b5096939192906128b2565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b9392507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161291c57916128fa56fea264697066735822122066e8d0c95888ab6f61478ae5acd500e6741b30405f5989baa148521825fa780c64736f6c63430008130033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b60009260e0908435821c9081630ca362631461180d575080633659cfe61461148c5780634e75f6301461146f5780634f1ef286146110b957806352d1902d14610fd75780636b0ea62714610ef1578063928d300e14610be3578063c44a916d146104e1578063cb35a1951461030a578063d5053ab01461027b5763f3b6a45d1461009f57600080fd5b34610277578360031936011261027757835484847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06100f56100e085612113565b946100ed88519687611d8e565b808652612113565b01825b8181106102565750506006805483815b6101b157505050508351938493602090818087019381885286518095528701950193905b8382106101395786860387f35b9184965082866101a1600194969884985160c080918051845260208101516020850152604081015160408501526060810151606085015273ffffffffffffffffffffffffffffffffffffffff608082015116608085015260a081015160a08501520151910152565b019601920186959492939161012c565b818598969795526008600591610241602091848352898c20878b51916101d683611d56565b805483526001808201548785015260028201548e850152600382015460608501528b82015473ffffffffffffffffffffffffffffffffffffffff1660808501529781015460a0840152015460c0820152610230828d61212b565b5261023b818c61212b565b5061216e565b938a5252858820015490819794969597610108565b60209061026697959694976120db565b8282890101520195929493956100f8565b8380fd5b5050346103065780600319360112610306577f8d9d99306df0b03f2391cff2ff94674c032cc09f3cf089db54a8b021125a054d913560243581855260056020528060038487200180546102d8575b5582519182526020820152a180f35b7fa2f1ead3b1f30f052d979d7f19d3d3668f00f45a0a23ae4588cc918c5b738f9760208651868152a16102c9565b8280fd5b505082346104de57816003193601126104de57610325611cd4565b9273ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541694845180967f68f1e99a00000000000000000000000000000000000000000000000000000000825281856020998a935afa9081156104b757839291889187916104c1575b50858851809581937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa9182156104b75787929184918793610488575b5016855260098252858520938651809481937f9c15d1a2000000000000000000000000000000000000000000000000000000008352165afa92831561047d5792610447575b5061043961043f926024356121f6565b906127b8565b915191825250f35b91508382813d8311610476575b61045e8183611d8e565b8101031261047157905190610439610429565b600080fd5b503d610454565b8451903d90823e3d90fd5b6104a9919350843d86116104b0575b6104a18183611d8e565b8101906121ca565b91896103e4565b503d610497565b86513d87823e3d90fd5b6104d89150823d84116104b0576104a18183611d8e565b896103a3565b80fd5b82858534610bdf5782600319360112610bdf576104fc611cd4565b9260249384359373ffffffffffffffffffffffffffffffffffffffff94857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416968451957f68f1e99a000000000000000000000000000000000000000000000000000000008752602097888883818d5afa9788156109c9578598610bc0575b50808554981699828a8c8a51928380927f2943dcab0000000000000000000000000000000000000000000000000000000082525afa908115610b48578791610b93575b50891015610b525787517fb53105a30000000000000000000000000000000000000000000000000000000081528a8185818f5afa908115610b48578791610b1b575b50838b8d8b51928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa908115610b11578891610af4575b5089517f23b872dd000000000000000000000000000000000000000000000000000000008d82015233878201523060448201528260648201526064815260a081019167ffffffffffffffff9282811084821117610ac7578c526106a1919061221b565b89518c8101917f8bab011e0edd6a03e41f22d7bebfacfbde93a6fbd86b71db78d8af308790c29583527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000868c169b60601b168c83015288605483015260548252608082019082821090821117610a9a578b52519020998a885260058c5283858b8a20015416610a5957918960068c8e948c8c6107598b998383528a8a5261074a8884205461216e565b8484528b8b528884205561216e565b9c8d82556001548015610a52575b87519761077389611d56565b8689528a8901918252808901928352606089019380855260808a0195865260a08a0196875260c08a0197438952815260058c522097518855516001880155516002870155516003860155888886019151167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055516005840155519101556107fe8b61247e565b8951928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa908115610a2b578691610a35575b50169286517f200d2ed200000000000000000000000000000000000000000000000000000000815289818481885afa908115610a2b5786916109fe575b5060028110156109d35715998a610944575b5050859697989594956108cb575b505050507ff9afe7870c7ad4010cedbe87273d2282bcedb40f6734c102d53059c8da187bdf9181519085825286820152a151908152f35b9091809394503b1561027757839160019183885195869485937f95bc95380000000000000000000000000000000000000000000000000000000085528401525af1801561093a5790849291610922575b8080610894565b81925061092e90611cf7565b6104de5780839161091b565b84513d84823e3d90fd5b829a50899088519b8c80927f2db311930000000000000000000000000000000000000000000000000000000082525afa9081156109c9578798999a8698979892610997575b50101598979695948a610886565b965090508986813d81116109c2575b6109b08183611d8e565b8101031261047157879551908b610989565b503d6109a6565b87513d87823e3d90fd5b83866021857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b610a1e91508a3d8c11610a24575b610a168183611d8e565b810190612203565b8b610874565b503d610a0c565b88513d88823e3d90fd5b610a4c91508a3d8c116104b0576104a18183611d8e565b8b610837565b508d610767565b606485600f888f8e519362461bcd60e51b85528401528201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b876041887f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b886041897f4e487b7100000000000000000000000000000000000000000000000000000000600052526000fd5b610b0b91508c8d3d106104b0576104a18183611d8e565b8d61063e565b8a513d8a823e3d90fd5b90508a81813d8311610b41575b610b328183611d8e565b8101031261047157518c610601565b503d610b28565b89513d89823e3d90fd5b6064836016868d8c519362461bcd60e51b85528401528201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b90508a81813d8311610bb9575b610baa8183611d8e565b8101031261047157518c6105bf565b503d610ba0565b610bd8919850893d8b116104b0576104a18183611d8e565b968a61057c565b5080fd5b505090346103065760208060031936011261027757610c00611cd4565b9073ffffffffffffffffffffffffffffffffffffffff928082857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168751928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa908115610eca57859184918991610ed4575b50838851809881937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa948515610eca578795610eab575b50808416875260098352858720941685517f9c15d1a200000000000000000000000000000000000000000000000000000000815283818481855afa908115610ea1578891610e72575b50610d0d610d1391426121f6565b866127b8565b9560018201809211610e465790600185939201558651928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa908115610e3c57610e19927fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d9692610dec928991610e1f575b5083517fa9059cbb000000000000000000000000000000000000000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff8616602483015260448083018890528252610de7606483611d8e565b61221b565b51928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a180f35b610e369150823d84116104b0576104a18183611d8e565b38610d8b565b85513d88823e3d90fd5b6024896011867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b90508381813d8311610e9a575b610e898183611d8e565b810103126104715751610d0d610cff565b503d610e7f565b87513d8a823e3d90fd5b610ec3919550833d85116104b0576104a18183611d8e565b9338610cb6565b86513d89823e3d90fd5b610eeb9150823d84116104b0576104a18183611d8e565b38610c7a565b5092346104de5760206003193601126104de5790600681610fd593610f146120db565b508535815260056020522073ffffffffffffffffffffffffffffffffffffffff835195610f4087611d56565b825487526001830154602088015260028301548588015260038301546060880152820154166080860152600581015460a0860152015460c084015251809260c080918051845260208101516020850152604081015160408501526060810151606085015273ffffffffffffffffffffffffffffffffffffffff608082015116608085015260a081015160a08501520151910152565bf35b505091346104de57806003193601126104de575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361105157602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b82858582600319360112610bdf576110cf611cd4565b9060249384359067ffffffffffffffff821161146b573660238301121561146b5781830135916110fe83611dcf565b61110a83519182611d8e565b83815260209384820192368a8383010111611467578189928b88930186378301015273ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169061117182301415611e09565b6111a07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614611e7a565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303611426577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112095750505050505050611206919250611eeb565b80f35b87939496989597169086517f52d1902d00000000000000000000000000000000000000000000000000000000815288818b81865afa600091816113f7575b506112b35760848a602e8d8c8c519362461bcd60e51b85528401528201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b999193969498929599036113905750506112cc84611eeb565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590611388575b611309575b505050505080f35b61137d946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986113608a611d72565b60278a528901528701525190845af4611377611fbd565b91611fed565b508180808080611301565b5060016112fc565b9060296084928886519362461bcd60e51b85528401528201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918a82813d831161141f575b61140e8183611d8e565b810103126104de575051908c611247565b503d611404565b606487601e8c8989519362461bcd60e51b85528401528201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b8880fd5b8480fd5b848334610bdf5781600319360112610bdf57602091549051908152f35b50503461030657602080600319360112610277576114a8611cd4565b9173ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000166114ed81301415611e09565b61151c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918383541614611e7a565b817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541633036117cb578251908482019282841067ffffffffffffffff85111761179d578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115a0575050505050506112069150611eeb565b8693949596169085517f52d1902d00000000000000000000000000000000000000000000000000000000815287818a81865afa6000918161176e575b50611649576084898989519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b979192949795939503611706575061166084611eeb565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28151158015906116fe575b61169c57505050505080f35b6116f3946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c869551986113608a611d72565b503880808080611301565b506000611690565b6084908684519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d8311611796575b6117858183611d8e565b810103126104de57505190386115dc565b503d61177b565b6041887f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6064868585519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b85849186346103065760209182600319360112610277578135918285526005845285852073ffffffffffffffffffffffffffffffffffffffff9283838301541690338203611c945750611875875482895284885289892061186e815461232b565b905561232b565b93848855807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168951907f68f1e99a00000000000000000000000000000000000000000000000000000000825288828781845afa918215611bf95786918a918c94611c75575b508c51928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa908115611bf9579083918b91611c58575b5016918a51967f200d2ed200000000000000000000000000000000000000000000000000000000885289888881875afa978815611c4e578b98611c2f575b506002881015611c03578960018099149384611b7b575b50505050611b0f575b509061199d9161198985830154612356565b8752600986526005888820910154906125fb565b8285526005845260006006878720828155828582015582600282015582600382015587848201558260058201550155600884528585208651916119df83611d3a565b838254928385520154868401928184521590811591611b05575b508015611afa575b8015611aef575b15611aad575091817f444a3a44058938b8969bdac08b1dda569100d49a708e17765e90dafd7be093319697936000935180159081611aa3575b8251918215611a9a575b15611a87575b5050519081611a74575b505083875260088552828720828155015551908152a180f35b5190885260088652838820558780611a5b565b8a526008885283868b2001558980611a51565b81600755611a4b565b8251600655611a41565b6064908689519162461bcd60e51b8352820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b506007548514611a08565b506006548514611a01565b90501515896119f9565b803b15611b775787809160248b51809481937f95bc9538000000000000000000000000000000000000000000000000000000008352818a8401525af18015611b6d57156119775796611b6561199d939298611cf7565b969091611977565b89513d8a823e3d90fd5b8780fd5b9091929350878d51809581937f2db31193000000000000000000000000000000000000000000000000000000008352165afa918215611bf9578a92611bc6575b50108a80898161196e565b9091508881813d8311611bf2575b611bde8183611d8e565b81010312611bee5751908b611bbb565b8980fd5b503d611bd4565b8b513d8c823e3d90fd5b60248b6021897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b611c479198508a3d8c11610a2457610a168183611d8e565b968c611957565b8c513d8d823e3d90fd5b611c6f91508a3d8c116104b0576104a18183611d8e565b8c611919565b611c8d919450823d84116104b0576104a18183611d8e565b928d6118dc565b80878562461bcd60e51b60649452820152601160248201527f50415420646f65736e27742065786973740000000000000000000000000000006044820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361047157565b67ffffffffffffffff8111611d0b57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff821117611d0b57604052565b60e0810190811067ffffffffffffffff821117611d0b57604052565b6060810190811067ffffffffffffffff821117611d0b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611d0b57604052565b67ffffffffffffffff8111611d0b57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b15611e1057565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15611e8157565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611f535773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611fe8573d90611fce82611dcf565b91611fdc6040519384611d8e565b82523d6000602084013e565b606090565b9192901561204e5750815115612001575090565b3b1561200a5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156120615750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b8481106120c4575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201612083565b604051906120e882611d56565b8160c06000918281528260208201528260408201528260608201528260808201528260a08201520152565b67ffffffffffffffff8111611d0b5760051b60200190565b805182101561213f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461219b5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90816020910312610471575173ffffffffffffffffffffffffffffffffffffffff811681036104715790565b9190820391821161219b57565b90816020910312610471575160028110156104715790565b73ffffffffffffffffffffffffffffffffffffffff169061228260405161224181611d3a565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1611377611fbd565b805191821591848315612307575b50505090501561229d5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312610bdf578201519081151582036104de575080388084612290565b801561219b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b801561243a576000818152600360205260206040822060405161237881611d3a565b6001825492838352015492839101521590811591612430575b508015612425575b801561241a575b6123d65760025480156123cb5760019160409184600255848252600360205280838320558152200155565b505080600155600255565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b5060025482146123a0565b506001548214612399565b9050151538612391565b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b801561243a57600081815260086020526020604082206040516124a081611d3a565b6001825492838352015492839101521590811591612514575b508015612509575b80156124fe575b6123d65760075480156124f35760019160409184600755848252600860205280838320558152200155565b505080600655600755565b5060075482146124c8565b5060065482146124c1565b90501515386124b9565b805482101561213f5760005260206000200190600090565b805468010000000000000000811015611d0b576125589160018201815561251e565b61259c57815160209283015190921b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b9190917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8080941691160191821161219b57565b63ffffffff90814216908315612767577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff938481116127235784169381546126436001840154826121f6565b15612701577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161219b5761267c908361251e565b5080549094811684036126d2575050505061269e61259a92825460201c6125cb565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b6126e791929394509461259a9560201c6125cb565b604051936126f485611d3a565b8452166020830152612536565b505090915061259a926040519261271784611d3a565b83526020830152612536565b606460405162461bcd60e51b815260206004820152601160248201527f416d6f756e7420697320746f6f206269670000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f416d6f756e742063616e2774206265207a65726f0000000000000000000000006044820152fd5b9190820180921161219b57565b91909180546001820154906127cd82826121f6565b1561284b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9485820191821161219b5761280991838561288f565b9290925460201c948261281e575b5050509190565b829395920192831161219b57612842926128379161251e565b505460201c906121f6565b91388080612817565b606460405162461bcd60e51b815260206004820152601160248201527f526571756573747320697320656d7074790000000000000000000000000000006044820152fd5b909392909161289e81866127ab565b90600191821c936128af858261251e565b50965b8281036128c25750505050509190565b875463ffffffff168581036128db575050505050509190565b859850959294909193951060001461294a575083810180911161291c57925b61290483856127ab565b811c93612911858461251e565b5096939192906128b2565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b9392507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161291c57916128fa56fea264697066735822122066e8d0c95888ab6f61478ae5acd500e6741b30405f5989baa148521825fa780c64736f6c63430008130033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4954,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_patCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4957,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_freeIndexes",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Bytes32List)6874_storage"
      },
      {
        "astId": 4962,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_ownersInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(OwnerInfo)4921_storage)"
      },
      {
        "astId": 4967,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_patById",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(PAT)5977_storage)"
      },
      {
        "astId": 4970,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_patsIdsList",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Bytes32List)6874_storage"
      },
      {
        "astId": 4975,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_withdrawRequests",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Requests)7181_storage)"
      },
      {
        "astId": 5633,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "__gap",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Request)7186_storage)dyn_storage": {
        "base": "t_struct(Request)7186_storage",
        "encoding": "dynamic_array",
        "label": "struct WithdrawRequests.Request[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(OwnerInfo)4921_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorkersModuleState.OwnerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OwnerInfo)4921_storage"
      },
      "t_mapping(t_address,t_struct(Requests)7181_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WithdrawRequests.Requests)",
        "numberOfBytes": "32",
        "value": "t_struct(Requests)7181_storage"
      },
      "t_mapping(t_bytes32,t_struct(Element)6864_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedList.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)6864_storage"
      },
      "t_mapping(t_bytes32,t_struct(PAT)5977_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PAT)",
        "numberOfBytes": "32",
        "value": "t_struct(PAT)5977_storage"
      },
      "t_struct(Bytes32List)6874_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Bytes32List",
        "members": [
          {
            "astId": 6866,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_first",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6868,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_last",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6873,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_elements",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(Element)6864_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Element)6864_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Element",
        "members": [
          {
            "astId": 6861,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 6863,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OwnerInfo)4921_storage": {
        "encoding": "inplace",
        "label": "struct WorkersModuleState.OwnerInfo",
        "members": [
          {
            "astId": 4917,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "patCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4920,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "patsIds",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Bytes32List)6874_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PAT)5977_storage": {
        "encoding": "inplace",
        "label": "struct PAT",
        "members": [
          {
            "astId": 5964,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5966,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5968,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "peerId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 5970,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "workerId",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 5972,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5974,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5976,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "created",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Request)7186_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRequests.Request",
        "members": [
          {
            "astId": 7183,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_createTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7185,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_cumulative",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Requests)7181_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRequests.Requests",
        "members": [
          {
            "astId": 7178,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_requests",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Request)7186_storage)dyn_storage"
          },
          {
            "astId": 7180,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_indexOffset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}