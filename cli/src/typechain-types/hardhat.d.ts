/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AquaProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AquaProxy__factory>;
    getContractFactory(
      name: "AuroraSdk",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuroraSdk__factory>;
    getContractFactory(
      name: "Codec",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Codec__factory>;
    getContractFactory(
      name: "Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utils__factory>;
    getContractFactory(
      name: "Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Core__factory>;
    getContractFactory(
      name: "BaseDeal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseDeal__factory>;
    getContractFactory(
      name: "Deal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deal__factory>;
    getContractFactory(
      name: "IDeal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeal__factory>;
    getContractFactory(
      name: "IPeerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeerManager__factory>;
    getContractFactory(
      name: "PeersManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PeersManager__factory>;
    getContractFactory(
      name: "DealFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DealFactory__factory>;
    getContractFactory(
      name: "DeveloperFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeveloperFaucet__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AquaProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AquaProxy>;
    getContractAt(
      name: "AuroraSdk",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuroraSdk>;
    getContractAt(
      name: "Codec",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Codec>;
    getContractAt(
      name: "Utils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Utils>;
    getContractAt(
      name: "Core",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Core>;
    getContractAt(
      name: "BaseDeal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseDeal>;
    getContractAt(
      name: "Deal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Deal>;
    getContractAt(
      name: "IDeal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeal>;
    getContractAt(
      name: "IPeerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeerManager>;
    getContractAt(
      name: "PeersManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PeersManager>;
    getContractAt(
      name: "DealFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DealFactory>;
    getContractAt(
      name: "DeveloperFaucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeveloperFaucet>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
