/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DealConfig,
  DealConfigInterface,
  DealConfigState,
} from "../../../contracts/Deal/DealConfig";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Core",
        name: "core_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "subnetId_",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "paymentToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "pricePerEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "requiredStake",
            type: "uint256",
          },
        ],
        internalType: "struct DealConfigState.Settings",
        name: "settings_",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "aquaProxy",
    outputs: [
      {
        internalType: "contract AquaProxy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fluenceToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "paymentToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "pricePerEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "requiredStake",
            type: "uint256",
          },
        ],
        internalType: "struct DealConfigState.Settings",
        name: "settings_",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "propertyBits",
        type: "bytes32",
      },
    ],
    name: "setNewSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "settings",
    outputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "paymentToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "pricePerEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "requiredStake",
            type: "uint256",
          },
        ],
        internalType: "struct DealConfigState.Settings",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "subnetId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200135f3803806200135f83398181016040528101906200003791906200042b565b620000576200004b6200011160201b60201c565b6200011960201b60201c565b826000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160006001018190555080600060020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505050505062000487565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021b82620001ee565b9050919050565b60006200022f826200020e565b9050919050565b620002418162000222565b81146200024d57600080fd5b50565b600081519050620002618162000236565b92915050565b6000819050919050565b6200027c8162000267565b81146200028857600080fd5b50565b6000815190506200029c8162000271565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002f282620002a7565b810181811067ffffffffffffffff82111715620003145762000313620002b8565b5b80604052505050565b600062000329620001df565b9050620003378282620002e7565b919050565b600062000349826200020e565b9050919050565b6200035b816200033c565b81146200036757600080fd5b50565b6000815190506200037b8162000350565b92915050565b6000819050919050565b620003968162000381565b8114620003a257600080fd5b50565b600081519050620003b6816200038b565b92915050565b600060608284031215620003d557620003d4620002a2565b5b620003e160606200031d565b90506000620003f3848285016200036a565b60008301525060206200040984828501620003a5565b60208301525060406200041f84828501620003a5565b60408301525092915050565b600080600060a08486031215620004475762000446620001e9565b5b6000620004578682870162000250565b93505060206200046a868287016200028b565b92505060406200047d86828701620003bc565b9150509250925092565b610ec880620004976000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063ac027f9711610066578063ac027f97146100fc578063e06174e41461011a578063e423e0d514610138578063f2fde38b14610154578063f4e52ae81461017057610093565b80630a5bfa0714610098578063715018a6146100b657806385079cd7146100c05780638da5cb5b146100de575b600080fd5b6100a061017a565b6040516100ad9190610874565b60405180910390f35b6100be610186565b005b6100c861019a565b6040516100d5919061090e565b60405180910390f35b6100e6610234565b6040516100f3919061094a565b60405180910390f35b61010461025e565b6040516101119190610986565b60405180910390f35b6101226102f8565b60405161012f9190610a0b565b60405180910390f35b610152600480360381019061014d9190610a7b565b61037f565b005b61016e60048036038101906101699190610ae7565b6104ea565b005b61017861056d565b005b60008060010154905090565b61018e6106b0565b610198600061072e565b565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385079cd76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561020b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022f9190610b52565b905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac027f976040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f39190610bbd565b905090565b610300610824565b60006002016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481525050905090565b6103876106b0565b6103928160006107f4565b156103f1578160000160208101906103aa9190610bff565b600060050160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6103fc8160016107f4565b156104135781602001356000600501600101819055505b61041e8160026107f4565b156104355781604001356000600501600201819055505b806000600901819055506000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663590909106040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d29190610c58565b426104dd9190610cb4565b6000600801819055505050565b6104f26106b0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055890610d6b565b60405180910390fd5b61056a8161072e565b50565b6105756106b0565b600080600801541415801561058f57504260006008015410155b6105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c590610dd7565b60405180910390fd5b6000806009015490506105e28160006107f4565b1561065757600060050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6106628160016107f4565b1561067d576000600501600101546000600201600101819055505b6106888160026107f4565b156106a3576000600501600201546000600201600201819055505b6000806008018190555050565b6106b861081c565b73ffffffffffffffffffffffffffffffffffffffff166106d6610234565b73ffffffffffffffffffffffffffffffffffffffff161461072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072390610e43565b60405180910390fd5b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060001b82600281111561080d5761080c610e63565b5b60001b84161415905092915050565b600033905090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6000819050919050565b61086e8161085b565b82525050565b60006020820190506108896000830184610865565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108d46108cf6108ca8461088f565b6108af565b61088f565b9050919050565b60006108e6826108b9565b9050919050565b60006108f8826108db565b9050919050565b610908816108ed565b82525050565b600060208201905061092360008301846108ff565b92915050565b60006109348261088f565b9050919050565b61094481610929565b82525050565b600060208201905061095f600083018461093b565b92915050565b6000610970826108db565b9050919050565b61098081610965565b82525050565b600060208201905061099b6000830184610977565b92915050565b6109aa81610965565b82525050565b6000819050919050565b6109c3816109b0565b82525050565b6060820160008201516109df60008501826109a1565b5060208201516109f260208501826109ba565b506040820151610a0560408501826109ba565b50505050565b6000606082019050610a2060008301846109c9565b92915050565b600080fd5b600080fd5b600060608284031215610a4657610a45610a2b565b5b81905092915050565b610a588161085b565b8114610a6357600080fd5b50565b600081359050610a7581610a4f565b92915050565b60008060808385031215610a9257610a91610a26565b5b6000610aa085828601610a30565b9250506060610ab185828601610a66565b9150509250929050565b610ac481610929565b8114610acf57600080fd5b50565b600081359050610ae181610abb565b92915050565b600060208284031215610afd57610afc610a26565b5b6000610b0b84828501610ad2565b91505092915050565b6000610b1f82610929565b9050919050565b610b2f81610b14565b8114610b3a57600080fd5b50565b600081519050610b4c81610b26565b92915050565b600060208284031215610b6857610b67610a26565b5b6000610b7684828501610b3d565b91505092915050565b6000610b8a82610929565b9050919050565b610b9a81610b7f565b8114610ba557600080fd5b50565b600081519050610bb781610b91565b92915050565b600060208284031215610bd357610bd2610a26565b5b6000610be184828501610ba8565b91505092915050565b600081359050610bf981610b91565b92915050565b600060208284031215610c1557610c14610a26565b5b6000610c2384828501610bea565b91505092915050565b610c35816109b0565b8114610c4057600080fd5b50565b600081519050610c5281610c2c565b92915050565b600060208284031215610c6e57610c6d610a26565b5b6000610c7c84828501610c43565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cbf826109b0565b9150610cca836109b0565b9250828201905080821115610ce257610ce1610c85565b5b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d55602683610ce8565b9150610d6082610cf9565b604082019050919050565b60006020820190508181036000830152610d8481610d48565b9050919050565b7f4465616c436f6e6669673a2074696d656f7574206e6f74207061737365640000600082015250565b6000610dc1601e83610ce8565b9150610dcc82610d8b565b602082019050919050565b60006020820190508181036000830152610df081610db4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e2d602083610ce8565b9150610e3882610df7565b602082019050919050565b60006020820190508181036000830152610e5c81610e20565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220b3f1103d0832304bbd0a1007e2f4baa55f244296973f59ee306eb7d84616973564736f6c63430008110033";

type DealConfigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DealConfigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DealConfig__factory extends ContractFactory {
  constructor(...args: DealConfigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    core_: PromiseOrValue<string>,
    subnetId_: PromiseOrValue<BytesLike>,
    settings_: DealConfigState.SettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DealConfig> {
    return super.deploy(
      core_,
      subnetId_,
      settings_,
      overrides || {}
    ) as Promise<DealConfig>;
  }
  override getDeployTransaction(
    core_: PromiseOrValue<string>,
    subnetId_: PromiseOrValue<BytesLike>,
    settings_: DealConfigState.SettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      core_,
      subnetId_,
      settings_,
      overrides || {}
    );
  }
  override attach(address: string): DealConfig {
    return super.attach(address) as DealConfig;
  }
  override connect(signer: Signer): DealConfig__factory {
    return super.connect(signer) as DealConfig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DealConfigInterface {
    return new utils.Interface(_abi) as DealConfigInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DealConfig {
    return new Contract(address, _abi, signerOrProvider) as DealConfig;
  }
}
