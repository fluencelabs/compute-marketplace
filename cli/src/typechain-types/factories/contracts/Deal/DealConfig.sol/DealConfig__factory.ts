/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DealConfig,
  DealConfigInterface,
  DealConfigState,
} from "../../../../contracts/Deal/DealConfig.sol/DealConfig";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Core",
        name: "core_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "subnetId_",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "paymentToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "pricePerEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "requiredStake",
            type: "uint256",
          },
        ],
        internalType: "struct DealConfigState.Settings",
        name: "settings_",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "aquaProxy",
    outputs: [
      {
        internalType: "contract AquaProxy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "core",
    outputs: [
      {
        internalType: "contract Core",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fluenceToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "newSettings",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "paymentToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pricePerEpoch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredStake",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "paymentToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "pricePerEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "requiredStake",
            type: "uint256",
          },
        ],
        internalType: "struct DealConfigState.Settings",
        name: "settings_",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "propertyBits",
        type: "bytes32",
      },
    ],
    name: "setNewSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "settings",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "paymentToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pricePerEpoch",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredStake",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "settingsChangeTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "subnetId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200139838038062001398833981810160405281019062000037919062000422565b620000576200004b6200010860201b60201c565b6200011060201b60201c565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018190555080600260008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050505050506200047e565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021282620001e5565b9050919050565b6000620002268262000205565b9050919050565b620002388162000219565b81146200024457600080fd5b50565b60008151905062000258816200022d565b92915050565b6000819050919050565b62000273816200025e565b81146200027f57600080fd5b50565b600081519050620002938162000268565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002e9826200029e565b810181811067ffffffffffffffff821117156200030b576200030a620002af565b5b80604052505050565b600062000320620001d6565b90506200032e8282620002de565b919050565b6000620003408262000205565b9050919050565b620003528162000333565b81146200035e57600080fd5b50565b600081519050620003728162000347565b92915050565b6000819050919050565b6200038d8162000378565b81146200039957600080fd5b50565b600081519050620003ad8162000382565b92915050565b600060608284031215620003cc57620003cb62000299565b5b620003d8606062000314565b90506000620003ea8482850162000361565b600083015250602062000400848285016200039c565b602083015250604062000416848285016200039c565b60408301525092915050565b600080600060a084860312156200043e576200043d620001e0565b5b60006200044e8682870162000247565b9350506020620004618682870162000282565b92505060406200047486828701620003b3565b9150509250925092565b610f0a806200048e6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063e06174e411610071578063e06174e414610159578063e423e0d514610179578063ea53b7b014610195578063f2f4eb26146101b5578063f2fde38b146101d3578063f4e52ae8146101ef576100b4565b80630a5bfa07146100b95780632fecda73146100d7578063715018a6146100f557806385079cd7146100ff5780638da5cb5b1461011d578063ac027f971461013b575b600080fd5b6100c16101f9565b6040516100ce9190610894565b60405180910390f35b6100df6101ff565b6040516100ec91906108c8565b60405180910390f35b6100fd610205565b005b610107610219565b6040516101149190610962565b60405180910390f35b6101256102b0565b604051610132919061099e565b60405180910390f35b6101436102da565b60405161015091906109da565b60405180910390f35b610161610371565b604051610170939291906109f5565b60405180910390f35b610193600480360381019061018e9190610a81565b6103a9565b005b61019d610501565b6040516101ac939291906109f5565b60405180910390f35b6101bd610539565b6040516101ca9190610ae2565b60405180910390f35b6101ed60048036038101906101e89190610b29565b61055d565b005b6101f76105e0565b005b60015481565b60085481565b61020d610707565b6102176000610785565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385079cd76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab9190610b94565b905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac027f976040518163ffffffff1660e01b8152600401602060405180830381865afa158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c9190610bff565b905090565b60028060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6103b1610707565b6103bc81600061084b565b15610418578160000160208101906103d49190610c41565b600560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b61042381600161084b565b156104375781602001356005600101819055505b61044281600261084b565b156104565781604001356005600201819055505b8060098190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663590909106040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190610c9a565b426104f79190610cf6565b6008819055505050565b60058060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610565610707565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb90610dad565b60405180910390fd5b6105dd81610785565b50565b6105e8610707565b6000600854141580156105fd57504260085410155b61063c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063390610e19565b60405180910390fd5b6000600954905061064e81600061084b565b156106bd57600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6106c881600161084b565b156106dd576005600101546002600101819055505b6106e881600261084b565b156106fc5760056002015460028001819055505b600060088190555050565b61070f610873565b73ffffffffffffffffffffffffffffffffffffffff1661072d6102b0565b73ffffffffffffffffffffffffffffffffffffffff1614610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a90610e85565b60405180910390fd5b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060001b82600281111561086457610863610ea5565b5b60001b84161415905092915050565b600033905090565b6000819050919050565b61088e8161087b565b82525050565b60006020820190506108a96000830184610885565b92915050565b6000819050919050565b6108c2816108af565b82525050565b60006020820190506108dd60008301846108b9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061092861092361091e846108e3565b610903565b6108e3565b9050919050565b600061093a8261090d565b9050919050565b600061094c8261092f565b9050919050565b61095c81610941565b82525050565b60006020820190506109776000830184610953565b92915050565b6000610988826108e3565b9050919050565b6109988161097d565b82525050565b60006020820190506109b3600083018461098f565b92915050565b60006109c48261092f565b9050919050565b6109d4816109b9565b82525050565b60006020820190506109ef60008301846109cb565b92915050565b6000606082019050610a0a60008301866109cb565b610a1760208301856108b9565b610a2460408301846108b9565b949350505050565b600080fd5b600080fd5b600060608284031215610a4c57610a4b610a31565b5b81905092915050565b610a5e8161087b565b8114610a6957600080fd5b50565b600081359050610a7b81610a55565b92915050565b60008060808385031215610a9857610a97610a2c565b5b6000610aa685828601610a36565b9250506060610ab785828601610a6c565b9150509250929050565b6000610acc8261092f565b9050919050565b610adc81610ac1565b82525050565b6000602082019050610af76000830184610ad3565b92915050565b610b068161097d565b8114610b1157600080fd5b50565b600081359050610b2381610afd565b92915050565b600060208284031215610b3f57610b3e610a2c565b5b6000610b4d84828501610b14565b91505092915050565b6000610b618261097d565b9050919050565b610b7181610b56565b8114610b7c57600080fd5b50565b600081519050610b8e81610b68565b92915050565b600060208284031215610baa57610ba9610a2c565b5b6000610bb884828501610b7f565b91505092915050565b6000610bcc8261097d565b9050919050565b610bdc81610bc1565b8114610be757600080fd5b50565b600081519050610bf981610bd3565b92915050565b600060208284031215610c1557610c14610a2c565b5b6000610c2384828501610bea565b91505092915050565b600081359050610c3b81610bd3565b92915050565b600060208284031215610c5757610c56610a2c565b5b6000610c6584828501610c2c565b91505092915050565b610c77816108af565b8114610c8257600080fd5b50565b600081519050610c9481610c6e565b92915050565b600060208284031215610cb057610caf610a2c565b5b6000610cbe84828501610c85565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d01826108af565b9150610d0c836108af565b9250828201905080821115610d2457610d23610cc7565b5b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d97602683610d2a565b9150610da282610d3b565b604082019050919050565b60006020820190508181036000830152610dc681610d8a565b9050919050565b7f4465616c436f6e6669673a2074696d656f7574206e6f74207061737365640000600082015250565b6000610e03601e83610d2a565b9150610e0e82610dcd565b602082019050919050565b60006020820190508181036000830152610e3281610df6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e6f602083610d2a565b9150610e7a82610e39565b602082019050919050565b60006020820190508181036000830152610e9e81610e62565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212206d6edccaacf6acac0dc4992d2cf1b1fbd2b94c430f3bddd4b22b5e91c13c6af164736f6c63430008110033";

type DealConfigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DealConfigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DealConfig__factory extends ContractFactory {
  constructor(...args: DealConfigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    core_: PromiseOrValue<string>,
    subnetId_: PromiseOrValue<BytesLike>,
    settings_: DealConfigState.SettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DealConfig> {
    return super.deploy(
      core_,
      subnetId_,
      settings_,
      overrides || {}
    ) as Promise<DealConfig>;
  }
  override getDeployTransaction(
    core_: PromiseOrValue<string>,
    subnetId_: PromiseOrValue<BytesLike>,
    settings_: DealConfigState.SettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      core_,
      subnetId_,
      settings_,
      overrides || {}
    );
  }
  override attach(address: string): DealConfig {
    return super.attach(address) as DealConfig;
  }
  override connect(signer: Signer): DealConfig__factory {
    return super.connect(signer) as DealConfig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DealConfigInterface {
    return new utils.Interface(_abi) as DealConfigInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DealConfig {
    return new Contract(address, _abi, signerOrProvider) as DealConfig;
  }
}
