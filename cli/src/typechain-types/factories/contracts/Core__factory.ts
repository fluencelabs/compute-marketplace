/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Core, CoreInterface } from "../../contracts/Core";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract AquaProxy",
        name: "aquaProxy_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "fluenceToken_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "aquaProxy",
    outputs: [
      {
        internalType: "contract AquaProxy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fluenceToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161038238038061038283398181016040528101906100329190610154565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050610194565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d1826100a6565b9050919050565b60006100e3826100c6565b9050919050565b6100f3816100d8565b81146100fe57600080fd5b50565b600081519050610110816100ea565b92915050565b6000610121826100c6565b9050919050565b61013181610116565b811461013c57600080fd5b50565b60008151905061014e81610128565b92915050565b6000806040838503121561016b5761016a6100a1565b5b600061017985828601610101565b925050602061018a8582860161013f565b9150509250929050565b60805160a0516101cb6101b76000396000609d01526000607901526101cb6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806385079cd71461003b578063ac027f9714610059575b600080fd5b610043610077565b604051610050919061013e565b60405180910390f35b61006161009b565b60405161006e919061017a565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006101046100ff6100fa846100bf565b6100df565b6100bf565b9050919050565b6000610116826100e9565b9050919050565b60006101288261010b565b9050919050565b6101388161011d565b82525050565b6000602082019050610153600083018461012f565b92915050565b60006101648261010b565b9050919050565b61017481610159565b82525050565b600060208201905061018f600083018461016b565b9291505056fea26469706673582212208e087b592dc235f1146c46860749c575dcf69a58cc252015b223cd048beca0a164736f6c63430008110033";

type CoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Core__factory extends ContractFactory {
  constructor(...args: CoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    aquaProxy_: PromiseOrValue<string>,
    fluenceToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Core> {
    return super.deploy(
      aquaProxy_,
      fluenceToken_,
      overrides || {}
    ) as Promise<Core>;
  }
  override getDeployTransaction(
    aquaProxy_: PromiseOrValue<string>,
    fluenceToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      aquaProxy_,
      fluenceToken_,
      overrides || {}
    );
  }
  override attach(address: string): Core {
    return super.attach(address) as Core;
  }
  override connect(signer: Signer): Core__factory {
    return super.connect(signer) as Core__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoreInterface {
    return new utils.Interface(_abi) as CoreInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Core {
    return new Contract(address, _abi, signerOrProvider) as Core;
  }
}
