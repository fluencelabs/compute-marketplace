/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface DealConfigStateInterface extends utils.Interface {
  functions: {
    "core()": FunctionFragment;
    "newSettings()": FunctionFragment;
    "settings()": FunctionFragment;
    "settingsChangeTimestamp()": FunctionFragment;
    "subnetId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "core"
      | "newSettings"
      | "settings"
      | "settingsChangeTimestamp"
      | "subnetId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newSettings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settingsChangeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "subnetId", values?: undefined): string;

  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settingsChangeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subnetId", data: BytesLike): Result;

  events: {};
}

export interface DealConfigState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DealConfigStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    core(overrides?: CallOverrides): Promise<[string]>;

    newSettings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        paymentToken: string;
        pricePerEpoch: BigNumber;
        requiredStake: BigNumber;
      }
    >;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        paymentToken: string;
        pricePerEpoch: BigNumber;
        requiredStake: BigNumber;
      }
    >;

    settingsChangeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    subnetId(overrides?: CallOverrides): Promise<[string]>;
  };

  core(overrides?: CallOverrides): Promise<string>;

  newSettings(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      paymentToken: string;
      pricePerEpoch: BigNumber;
      requiredStake: BigNumber;
    }
  >;

  settings(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      paymentToken: string;
      pricePerEpoch: BigNumber;
      requiredStake: BigNumber;
    }
  >;

  settingsChangeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  subnetId(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    core(overrides?: CallOverrides): Promise<string>;

    newSettings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        paymentToken: string;
        pricePerEpoch: BigNumber;
        requiredStake: BigNumber;
      }
    >;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        paymentToken: string;
        pricePerEpoch: BigNumber;
        requiredStake: BigNumber;
      }
    >;

    settingsChangeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    subnetId(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    core(overrides?: CallOverrides): Promise<BigNumber>;

    newSettings(overrides?: CallOverrides): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    settingsChangeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    subnetId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settingsChangeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subnetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
