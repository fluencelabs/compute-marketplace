/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace AquaProxy {
  export type ParticleStruct = {
    air: PromiseOrValue<string>;
    prevData: PromiseOrValue<string>;
    params: PromiseOrValue<string>;
    callResults: PromiseOrValue<string>;
  };

  export type ParticleStructOutput = [string, string, string, string] & {
    air: string;
    prevData: string;
    params: string;
    callResults: string;
  };
}

export interface DealInterface extends utils.Interface {
  functions: {
    "MIN_STAKE()": FunctionFragment;
    "WITHDRAW_TIMEOUT()": FunctionFragment;
    "airScriptHash()": FunctionFragment;
    "aquaProxy()": FunctionFragment;
    "createWithdrawRequest()": FunctionFragment;
    "daoAddress()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "exit((string,string,string,string),address)": FunctionFragment;
    "fluenceToken()": FunctionFragment;
    "isStopped()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "submitGoldenParticle((string,string,string,string))": FunctionFragment;
    "validators(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawUnlockTime()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_STAKE"
      | "WITHDRAW_TIMEOUT"
      | "airScriptHash"
      | "aquaProxy"
      | "createWithdrawRequest"
      | "daoAddress"
      | "deposit"
      | "exit"
      | "fluenceToken"
      | "isStopped"
      | "paymentToken"
      | "stake"
      | "submitGoldenParticle"
      | "validators"
      | "withdraw"
      | "withdrawUnlockTime"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MIN_STAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airScriptHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aquaProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createWithdrawRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [AquaProxy.ParticleStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fluenceToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isStopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGoldenParticle",
    values: [AquaProxy.ParticleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawUnlockTime",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MIN_STAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airScriptHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aquaProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluenceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitGoldenParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnlockTime",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Deal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DealInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_STAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WITHDRAW_TIMEOUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    airScriptHash(overrides?: CallOverrides): Promise<[string]>;

    aquaProxy(overrides?: CallOverrides): Promise<[string]>;

    createWithdrawRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exit(
      particle: AquaProxy.ParticleStruct,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fluenceToken(overrides?: CallOverrides): Promise<[string]>;

    isStopped(overrides?: CallOverrides): Promise<[boolean]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitGoldenParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { balance: BigNumber; isActive: boolean }
    >;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  WITHDRAW_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

  airScriptHash(overrides?: CallOverrides): Promise<string>;

  aquaProxy(overrides?: CallOverrides): Promise<string>;

  createWithdrawRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoAddress(overrides?: CallOverrides): Promise<string>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exit(
    particle: AquaProxy.ParticleStruct,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fluenceToken(overrides?: CallOverrides): Promise<string>;

  isStopped(overrides?: CallOverrides): Promise<boolean>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitGoldenParticle(
    particle: AquaProxy.ParticleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { balance: BigNumber; isActive: boolean }>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    airScriptHash(overrides?: CallOverrides): Promise<string>;

    aquaProxy(overrides?: CallOverrides): Promise<string>;

    createWithdrawRequest(overrides?: CallOverrides): Promise<void>;

    daoAddress(overrides?: CallOverrides): Promise<string>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(
      particle: AquaProxy.ParticleStruct,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fluenceToken(overrides?: CallOverrides): Promise<string>;

    isStopped(overrides?: CallOverrides): Promise<boolean>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitGoldenParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { balance: BigNumber; isActive: boolean }
    >;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    MIN_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    airScriptHash(overrides?: CallOverrides): Promise<BigNumber>;

    aquaProxy(overrides?: CallOverrides): Promise<BigNumber>;

    createWithdrawRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exit(
      particle: AquaProxy.ParticleStruct,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fluenceToken(overrides?: CallOverrides): Promise<BigNumber>;

    isStopped(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitGoldenParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_STAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_TIMEOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    airScriptHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aquaProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createWithdrawRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      particle: AquaProxy.ParticleStruct,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fluenceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitGoldenParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
