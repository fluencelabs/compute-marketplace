/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DealFactoryInterface extends utils.Interface {
  functions: {
    "aquaProxy()": FunctionFragment;
    "createDeal(address,bytes32)": FunctionFragment;
    "daoAddress()": FunctionFragment;
    "fluenceToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aquaProxy"
      | "createDeal"
      | "daoAddress"
      | "fluenceToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "aquaProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createDeal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fluenceToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "aquaProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluenceToken",
    data: BytesLike
  ): Result;

  events: {
    "CreateDeal(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateDeal"): EventFragment;
}

export interface CreateDealEventObject {
  addr: string;
}
export type CreateDealEvent = TypedEvent<[string], CreateDealEventObject>;

export type CreateDealEventFilter = TypedEventFilter<CreateDealEvent>;

export interface DealFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DealFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aquaProxy(overrides?: CallOverrides): Promise<[string]>;

    createDeal(
      paymentToken: PromiseOrValue<string>,
      airScriptHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<[string]>;

    fluenceToken(overrides?: CallOverrides): Promise<[string]>;
  };

  aquaProxy(overrides?: CallOverrides): Promise<string>;

  createDeal(
    paymentToken: PromiseOrValue<string>,
    airScriptHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoAddress(overrides?: CallOverrides): Promise<string>;

  fluenceToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aquaProxy(overrides?: CallOverrides): Promise<string>;

    createDeal(
      paymentToken: PromiseOrValue<string>,
      airScriptHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    daoAddress(overrides?: CallOverrides): Promise<string>;

    fluenceToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CreateDeal(address)"(addr?: null): CreateDealEventFilter;
    CreateDeal(addr?: null): CreateDealEventFilter;
  };

  estimateGas: {
    aquaProxy(overrides?: CallOverrides): Promise<BigNumber>;

    createDeal(
      paymentToken: PromiseOrValue<string>,
      airScriptHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    fluenceToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aquaProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDeal(
      paymentToken: PromiseOrValue<string>,
      airScriptHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fluenceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
