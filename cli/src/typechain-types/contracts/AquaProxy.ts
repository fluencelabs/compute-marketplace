/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace AquaProxy {
  export type ParticleStruct = {
    air: PromiseOrValue<string>;
    prevData: PromiseOrValue<string>;
    params: PromiseOrValue<string>;
    callResults: PromiseOrValue<string>;
  };

  export type ParticleStructOutput = [string, string, string, string] & {
    air: string;
    prevData: string;
    params: string;
    callResults: string;
  };
}

export interface AquaProxyInterface extends utils.Interface {
  functions: {
    "aquaVMAddress()": FunctionFragment;
    "aquaVMImplicitAddress()": FunctionFragment;
    "callback(bytes32)": FunctionFragment;
    "near()": FunctionFragment;
    "particlesStatuses(bytes32)": FunctionFragment;
    "selfReprsentativeImplicitAddress()": FunctionFragment;
    "verifyParticle((string,string,string,string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aquaVMAddress"
      | "aquaVMImplicitAddress"
      | "callback"
      | "near"
      | "particlesStatuses"
      | "selfReprsentativeImplicitAddress"
      | "verifyParticle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aquaVMAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aquaVMImplicitAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callback",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "near", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "particlesStatuses",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "selfReprsentativeImplicitAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyParticle",
    values: [AquaProxy.ParticleStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "aquaVMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aquaVMImplicitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "near", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "particlesStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfReprsentativeImplicitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyParticle",
    data: BytesLike
  ): Result;

  events: {
    "VerifyParticle(bytes32,string,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VerifyParticle"): EventFragment;
}

export interface VerifyParticleEventObject {
  hash: string;
  air: string;
  prevData: string;
  params: string;
  callResults: string;
}
export type VerifyParticleEvent = TypedEvent<
  [string, string, string, string, string],
  VerifyParticleEventObject
>;

export type VerifyParticleEventFilter = TypedEventFilter<VerifyParticleEvent>;

export interface AquaProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AquaProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aquaVMAddress(overrides?: CallOverrides): Promise<[string]>;

    aquaVMImplicitAddress(overrides?: CallOverrides): Promise<[string]>;

    callback(
      particleHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    near(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { initialized: boolean; wNEAR: string }>;

    particlesStatuses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    selfReprsentativeImplicitAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  aquaVMAddress(overrides?: CallOverrides): Promise<string>;

  aquaVMImplicitAddress(overrides?: CallOverrides): Promise<string>;

  callback(
    particleHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  near(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { initialized: boolean; wNEAR: string }>;

  particlesStatuses(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  selfReprsentativeImplicitAddress(overrides?: CallOverrides): Promise<string>;

  verifyParticle(
    particle: AquaProxy.ParticleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aquaVMAddress(overrides?: CallOverrides): Promise<string>;

    aquaVMImplicitAddress(overrides?: CallOverrides): Promise<string>;

    callback(
      particleHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    near(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { initialized: boolean; wNEAR: string }>;

    particlesStatuses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    selfReprsentativeImplicitAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    verifyParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "VerifyParticle(bytes32,string,string,string,string)"(
      hash?: null,
      air?: null,
      prevData?: null,
      params?: null,
      callResults?: null
    ): VerifyParticleEventFilter;
    VerifyParticle(
      hash?: null,
      air?: null,
      prevData?: null,
      params?: null,
      callResults?: null
    ): VerifyParticleEventFilter;
  };

  estimateGas: {
    aquaVMAddress(overrides?: CallOverrides): Promise<BigNumber>;

    aquaVMImplicitAddress(overrides?: CallOverrides): Promise<BigNumber>;

    callback(
      particleHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    near(overrides?: CallOverrides): Promise<BigNumber>;

    particlesStatuses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selfReprsentativeImplicitAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aquaVMAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aquaVMImplicitAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callback(
      particleHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    near(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    particlesStatuses(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    selfReprsentativeImplicitAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyParticle(
      particle: AquaProxy.ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
