{
  "address": "0xeB8103A6f45b8d9f6F4c4ca499AE172C0A0754cF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fluenceToken_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "usdToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fluenceToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "sendFLT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "sendUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d111898e7205274f9bce55be38db8799f7485f9e53c4813faa5cabf11be6bb4",
  "receipt": {
    "to": null,
    "from": "0x627e730fd1361E6FFcee236DAc08F82EAa8ac7cD",
    "contractAddress": "0xeB8103A6f45b8d9f6F4c4ca499AE172C0A0754cF",
    "transactionIndex": 0,
    "gasUsed": "668076",
    "logsBloom": "0x
    "blockHash": "0x70249b1abb3f0ba0d5d20c4f091672f70a93964da9858c08171ec9a2c4e4b9ba",
    "transactionHash": "0x9d111898e7205274f9bce55be38db8799f7485f9e53c4813faa5cabf11be6bb4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x9d111898e7205274f9bce55be38db8799f7485f9e53c4813faa5cabf11be6bb4",
        "address": "0xeB8103A6f45b8d9f6F4c4ca499AE172C0A0754cF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000627e730fd1361e6ffcee236dac08f82eaa8ac7cd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x70249b1abb3f0ba0d5d20c4f091672f70a93964da9858c08171ec9a2c4e4b9ba"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "668076",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3D56d40F298AaC494EE4612d39edF591ed8C5c69",
    "0x8b82957A2c28cCf76343924f4bD65e63ab3C4Db6"
  ],
  "numDeployments": 1,
  "solcInputHash": "09b042013a0e7f52f00b8304d2e32516",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fluenceToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fluenceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendFLT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dev/OwnableFaucet.sol\":\"OwnableFaucet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xface9a29da6448061decb3506735c0c37aae8820ffaacfea982b1a8633be20d4\",\"license\":\"MIT\"},\"contracts/auroraSDK/AuroraSdk.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Codec.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Address of Cross Contract Call precompile in Aurora.\\n// It allows scheduling new promises to NEAR contracts.\\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the predecessor account id of the current call.\\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the current account id of the current call.\\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\\n// Addresss of promise result precompile in Aurora.\\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\\n// Address of wNEAR ERC20 on mainnet\\naddress constant wNEAR_MAINNET = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n\\nstruct NEAR {\\n    /// Wether the represenative NEAR account id for this contract\\n    /// has already been created or not. This is required since the\\n    /// first cross contract call requires attaching extra deposit\\n    /// to cover storage staking balance.\\n    bool initialized;\\n    /// Address of wNEAR token contract. It is used to charge the user\\n    /// required tokens for paying NEAR storage fees and attached balance\\n    /// for cross contract calls.\\n    IERC20 wNEAR;\\n}\\n\\nlibrary AuroraSdk {\\n    using Codec for bytes;\\n    using Codec for PromiseCreateArgs;\\n    using Codec for PromiseWithCallback;\\n    using Codec for Borsh.Data;\\n    using Borsh for Borsh.Data;\\n\\n    /// Create an instance of NEAR object. Requires the address at which\\n    /// wNEAR ERC20 token contract is deployed.\\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\\n        NEAR memory near = NEAR(false, wNEAR);\\n        near.wNEAR.approve(XCC_PRECOMPILE, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        return near;\\n    }\\n\\n    /// Default configuration for mainnet.\\n    function mainnet() public returns (NEAR memory) {\\n        return initNear(IERC20(wNEAR_MAINNET));\\n    }\\n\\n    /// Compute NEAR represtentative account for the given Aurora address.\\n    /// This is the NEAR account created by the cross contract call precompile.\\n    function nearRepresentative(address account) public returns (string memory) {\\n        return addressSubAccount(account, currentAccountId());\\n    }\\n\\n    /// Prepends the given account ID with the given address (hex-encoded).\\n    function addressSubAccount(address account, string memory accountId) public pure returns (string memory) {\\n        return string(abi.encodePacked(Utils.bytesToHex(abi.encodePacked((bytes20(account)))), \\\".\\\", accountId));\\n    }\\n\\n    /// Compute implicity Aurora Address for the given NEAR account.\\n    function implicitAuroraAddress(string memory accountId) public pure returns (address) {\\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\\n    }\\n\\n    /// Compute the implicit Aurora address of the represenative NEAR account\\n    /// for the given Aurora address. Useful when a contract wants to call\\n    /// itself via a callback using cross contract call precompile.\\n    function nearRepresentitiveImplicitAddress(address account) public returns (address) {\\n        return implicitAuroraAddress(nearRepresentative(account));\\n    }\\n\\n    /// Get the promise result at the specified index.\\n    function promiseResult(uint256 index) public returns (PromiseResult memory result) {\\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n\\n        Borsh.Data memory borsh = Borsh.from(returnData);\\n\\n        uint32 length = borsh.decodeU32();\\n        require(index < length, \\\"Index out of bounds\\\");\\n\\n        for (uint256 i = 0; i < index; i++) {\\n            PromiseResultStatus status = PromiseResultStatus(uint8(borsh.decodeU8()));\\n            if (status == PromiseResultStatus.Successful) {\\n                borsh.skipBytes();\\n            }\\n        }\\n\\n        result.status = PromiseResultStatus(borsh.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = borsh.decodeBytes();\\n        }\\n    }\\n\\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\\n    function currentAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Get the NEAR account id of the predecessor contract.\\n    function predecessorAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Crease a base promise. This is not immediately schedule for execution\\n    /// until transact is called. It can be combined with other promises using\\n    /// `then` combinator.\\n    ///\\n    /// Input is not checekd during promise creation. If it is invalid, the\\n    /// transaction will be scheduled either way, but it will fail during execution.\\n    function call(\\n        NEAR storage near,\\n        string memory targetAccountId,\\n        string memory method,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        /// Need to capture nearBalance before we modify it so that we don't\\n        /// double-charge the user for their initialization cost.\\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(targetAccountId, method, args, nearBalance, nearGas);\\n\\n        if (!near.initialized) {\\n            /// If the contract needs to be initialized, we need to attach\\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\\n            nearBalance += 2_000_000_000_000_000_000_000_000;\\n            near.initialized = true;\\n        }\\n\\n        if (nearBalance > 0) {\\n            near.wNEAR.transferFrom(msg.sender, address(this), uint256(nearBalance));\\n        }\\n\\n        return promise_args;\\n    }\\n\\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\\n    /// to a controct inside `Aurora`.\\n    function auroraCall(\\n        NEAR storage near,\\n        address target,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        return call(near, currentAccountId(), \\\"call\\\", abi.encodePacked(uint8(0), target, uint256(0), args.encode()), nearBalance, nearGas);\\n    }\\n\\n    /// Schedule a base promise to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    function transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    ///\\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\\n    /// https://github.com/ethereum/solidity/issues/869\\n    function transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\\n    /// A separate transaction to execute the scheduled promise is needed.\\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Create a promise with callback from two given promises.\\n    function then(PromiseCreateArgs memory base, PromiseCreateArgs memory callback) public pure returns (PromiseWithCallback memory) {\\n        return PromiseWithCallback(base, callback);\\n    }\\n}\\n\",\"keccak256\":\"0x712321e0df87cc8733ffd6a454f3e1173ed0da2b46718eec8587e6a0cb1a9395\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(data.ptr + length <= data.end, \\\"Parse error: unexpected EOI\\\");\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length) internal pure returns (bytes32 res) {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length) internal pure returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length) internal view returns (bytes32) {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data) internal pure returns (bytes memory res) {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf0b63a3b4e42a11144cba26abe6d7bd37db009b6edb8eed00c1505a44e0b698\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encodeEM(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encodePromise(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(bytes(nearPromise.targetAccountId)),\\n                encode(bytes(nearPromise.method)),\\n                encode(nearPromise.args),\\n                encodeU128(nearPromise.nearBalance),\\n                encodeU64(nearPromise.nearGas)\\n            );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise) public pure returns (bytes memory) {\\n        return abi.encodePacked(encode(nearPromise.base), encode(nearPromise.callback));\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseCreateArgs memory nearPromise, ExecutionMode mode) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeEM(mode), encodePromise(PromiseArgsVariant.Create), encode(nearPromise));\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(PromiseWithCallback memory nearPromise, ExecutionMode mode) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeEM(mode), encodePromise(PromiseArgsVariant.Callback), encode(nearPromise));\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data) public pure returns (PromiseResult memory result) {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(uint8(data.decodeU8()));\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0968b2989a0bde381c8df59afb51779e258d02c2c56fb881be455681acdeef60\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant {\\n    /// Basic NEAR promise\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode {\\n    /// Eager mode means that the promise WILL be executed in a single\\n    /// NEAR transaction.\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus {\\n    /// This status should not be reachable.\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xfd72f1cab846359ba751ccf4a0ed670aef5016f3239e60547ae88bee459d8437\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v = ((v & 0x00000000ffffffff00000000ffffffff) << 32) | ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v =\\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v =\\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) << 16) |\\n            ((v & 0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v =\\n            ((v & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) << 32) |\\n            ((v & 0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >> 32);\\n        v =\\n            ((v & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) << 64) |\\n            ((v & 0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >> 64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length) internal pure returns (bytes memory res) {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end := add(res, and(add(length, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length) internal view returns (bytes32 res) {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer) public pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0xc40fae1eea50795686b8c434f589f50e8c973f6b8ac7d3a17197c28db619370c\",\"license\":\"CC-BY-1.0\"},\"contracts/dev/OwnableFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"../global/AquaProxy.sol\\\";\\nimport \\\"./TestERC20.sol\\\";\\n\\ncontract OwnableFaucet is Ownable, Multicall {\\n    IERC20 public immutable fluenceToken;\\n    IERC20 public immutable usdToken;\\n\\n    constructor(IERC20 fluenceToken_, IERC20 usdToken_) {\\n        fluenceToken = fluenceToken_;\\n        usdToken = usdToken_;\\n    }\\n\\n    function sendUSD(address addr, uint256 value) external onlyOwner {\\n        usdToken.transfer(addr, value);\\n    }\\n\\n    function sendFLT(address addr, uint256 value) external onlyOwner {\\n        fluenceToken.transfer(addr, value);\\n    }\\n}\\n\",\"keccak256\":\"0xa08d28fce56415ea98d2fc3771f841669c8afc1d07cce6b56dacaf95013beb30\",\"license\":\"Apache-2.0\"},\"contracts/dev/TestERC20.sol\":{\"content\":\"// contracts/GLDToken.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract TestERC20 is ERC20 {\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\\n        uint256 v = 0;\\n        unchecked {\\n            v--;\\n        }\\n\\n        _mint(msg.sender, v);\\n    }\\n}\\n\",\"keccak256\":\"0x55c66ef00b1d40969280ea94b69afad27748dfd2eab60713344b968282f7413a\",\"license\":\"MIT\"},\"contracts/global/AquaProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../auroraSDK/AuroraSdk.sol\\\";\\n\\ncontract AquaProxy {\\n    using AuroraSdk for NEAR;\\n    using AuroraSdk for PromiseWithCallback;\\n    using AuroraSdk for PromiseCreateArgs;\\n\\n    enum ParticleStatus {\\n        None,\\n        Pending,\\n        Success,\\n        Failure\\n    }\\n\\n    struct Particle {\\n        string air;\\n        string prevData;\\n        string params;\\n        string callResults;\\n    }\\n\\n    IERC20 constant wNEAR = IERC20(0x4861825E75ab14553E5aF711EbbE6873d369d146);\\n\\n    address public immutable selfReprsentativeImplicitAddress;\\n    address public immutable aquaVMImplicitAddress;\\n\\n    NEAR public near;\\n    string public aquaVMAddress;\\n\\n    uint64 constant VS_NEAR_GAS = 30_000_000_000_000;\\n\\n    constructor(string memory aquaVMAddress_) {\\n        aquaVMAddress = aquaVMAddress_;\\n        aquaVMImplicitAddress = AuroraSdk.implicitAuroraAddress(aquaVMAddress);\\n\\n        near = AuroraSdk.initNear(wNEAR);\\n\\n        selfReprsentativeImplicitAddress = AuroraSdk.nearRepresentitiveImplicitAddress(address(this));\\n    }\\n\\n    function verifyParticle(Particle calldata particle) public {\\n        PromiseCreateArgs memory verifyScriptCall = near.call(\\n            aquaVMAddress,\\n            \\\"verify_script\\\",\\n            abi.encodePacked(\\n                Codec.encode(bytes(particle.air)),\\n                Codec.encode(bytes(particle.prevData)),\\n                Codec.encode(bytes(particle.params)),\\n                Codec.encode(bytes(particle.callResults))\\n            ),\\n            0,\\n            VS_NEAR_GAS\\n        );\\n\\n        verifyScriptCall.transact();\\n    }\\n}\\n\",\"keccak256\":\"0x37109077e433a706e5b9be10433fd4953d6aec4b1e383dda478a78a24849801f\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c0346100cc57601f610baf38819003918201601f19168301916001600160401b038311848410176100d15780849260409485528339810103126100cc57610052602061004b836100e7565b92016100e7565b60008054336001600160a01b0319821681178355604051949290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360805260a052610ab390816100fc82396080518181816105450152610759015260a05181818160a601526106b80152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100cc5756fe6040608081526004908136101561001557600080fd5b600091823560e01c9081630af76b8f1461071e5781633922f5421461061d578163715018a61461059c5781638da5cb5b14610569578163ac027f9714610518578163ac9650d8146101eb578163f2fde38b146100ce575063f897a22b1461007b57600080fd5b346100ca57816003193601126100ca576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b9050346101e75760206003193601126101e7576100e961078b565b906100f2610811565b73ffffffffffffffffffffffffffffffffffffffff8092169283156101645750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b8383346100ca57602090816003193601126101e75783359167ffffffffffffffff948584116105145736602385011215610514578381013593868511610510576024916005973684888b1b8501011161050c5761024d87939798969598610900565b9661025a86519889610890565b8388527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061028785610900565b01875b8181106104fd57505086907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbd81360301915b85811061033f57505050505050508051938080860192818752855180945283818801981b870101940192955b8287106102f55785850386f35b90919293828061032f837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a6001960301865288516107b3565b96019201960195929190926102e8565b86818d9c999a9c1b83010135838112156104f9578201878101358581116104f5576044918281019082360382136104f1579082916103896103808f95610918565b94519485610890565b8284528c8401948336920101116104f157818f928d928637830101528a5191606091828401848110898211176104c5578f80938f938f857f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c7f206661696c65640000000000000000000000000000000000000000000000000092869761044a9c9b995260278b528a01528801525190305af4903d156104be57508c3d61043a61043182610918565b92519283610890565b815280928d3d92013e5b30610995565b610454828c610952565b5261045f818b610952565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461049357600101999796996102bc565b868b6011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b9150610444565b508a8f60418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8e80fd5b8c80fd5b8b80fd5b60608a82018c01528a0161028a565b8780fd5b8580fd5b8480fd5b5050346100ca57816003193601126100ca576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100ca57816003193601126100ca5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b833461061a578060031936011261061a576105b5610811565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b919050346101e757806003193601126101e757602061069e9261063e61078b565b610646610811565b835194859283927fa9059cbb0000000000000000000000000000000000000000000000000000000084526024359184016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af190811561071557506106ea575080f35b61070a9060203d811161070e575b6107028183610890565b810190610a65565b5080f35b503d6106f8565b513d84823e3d90fd5b919050346101e757806003193601126101e757602061073f9261063e61078b565b03818673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af190811561071557506106ea575080f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036107ae57565b600080fd5b919082519283825260005b8481106107fd5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016107be565b73ffffffffffffffffffffffffffffffffffffffff60005416330361083257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108d157604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116108d15760051b60200190565b67ffffffffffffffff81116108d157601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b80518210156109665760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91929015610a1057508151156109a9575090565b3b156109b25790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610a235750805190602001fd5b610a61906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906107b3565b0390fd5b908160209103126107ae575180151581036107ae579056fea26469706673582212206ec356d83614591cc08aa62980809536e99ce2f5eb50c049172bf3670869aa7064736f6c63430008110033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c9081630af76b8f1461071e5781633922f5421461061d578163715018a61461059c5781638da5cb5b14610569578163ac027f9714610518578163ac9650d8146101eb578163f2fde38b146100ce575063f897a22b1461007b57600080fd5b346100ca57816003193601126100ca576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b9050346101e75760206003193601126101e7576100e961078b565b906100f2610811565b73ffffffffffffffffffffffffffffffffffffffff8092169283156101645750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b8383346100ca57602090816003193601126101e75783359167ffffffffffffffff948584116105145736602385011215610514578381013593868511610510576024916005973684888b1b8501011161050c5761024d87939798969598610900565b9661025a86519889610890565b8388527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061028785610900565b01875b8181106104fd57505086907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbd81360301915b85811061033f57505050505050508051938080860192818752855180945283818801981b870101940192955b8287106102f55785850386f35b90919293828061032f837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08a6001960301865288516107b3565b96019201960195929190926102e8565b86818d9c999a9c1b83010135838112156104f9578201878101358581116104f5576044918281019082360382136104f1579082916103896103808f95610918565b94519485610890565b8284528c8401948336920101116104f157818f928d928637830101528a5191606091828401848110898211176104c5578f80938f938f857f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c7f206661696c65640000000000000000000000000000000000000000000000000092869761044a9c9b995260278b528a01528801525190305af4903d156104be57508c3d61043a61043182610918565b92519283610890565b815280928d3d92013e5b30610995565b610454828c610952565b5261045f818b610952565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461049357600101999796996102bc565b868b6011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b9150610444565b508a8f60418b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8e80fd5b8c80fd5b8b80fd5b60608a82018c01528a0161028a565b8780fd5b8580fd5b8480fd5b5050346100ca57816003193601126100ca576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100ca57816003193601126100ca5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b833461061a578060031936011261061a576105b5610811565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b919050346101e757806003193601126101e757602061069e9261063e61078b565b610646610811565b835194859283927fa9059cbb0000000000000000000000000000000000000000000000000000000084526024359184016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af190811561071557506106ea575080f35b61070a9060203d811161070e575b6107028183610890565b810190610a65565b5080f35b503d6106f8565b513d84823e3d90fd5b919050346101e757806003193601126101e757602061073f9261063e61078b565b03818673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af190811561071557506106ea575080f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036107ae57565b600080fd5b919082519283825260005b8481106107fd5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016107be565b73ffffffffffffffffffffffffffffffffffffffff60005416330361083257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108d157604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116108d15760051b60200190565b67ffffffffffffffff81116108d157601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b80518210156109665760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91929015610a1057508151156109a9575090565b3b156109b25790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610a235750805190602001fd5b610a61906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906107b3565b0390fd5b908160209103126107ae575180151581036107ae579056fea26469706673582212206ec356d83614591cc08aa62980809536e99ce2f5eb50c049172bf3670869aa7064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1291,
        "contract": "contracts/dev/OwnableFaucet.sol:OwnableFaucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}