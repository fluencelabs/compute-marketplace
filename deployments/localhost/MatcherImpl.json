{
  "address": "0x80c7c37933BD039bE3e4c441499E5767838D719e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGlobalConfig",
          "name": "globalConfig_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minPriceByEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "workersCount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1[]",
          "name": "effectors",
          "type": "tuple[]"
        }
      ],
      "name": "ComputeProviderRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "computeProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "joinedWorkers",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dealCreationBlock",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CIDV1",
          "name": "appCID",
          "type": "tuple"
        }
      ],
      "name": "Matched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "globalConfig",
      "outputs": [
        {
          "internalType": "contract IGlobalConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICore",
          "name": "deal",
          "type": "address"
        }
      ],
      "name": "matchWithDeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minPriceByEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workersCount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "prefixes",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CIDV1[]",
          "name": "effectors",
          "type": "tuple[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resourceConfigIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_first",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_last",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "resourceConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minPriceByEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workersCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "hasAccess",
          "type": "bool"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x57b9cdb4608dfec4e49b941734046ab9abe5f5c020ec5cbd293be79361f87d46",
  "receipt": {
    "to": null,
    "from": "0x627e730fd1361E6FFcee236DAc08F82EAa8ac7cD",
    "contractAddress": "0x80c7c37933BD039bE3e4c441499E5767838D719e",
    "transactionIndex": 0,
    "gasUsed": "2161848",
    "logsBloom": "0x
    "blockHash": "0x87d8fcbd4c6e4b566deee9c0d053712c070a14de189f0690a88f3444f21daa85",
    "transactionHash": "0x57b9cdb4608dfec4e49b941734046ab9abe5f5c020ec5cbd293be79361f87d46",
    "logs": [],
    "blockNumber": 37,
    "cumulativeGasUsed": "2161848",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf4e3Db4978DDb1c5f144d072729Ff8AfCb0a6040"
  ],
  "numDeployments": 1,
  "solcInputHash": "09b042013a0e7f52f00b8304d2e32516",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGlobalConfig\",\"name\":\"globalConfig_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPriceByEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workersCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors\",\"type\":\"tuple[]\"}],\"name\":\"ComputeProviderRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"computeProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"joinedWorkers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealCreationBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CIDV1\",\"name\":\"appCID\",\"type\":\"tuple\"}],\"name\":\"Matched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"globalConfig\",\"outputs\":[{\"internalType\":\"contract IGlobalConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICore\",\"name\":\"deal\",\"type\":\"address\"}],\"name\":\"matchWithDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPriceByEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workersCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"prefixes\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct CIDV1[]\",\"name\":\"effectors\",\"type\":\"tuple[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceConfigIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_first\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_last\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"resourceConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPriceByEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasAccess\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/global/Matcher.sol\":\"Matcher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nenum Module {\\n    None,\\n    Config,\\n    Payment,\\n    Status,\\n    Workers\\n}\\n\\nstruct Particle {\\n    string air;\\n    string prevData;\\n    string params;\\n    string callResults;\\n}\\n\\nstruct PAT {\\n    uint256 index;\\n    address owner;\\n    uint256 collateral;\\n    uint256 created;\\n}\\n\\nstruct PDT {\\n    string peerId;\\n    string workerId;\\n}\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\\nenum DealStatus {\\n    WaitingForWorkers,\\n    Working\\n}\\n\\ntype PATId is bytes32;\\n\",\"keccak256\":\"0xd32e425ecf1ce5ca9bb538b95a0a86308dd27255469d4c945b39752c30227cfa\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfigModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\nimport \\\"../../global/interfaces/IParticleVerifyer.sol\\\";\\nimport \\\"../../global/interfaces/IGlobalConfig.sol\\\";\\n\\ninterface IConfigModule {\\n    function initialize(\\n        IERC20 paymentToken_,\\n        uint256 pricePerEpoch_,\\n        uint256 requiredCollateral_,\\n        CIDV1 calldata appCID_,\\n        uint256 minWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 targetWorkers_,\\n        CIDV1[] calldata effectorWasmsCids_\\n    ) external;\\n\\n    function globalConfig() external view returns (IGlobalConfig);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function particleVerifyer() external view returns (IParticleVerifyer);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function pricePerEpoch() external view returns (uint256);\\n\\n    function requiredCollateral() external view returns (uint256);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n}\\n\",\"keccak256\":\"0x7732f67045048e33830c0d726f727f9b6ff3d6404f072570a6c6eddee4059418\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IConfigModule.sol\\\";\\nimport \\\"./IPaymentModule.sol\\\";\\nimport \\\"./IStatusModule.sol\\\";\\nimport \\\"./IWorkersModule.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface ICore {\\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\\n\\n    function moduleByType(Module module) external view returns (address);\\n\\n    function moduleByAddress(address module) external view returns (Module);\\n\\n    function configModule() external view returns (IConfigModule);\\n\\n    function paymentModule() external view returns (IPaymentModule);\\n\\n    function statusModule() external view returns (IStatusModule);\\n\\n    function workersModule() external view returns (IWorkersModule);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xc8f2c2cd6c9448dfdbfd779e8150291980e37bceb075de40b4d0253aa0e88078\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IPaymentModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IPaymentModule {\\n    function balance() external view returns (uint256);\\n\\n    function rewardAmount(bytes32 particleHash, PATId patId) external view returns (uint);\\n\\n    function depositToPaymentBalance(uint256 amount) external;\\n\\n    function withdrawFromPaymentBalance(uint256 amount) external;\\n\\n    function commitParticle(Particle calldata particle) external;\\n\\n    function withdrawReward(PATId patId, bytes32[] calldata particlesHashes) external;\\n}\\n\",\"keccak256\":\"0x1cabc17d173bff8cd646c562f989a69826dd0a563c93fb14c096da2297386358\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IStatusModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { DealStatus } from \\\"../base/Types.sol\\\";\\n\\ninterface IStatusModule {\\n    event StatusChanged(DealStatus newStatus);\\n\\n    function status() external view returns (DealStatus);\\n\\n    function startWorkingEpoch() external view returns (uint256);\\n\\n    function changeStatus(DealStatus status_) external;\\n}\\n\",\"keccak256\":\"0x8a8377364730135a67039b942fe05c4d6ea99cd1d2c492179965dbbebc70aee3\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IWorkersModule {\\n    function workersCount() external view returns (uint256);\\n\\n    function getNextWorkerIndex() external view returns (uint256);\\n\\n    function getPATIndex(PATId id) external view returns (uint256);\\n\\n    function getPATOwner(PATId id) external view returns (address);\\n\\n    function getPDT(PATId id) external view returns (string memory peerId, string memory workerId);\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\\n\\n    function join() external;\\n\\n    function joinViaMatcher(address owner) external;\\n\\n    function exit(PATId id) external;\\n\\n    function withdrawCollateral(address owner) external;\\n\\n    function setPDT(PATId id, string calldata peerId, string calldata workerId) external;\\n}\\n\",\"keccak256\":\"0xa36af9ddfecb54d12c933f5608194d889de93126f0108ffb6b8b91c7f6c57ddd\",\"license\":\"Apache-2.0\"},\"contracts/global/Matcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../deal/interfaces/ICore.sol\\\";\\nimport \\\"./interfaces/IGlobalConfig.sol\\\";\\nimport \\\"./interfaces/IMatcher.sol\\\";\\nimport \\\"../utils/LinkedList.sol\\\";\\nimport \\\"../deal/base/Types.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\ncontract MatcherState {\\n    struct ResourceConfig {\\n        uint minPriceByEpoch;\\n        uint maxCollateral;\\n        uint workersCount;\\n    }\\n\\n    struct Effectors {\\n        mapping(bytes32 => bool) effectors;\\n    }\\n\\n    IGlobalConfig public immutable globalConfig;\\n\\n    LinkedList.Bytes32List public resourceConfigIds;\\n    mapping(address => ResourceConfig) public resourceConfigs;\\n    mapping(address => bool) public whitelist;\\n\\n    mapping(address => Effectors) internal _effectorsByOwner;\\n\\n    constructor(IGlobalConfig globalConfig_) {\\n        globalConfig = globalConfig_;\\n    }\\n}\\n\\nabstract contract MatcherInternal is MatcherState, UUPSUpgradeable {\\n    using LinkedList for LinkedList.Bytes32List;\\n\\n    event Matched(address indexed computeProvider, address deal, uint joinedWorkers, uint dealCreationBlock, CIDV1 appCID);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == globalConfig.owner(), \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    function _isEffectorsMatched(IConfigModule dealConfig, address computeProvider) internal view returns (bool) {\\n        CIDV1[] memory dealEffectors = dealConfig.effectors();\\n\\n        for (uint i = 0; i < dealEffectors.length; i++) {\\n            bytes32 dealEffector = keccak256(abi.encodePacked(dealEffectors[i].prefixes, dealEffectors[i].hash));\\n            if (!_effectorsByOwner[computeProvider].effectors[dealEffector]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\nabstract contract MatcherOwnable is MatcherInternal {\\n    function setWhiteList(address owner, bool hasAccess) external onlyOwner {\\n        whitelist[owner] = hasAccess;\\n    }\\n}\\n\\ncontract Matcher is IMatcher, MatcherOwnable {\\n    using LinkedList for LinkedList.Bytes32List;\\n\\n    event ComputeProviderRegistered(\\n        address computeProvider,\\n        uint minPriceByEpoch,\\n        uint maxCollateral,\\n        uint workersCount,\\n        CIDV1[] effectors\\n    );\\n\\n    constructor(IGlobalConfig globalConfig_) MatcherState(globalConfig_) {}\\n\\n    function register(uint minPriceByEpoch, uint maxCollateral, uint workersCount, CIDV1[] calldata effectors) external {\\n        address owner = msg.sender;\\n        //TODO: require(whitelist[owner], \\\"Only whitelisted can call this function\\\");\\n        require(workersCount > 0, \\\"Workers count should be greater than 0\\\");\\n        require(maxCollateral > 0, \\\"Max collateral should be greater than 0\\\");\\n        require(resourceConfigs[owner].workersCount == 0, \\\"Config already exists\\\");\\n\\n        uint amount = maxCollateral * workersCount;\\n        ResourceConfig memory config = ResourceConfig({\\n            minPriceByEpoch: minPriceByEpoch,\\n            maxCollateral: maxCollateral,\\n            workersCount: workersCount\\n        });\\n\\n        for (uint i = 0; i < effectors.length; i++) {\\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\\n            _effectorsByOwner[owner].effectors[dealEffector] = true;\\n        }\\n\\n        resourceConfigIds.push(bytes32(bytes20(owner)));\\n\\n        resourceConfigs[owner] = config;\\n\\n        globalConfig.fluenceToken().transferFrom(owner, address(this), amount);\\n\\n        emit ComputeProviderRegistered(owner, minPriceByEpoch, maxCollateral, workersCount, effectors);\\n    }\\n\\n    function remove() external {\\n        address owner = msg.sender;\\n        ResourceConfig storage resourceConfig = resourceConfigs[owner];\\n\\n        require(resourceConfig.workersCount != 0, \\\"Config doesn't exist\\\");\\n\\n        uint amount = resourceConfig.maxCollateral * resourceConfig.workersCount;\\n        delete resourceConfigs[owner];\\n        resourceConfigIds.remove(bytes32(bytes20(owner)));\\n\\n        globalConfig.fluenceToken().transfer(owner, amount);\\n    }\\n\\n    function matchWithDeal(ICore deal) external {\\n        require(globalConfig.factory().isDeal(address(deal)), \\\"Deal is not from factory\\\");\\n\\n        IConfigModule config = deal.configModule();\\n        uint requiredCollateral = config.requiredCollateral();\\n        uint pricePerEpoch = config.pricePerEpoch();\\n        uint maxWorkersPerProvider = config.maxWorkersPerProvider();\\n        uint creationBlock = config.creationBlock();\\n        CIDV1 memory appCID = config.appCID();\\n\\n        IWorkersModule workersModule = deal.workersModule();\\n        uint freeWorkerSlots = config.targetWorkers() - workersModule.workersCount();\\n\\n        bytes32 currentId = resourceConfigIds.first();\\n        while (currentId != bytes32(0x00) && freeWorkerSlots > 0) {\\n            address computeProvider = address(bytes20(currentId));\\n\\n            ResourceConfig storage resourceConfig = resourceConfigs[computeProvider];\\n            uint maxCollateral = resourceConfig.maxCollateral;\\n            uint workersCount = resourceConfig.workersCount;\\n\\n            if (\\n                resourceConfig.minPriceByEpoch > pricePerEpoch ||\\n                maxCollateral < requiredCollateral ||\\n                !_isEffectorsMatched(config, computeProvider)\\n            ) {\\n                currentId = resourceConfigIds.next(currentId);\\n                continue;\\n            }\\n\\n            uint joinedWorkers;\\n            if (maxWorkersPerProvider > workersCount) {\\n                joinedWorkers = workersCount;\\n            } else {\\n                joinedWorkers = maxWorkersPerProvider;\\n            }\\n\\n            if (joinedWorkers > freeWorkerSlots) {\\n                joinedWorkers = freeWorkerSlots;\\n            }\\n\\n            uint newWorkersCount = workersCount - joinedWorkers;\\n            if (newWorkersCount == 0) {\\n                delete resourceConfigs[computeProvider];\\n                resourceConfigIds.remove(bytes32(bytes20(computeProvider)));\\n            } else {\\n                workersCount = newWorkersCount;\\n            }\\n\\n            globalConfig.fluenceToken().approve(address(workersModule), requiredCollateral * joinedWorkers);\\n            for (uint j = 0; j < joinedWorkers; j++) {\\n                workersModule.joinViaMatcher(computeProvider);\\n            }\\n\\n            uint refoundByWorker = maxCollateral - requiredCollateral;\\n            if (refoundByWorker > 0) {\\n                globalConfig.fluenceToken().transfer(computeProvider, refoundByWorker * joinedWorkers);\\n            }\\n\\n            freeWorkerSlots -= joinedWorkers;\\n            currentId = resourceConfigIds.next(currentId);\\n\\n            emit Matched(computeProvider, address(deal), joinedWorkers, creationBlock, appCID);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf48ca43b186c4304bf8d719591904583d14bb03d56495b2258d735032ffe91c\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IEpochManager {\\n    function epochDuration() external view returns (uint256);\\n\\n    function currentEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2dce187734fef8462cf222ec53569253aae570020578c7d470545b476ac3e87d\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IFactory {\\n    function isDeal(address addr) external view returns (bool);\\n\\n    function createDeal(\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        CIDV1 calldata appCID_,\\n        CIDV1[] calldata effectors\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8c2c4ac19b466b701a282339069aa2df46c98c70b74d587afbfbf53ed0905a14\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEpochManager.sol\\\";\\nimport \\\"./IMatcher.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IGlobalConfig {\\n    function owner() external view returns (address);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function withdrawTimeout() external view returns (uint);\\n\\n    function epochManager() external view returns (IEpochManager);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0xf5f3740cd208be3ee6019fefb519e46757d546b224f08dacf462250871aafa06\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/interfaces/ICore.sol\\\";\\n\\ninterface IMatcher {\\n    function matchWithDeal(ICore deal) external;\\n}\\n\",\"keccak256\":\"0xe1e0f00c2f2bc64b78f90a39bdfe978bdf9f33ada219c1ff53650fc851301b95\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IParticleVerifyer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport { Particle, PATId } from \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IParticleVerifyer {\\n    function verifyParticle(Particle calldata particle) external returns (PATId[] memory);\\n}\\n\",\"keccak256\":\"0x412b05804fad54d070e405c6992e463cccf486a12858f4332659a5e3fc69055b\",\"license\":\"Apache-2.0\"},\"contracts/utils/LinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nlibrary LinkedList {\\n    struct Element {\\n        bytes32 prev;\\n        bytes32 next;\\n    }\\n\\n    struct Bytes32List {\\n        bytes32 _first;\\n        bytes32 _last;\\n        mapping(bytes32 => Element) _elements;\\n    }\\n\\n    function _init(Bytes32List storage self, bytes32 key) private {\\n        self._first = key;\\n        self._last = key;\\n    }\\n\\n    function push(Bytes32List storage self, bytes32 key) internal {\\n        bytes32 oldLast = self._last;\\n\\n        require(key != bytes32(0x00), \\\"Key cannot be ZERO\\\");\\n\\n        require(!exist(self, key), \\\"Key already exists\\\");\\n\\n        if (oldLast == 0) {\\n            _init(self, key);\\n            return;\\n        }\\n\\n        self._last = key;\\n        self._elements[key].prev = oldLast;\\n        self._elements[oldLast].next = key;\\n    }\\n\\n    function first(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._first;\\n    }\\n\\n    function last(Bytes32List storage self) internal view returns (bytes32) {\\n        return self._last;\\n    }\\n\\n    function remove(Bytes32List storage self, bytes32 key) internal {\\n        Element memory element = self._elements[key];\\n\\n        require(_exist(self, element, key), \\\"Key does not exist\\\");\\n\\n        delete self._elements[key];\\n\\n        if (element.prev != bytes32(0x00)) {\\n            self._elements[element.prev].next = element.next;\\n        } else {\\n            self._first = element.next;\\n        }\\n\\n        if (element.next != bytes32(0x00)) {\\n            self._elements[element.next].prev = element.prev;\\n        } else {\\n            self._last = element.prev;\\n        }\\n    }\\n\\n    function exist(Bytes32List storage self, bytes32 key) internal view returns (bool) {\\n        return _exist(self, self._elements[key], key);\\n    }\\n\\n    function _exist(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\\n    }\\n\\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].next;\\n    }\\n\\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\\n        return self._elements[key].prev;\\n    }\\n}\\n\",\"keccak256\":\"0xa1daa42378d580a0e5d1060181fbd984ba29e7b7d502b05a980ce09b8bfc5b8b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c0346100bd57601f61274738819003918201601f19168301916001600160401b038311848410176100c2578084926020946040528339810103126100bd57516001600160a01b03811681036100bd576080523060a05260405161266e90816100d9823960805181818161010c0152818161053d015281816106f701528181610d5d01528181610e9001528181610f6d0152818161125e015281816115e10152611919015260a051818181611090015281816111d401526115580152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081632071dce8146117c3575080633659cfe6146115255780634f1ef2861461114a57806352d1902d146110685780638ae867501461100a5780638d14e12714610f005780639b19251a14610eb4578063a7c1abe014610e63578063a7f4377914610c95578063b5ebe33d14610c705763c6c44ed11461009857600080fd5b346109095760206003193601126109095760043573ffffffffffffffffffffffffffffffffffffffff81168103610909576040517fc45a015500000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f857600091610c20575b50602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f4db44e640000000000000000000000000000000000000000000000000000000083528188166004840152165afa9081156107f857600091610c01575b5015610bbd57604051907f68f1e99a00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff85165afa9182156107f857600092610b6c575b50604051907fb53105a300000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff831692602083600481875afa9283156107f857600093610b38575b50604051907f5fc8f59c000000000000000000000000000000000000000000000000000000008252602082600481885afa9182156107f857600092610b04575b50604051947f8a0c725b000000000000000000000000000000000000000000000000000000008652602086600481845afa9586156107f857600096610ad0575b50604051927f17634514000000000000000000000000000000000000000000000000000000008452602084600481855afa9384156107f857600094610a9c575b50604051957f9bc66868000000000000000000000000000000000000000000000000000000008752604087600481865afa9687156107f857600097610a5c575b50604051927f2ed52a7700000000000000000000000000000000000000000000000000000000845260208460048173ffffffffffffffffffffffffffffffffffffffff8b165afa9384156107f857600094610a0a575b506020600491604051928380927f2943dcab0000000000000000000000000000000000000000000000000000000082525afa9081156107f8576000916109d8575b50604051907fbe18cf7f00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff89165afa9081156107f8576000916109a2575b6104499250949394612200565b92600054925b83151580610999575b15610997578360601c8060005260036020526040600020956001870154846002890154985411801561098e575b801561097d575b61096057878d111561095957875b82891161094f575b886104ac91612200565b61094a57826000526003602052600060026040822082815582600182015501556104fa7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16612527565b6040517fac027f9700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f8576105de9160209160009161092d575b506105808b8a6120e8565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201929092529384929183916000919083906044820190565b0393165af180156107f85761090e575b50878660005b82811061083557506106069192612200565b91826106b2575b6106179250612200565b9460005260026020527f8a2ecab128faa476aff507c7f34da3348b5c56e4a0401825f6919b4cc7b249f160a0600160406000200154976040519073ffffffffffffffffffffffffffffffffffffffff8d16825260208201528a60408201527fffffffff000000000000000000000000000000000000000000000000000000008d5116606082015260208d01516080820152a25b93929361044f565b90506040517fac027f9700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f85773ffffffffffffffffffffffffffffffffffffffff936020928b6107ac93600092610804575b5061075191926120e8565b60006040519687809581947fa9059cbb0000000000000000000000000000000000000000000000000000000083528b600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af19081156107f8576106179289926107c9575b5061060d565b6107ea9060203d6020116107f1575b6107e28183611d2e565b810190612196565b50386107c3565b503d6107d8565b6040513d6000823e3d90fd5b610751925061082890863d881161082e575b6108208183611d2e565b81019061204b565b91610746565b503d610816565b91505073ffffffffffffffffffffffffffffffffffffffff85163b1561090957604051907fe5e63b310000000000000000000000000000000000000000000000000000000082528460048301526000826024818373ffffffffffffffffffffffffffffffffffffffff8b165af180156107f8576108bf575b6108b7915061212a565b8689916105f4565b67ffffffffffffffff82116108da576108b7916040526108ad565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6109269060203d6020116107f1576107e28183611d2e565b50386105ee565b6109449150823d841161082e576108208183611d2e565b38610575565b6104fa565b91975087916104a2565b8c9761049a565b5094919550506000526002602052600160406000200154936106aa565b50610988838a612221565b1561048c565b50858110610485565b005b50841515610458565b90506020823d6020116109d0575b816109bd60209383611d2e565b810103126109095761044991519061043c565b3d91506109b0565b90506020813d602011610a02575b816109f360209383611d2e565b810103126109095751386103e6565b3d91506109e6565b9093506020813d602011610a54575b81610a2660209383611d2e565b81010312610909575173ffffffffffffffffffffffffffffffffffffffff81168103610909579260206103a5565b3d9150610a19565b9096506040903d604011610a94575b610a758282611d2e565b604081838101031261090957610a8d918101906121ae565b953861034f565b3d9150610a6b565b9093506020813d602011610ac8575b81610ab860209383611d2e565b810103126109095751923861030f565b3d9150610aab565b9095506020813d602011610afc575b81610aec60209383611d2e565b81010312610909575194386102cf565b3d9150610adf565b9091506020813d602011610b30575b81610b2060209383611d2e565b810103126109095751903861028f565b3d9150610b13565b9092506020813d602011610b64575b81610b5460209383611d2e565b810103126109095751913861024f565b3d9150610b47565b9091506020813d602011610bb5575b81610b8860209383611d2e565b81010312610909575173ffffffffffffffffffffffffffffffffffffffff811681036109095790386101f7565b3d9150610b7b565b606460405162461bcd60e51b815260206004820152601860248201527f4465616c206973206e6f742066726f6d20666163746f727900000000000000006044820152fd5b610c1a915060203d6020116107f1576107e28183611d2e565b3861019c565b90506020813d602011610c68575b81610c3b60209383611d2e565b81010312610909575173ffffffffffffffffffffffffffffffffffffffff8116810361090957602061013d565b3d9150610c2e565b3461090957600060031936011261090957604060005460015482519182526020820152f35b34610909576000600319360112610909573360005260206003815260406000206002810154908115610e1f57906001610ccf9201546120e8565b336000526003825260006002604082208281558260018201550155610d187fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16612527565b604051907fac027f9700000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff918381600481867f0000000000000000000000000000000000000000000000000000000000000000165afa80156107f8578492610dd992600092610e00575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810191909152938492839160009183906044820190565b0393165af180156107f857610dea57005b8161099792903d106107f1576107e28183611d2e565b610e18919250843d861161082e576108208183611d2e565b9086610d93565b6064836040519062461bcd60e51b82526004820152601460248201527f436f6e66696720646f65736e27742065786973740000000000000000000000006044820152fd5b3461090957600060031936011261090957602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346109095760206003193601126109095773ffffffffffffffffffffffffffffffffffffffff610ee2611cd3565b166000526004602052602060ff604060002054166040519015158152f35b3461090957604060031936011261090957610f19611cd3565b6024359081151580920361090957604051907f8da5cb5b00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff91602081600481867f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f857610fad918491600091610fec575b50163314612077565b16600052600460205260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055600080f35b611004915060203d811161082e576108208183611d2e565b86610fa4565b346109095760206003193601126109095773ffffffffffffffffffffffffffffffffffffffff611038611cd3565b16600052600360205260606040600020805490600260018201549101549060405192835260208301526040820152f35b346109095760006003193601126109095773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036110e05760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60406003193601126109095761115e611cd3565b6024359067ffffffffffffffff8211610909573660238301121561090957816004013561118a81611d6f565b6111976040519182611d2e565b8181526020918282019436602483830101116109095781600092602486930188378301015273ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169061120182301415611da9565b6112307f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614611e1a565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f85761129d9183916000916115085750163314612077565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112d557505050506109979150611e8b565b8492939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa600091816114d9575b50611381576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9493940361146f5761139282611e8b565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2825115801590611467575b6113c857005b60008061099795604051956113dc87611d12565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c868801527f206661696c65640000000000000000000000000000000000000000000000000060408801525190845af4903d1561145e573d61144181611d6f565b9061144f6040519283611d2e565b8152600081943d92013e611f5d565b60609250611f5d565b5060016113c2565b6084836040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d8311611501575b6114f18183611d2e565b8101031261090957519088611312565b503d6114e7565b61151f9150873d891161082e576108208183611d2e565b89610fa4565b34610909576020806003193601126109095761153f611cd3565b73ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001661158481301415611da9565b6115b37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918583541614611e1a565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528281600481887f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f8576116209186916000916117a65750163314612077565b604051908282019482861067ffffffffffffffff8711176108da57856040526000835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461167d57505050506109979150611e8b565b8492939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa60009181611777575b50611729576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9493940361146f5761173a82611e8b565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a282511580159061176f576113c857005b5060006113c2565b9091508681813d831161179f575b61178f8183611d2e565b81010312610909575190886116ba565b503d611785565b6117bd9150853d871161082e576108208183611d2e565b87610fa4565b346109095760806003193601126109095760643590602480359167ffffffffffffffff916044359060043584871161090957366023880112156109095786600401359385851161090957828801978336918760061b010111610909578315611c6c57508515611c02573360005260209260038452600260406000200154611bbf5761184e81886120e8565b604051966060880190811188821017611b915760405282875284870196888852604081019783895260005b888c818310611a91575050506002906118b67fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16612435565b336000526003885260406000209251835551986001998a84015551910155604051907fac027f9700000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff948683600481897f0000000000000000000000000000000000000000000000000000000000000000165afa9586156107f8578793600097611a6a575b5090600060649260405198899586947f23b872dd00000000000000000000000000000000000000000000000000000000865233600487015230908601526044850152165af19283156107f8578593611a4d575b50604095949395519660a0880192338952878901526040880152606087015260a060808701525260c08401949260005b8281106119fe577fb1399aee0736b9c3a9b2afcb0b17b60726080132659ea48cc0d1c157cf534bf886880387a1005b90919293958635907fffffffff000000000000000000000000000000000000000000000000000000008216809203610909579081528683013583820152604090810196019392919083016119cf565b611a6390853d87116107f1576107e28183611d2e565b508861199f565b606492919750611a88600091863d881161082e576108208183611d2e565b9791925061194c565b611a9c918391612157565b35907fffffffff000000000000000000000000000000000000000000000000000000008216820361090957611b8c9189611ad88f8d8591612157565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909316838d01908152910135600482015290611b4381602484015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611d2e565b5190203360005260058a526040600020906000528952604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905561212a565b611879565b847f4e487b710000000000000000000000000000000000000000000000000000000060005260416004526000fd5b6064846015856040519262461bcd60e51b845260048401528201527f436f6e66696720616c72656164792065786973747300000000000000000000006044820152fd5b60848260276040519162461bcd60e51b8352602060048401528201527f4d617820636f6c6c61746572616c2073686f756c64206265206772656174657260448201527f207468616e2030000000000000000000000000000000000000000000000000006064820152fd5b8060268462461bcd60e51b60849452602060048401528201527f576f726b65727320636f756e742073686f756c6420626520677265617465722060448201527f7468616e203000000000000000000000000000000000000000000000000000006064820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361090957565b6040810190811067ffffffffffffffff8211176108da57604052565b6060810190811067ffffffffffffffff8211176108da57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108da57604052565b67ffffffffffffffff81116108da57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b15611db057565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15611e2157565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611ef35773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b91929015611fbe5750815115611f71575090565b3b15611f7a5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015611fd15750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110612034575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611ff3565b90816020910312610909575173ffffffffffffffffffffffffffffffffffffffff811681036109095790565b1561207e57565b608460405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152fd5b818102929181159184041417156120fb57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146120fb5760010190565b91908110156121675760061b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90816020910312610909575180151581036109095790565b9190826040910312610909576040516121c681611cf6565b809280517fffffffff0000000000000000000000000000000000000000000000000000000081168103610909578252602090810151910152565b919082039182116120fb57565b80518210156121675760209160051b010190565b906040918251927ffc1e5e2a000000000000000000000000000000000000000000000000000000008452600092838560048173ffffffffffffffffffffffffffffffffffffffff8097165afa94851561242b57849561234a575b50835b855181101561233f577fffffffff000000000000000000000000000000000000000000000000000000006122b2828861220d565b515116602090611b17612308836122c9868c61220d565b5101518751928391868301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b519020908584168752600581528487209187525260ff838620541615612336576123319061212a565b61227e565b50505050905090565b505050505050600190565b9094503d8085833e61235c8183611d2e565b8101906020808284031261242757815167ffffffffffffffff9283821161242357019183601f8401121561241f5782519081116123f2578451936123a5838360051b0186611d2e565b818552828086019260061b850101938185116123ee5783879101925b8584106123d557505050505050933861227b565b84906123e184866121ae565b81520192019186906123c1565b8880fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8680fd5b8780fd5b8580fd5b82513d86823e3d90fd5b60015481156124e3576000828152600260205261246f836040832060016040519161245f83611cf6565b80548352015460208201526125f6565b61249f5782821561249757906001926040928455848252600260205280838320558152200155565b915055600155565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b6000818152600260205260409081812092600183519461254686611cf6565b805486520154906020850191825261255e81866125f6565b156125b35782526002602052828220828155600101829055835180156125a9578151908352600184842001555b519283156125a0575192815260026020522055565b51600155505050565b508051825561258b565b6064845162461bcd60e51b815260206004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b908151159182159261262a575b50811561261e575b8115612615575090565b90506001541490565b6000548114915061260b565b60200151151591503861260356fea2646970667358221220908d41cc2fd659ea074ff5da81d9379d903d804603aac0d54147d2123506ebc664736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081632071dce8146117c3575080633659cfe6146115255780634f1ef2861461114a57806352d1902d146110685780638ae867501461100a5780638d14e12714610f005780639b19251a14610eb4578063a7c1abe014610e63578063a7f4377914610c95578063b5ebe33d14610c705763c6c44ed11461009857600080fd5b346109095760206003193601126109095760043573ffffffffffffffffffffffffffffffffffffffff81168103610909576040517fc45a015500000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f857600091610c20575b50602073ffffffffffffffffffffffffffffffffffffffff916024604051809481937f4db44e640000000000000000000000000000000000000000000000000000000083528188166004840152165afa9081156107f857600091610c01575b5015610bbd57604051907f68f1e99a00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff85165afa9182156107f857600092610b6c575b50604051907fb53105a300000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff831692602083600481875afa9283156107f857600093610b38575b50604051907f5fc8f59c000000000000000000000000000000000000000000000000000000008252602082600481885afa9182156107f857600092610b04575b50604051947f8a0c725b000000000000000000000000000000000000000000000000000000008652602086600481845afa9586156107f857600096610ad0575b50604051927f17634514000000000000000000000000000000000000000000000000000000008452602084600481855afa9384156107f857600094610a9c575b50604051957f9bc66868000000000000000000000000000000000000000000000000000000008752604087600481865afa9687156107f857600097610a5c575b50604051927f2ed52a7700000000000000000000000000000000000000000000000000000000845260208460048173ffffffffffffffffffffffffffffffffffffffff8b165afa9384156107f857600094610a0a575b506020600491604051928380927f2943dcab0000000000000000000000000000000000000000000000000000000082525afa9081156107f8576000916109d8575b50604051907fbe18cf7f00000000000000000000000000000000000000000000000000000000825260208260048173ffffffffffffffffffffffffffffffffffffffff89165afa9081156107f8576000916109a2575b6104499250949394612200565b92600054925b83151580610999575b15610997578360601c8060005260036020526040600020956001870154846002890154985411801561098e575b801561097d575b61096057878d111561095957875b82891161094f575b886104ac91612200565b61094a57826000526003602052600060026040822082815582600182015501556104fa7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16612527565b6040517fac027f9700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f8576105de9160209160009161092d575b506105808b8a6120e8565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015260248201929092529384929183916000919083906044820190565b0393165af180156107f85761090e575b50878660005b82811061083557506106069192612200565b91826106b2575b6106179250612200565b9460005260026020527f8a2ecab128faa476aff507c7f34da3348b5c56e4a0401825f6919b4cc7b249f160a0600160406000200154976040519073ffffffffffffffffffffffffffffffffffffffff8d16825260208201528a60408201527fffffffff000000000000000000000000000000000000000000000000000000008d5116606082015260208d01516080820152a25b93929361044f565b90506040517fac027f9700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f85773ffffffffffffffffffffffffffffffffffffffff936020928b6107ac93600092610804575b5061075191926120e8565b60006040519687809581947fa9059cbb0000000000000000000000000000000000000000000000000000000083528b600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0393165af19081156107f8576106179289926107c9575b5061060d565b6107ea9060203d6020116107f1575b6107e28183611d2e565b810190612196565b50386107c3565b503d6107d8565b6040513d6000823e3d90fd5b610751925061082890863d881161082e575b6108208183611d2e565b81019061204b565b91610746565b503d610816565b91505073ffffffffffffffffffffffffffffffffffffffff85163b1561090957604051907fe5e63b310000000000000000000000000000000000000000000000000000000082528460048301526000826024818373ffffffffffffffffffffffffffffffffffffffff8b165af180156107f8576108bf575b6108b7915061212a565b8689916105f4565b67ffffffffffffffff82116108da576108b7916040526108ad565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6109269060203d6020116107f1576107e28183611d2e565b50386105ee565b6109449150823d841161082e576108208183611d2e565b38610575565b6104fa565b91975087916104a2565b8c9761049a565b5094919550506000526002602052600160406000200154936106aa565b50610988838a612221565b1561048c565b50858110610485565b005b50841515610458565b90506020823d6020116109d0575b816109bd60209383611d2e565b810103126109095761044991519061043c565b3d91506109b0565b90506020813d602011610a02575b816109f360209383611d2e565b810103126109095751386103e6565b3d91506109e6565b9093506020813d602011610a54575b81610a2660209383611d2e565b81010312610909575173ffffffffffffffffffffffffffffffffffffffff81168103610909579260206103a5565b3d9150610a19565b9096506040903d604011610a94575b610a758282611d2e565b604081838101031261090957610a8d918101906121ae565b953861034f565b3d9150610a6b565b9093506020813d602011610ac8575b81610ab860209383611d2e565b810103126109095751923861030f565b3d9150610aab565b9095506020813d602011610afc575b81610aec60209383611d2e565b81010312610909575194386102cf565b3d9150610adf565b9091506020813d602011610b30575b81610b2060209383611d2e565b810103126109095751903861028f565b3d9150610b13565b9092506020813d602011610b64575b81610b5460209383611d2e565b810103126109095751913861024f565b3d9150610b47565b9091506020813d602011610bb5575b81610b8860209383611d2e565b81010312610909575173ffffffffffffffffffffffffffffffffffffffff811681036109095790386101f7565b3d9150610b7b565b606460405162461bcd60e51b815260206004820152601860248201527f4465616c206973206e6f742066726f6d20666163746f727900000000000000006044820152fd5b610c1a915060203d6020116107f1576107e28183611d2e565b3861019c565b90506020813d602011610c68575b81610c3b60209383611d2e565b81010312610909575173ffffffffffffffffffffffffffffffffffffffff8116810361090957602061013d565b3d9150610c2e565b3461090957600060031936011261090957604060005460015482519182526020820152f35b34610909576000600319360112610909573360005260206003815260406000206002810154908115610e1f57906001610ccf9201546120e8565b336000526003825260006002604082208281558260018201550155610d187fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16612527565b604051907fac027f9700000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff918381600481867f0000000000000000000000000000000000000000000000000000000000000000165afa80156107f8578492610dd992600092610e00575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810191909152938492839160009183906044820190565b0393165af180156107f857610dea57005b8161099792903d106107f1576107e28183611d2e565b610e18919250843d861161082e576108208183611d2e565b9086610d93565b6064836040519062461bcd60e51b82526004820152601460248201527f436f6e66696720646f65736e27742065786973740000000000000000000000006044820152fd5b3461090957600060031936011261090957602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346109095760206003193601126109095773ffffffffffffffffffffffffffffffffffffffff610ee2611cd3565b166000526004602052602060ff604060002054166040519015158152f35b3461090957604060031936011261090957610f19611cd3565b6024359081151580920361090957604051907f8da5cb5b00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff91602081600481867f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f857610fad918491600091610fec575b50163314612077565b16600052600460205260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055600080f35b611004915060203d811161082e576108208183611d2e565b86610fa4565b346109095760206003193601126109095773ffffffffffffffffffffffffffffffffffffffff611038611cd3565b16600052600360205260606040600020805490600260018201549101549060405192835260208301526040820152f35b346109095760006003193601126109095773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036110e05760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b608460405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b60406003193601126109095761115e611cd3565b6024359067ffffffffffffffff8211610909573660238301121561090957816004013561118a81611d6f565b6111976040519182611d2e565b8181526020918282019436602483830101116109095781600092602486930188378301015273ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169061120182301415611da9565b6112307f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc928284541614611e1a565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528481600481857f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f85761129d9183916000916115085750163314612077565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112d557505050506109979150611e8b565b8492939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa600091816114d9575b50611381576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9493940361146f5761139282611e8b565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2825115801590611467575b6113c857005b60008061099795604051956113dc87611d12565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c868801527f206661696c65640000000000000000000000000000000000000000000000000060408801525190845af4903d1561145e573d61144181611d6f565b9061144f6040519283611d2e565b8152600081943d92013e611f5d565b60609250611f5d565b5060016113c2565b6084836040519062461bcd60e51b82526004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508681813d8311611501575b6114f18183611d2e565b8101031261090957519088611312565b503d6114e7565b61151f9150873d891161082e576108208183611d2e565b89610fa4565b34610909576020806003193601126109095761153f611cd3565b73ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001661158481301415611da9565b6115b37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918583541614611e1a565b6040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081528281600481887f0000000000000000000000000000000000000000000000000000000000000000165afa9081156107f8576116209186916000916117a65750163314612077565b604051908282019482861067ffffffffffffffff8711176108da57856040526000835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143541660001461167d57505050506109979150611e8b565b8492939416906040517f52d1902d0000000000000000000000000000000000000000000000000000000081528581600481865afa60009181611777575b50611729576084866040519062461bcd60e51b82526004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9493940361146f5761173a82611e8b565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a282511580159061176f576113c857005b5060006113c2565b9091508681813d831161179f575b61178f8183611d2e565b81010312610909575190886116ba565b503d611785565b6117bd9150853d871161082e576108208183611d2e565b87610fa4565b346109095760806003193601126109095760643590602480359167ffffffffffffffff916044359060043584871161090957366023880112156109095786600401359385851161090957828801978336918760061b010111610909578315611c6c57508515611c02573360005260209260038452600260406000200154611bbf5761184e81886120e8565b604051966060880190811188821017611b915760405282875284870196888852604081019783895260005b888c818310611a91575050506002906118b67fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16612435565b336000526003885260406000209251835551986001998a84015551910155604051907fac027f9700000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff948683600481897f0000000000000000000000000000000000000000000000000000000000000000165afa9586156107f8578793600097611a6a575b5090600060649260405198899586947f23b872dd00000000000000000000000000000000000000000000000000000000865233600487015230908601526044850152165af19283156107f8578593611a4d575b50604095949395519660a0880192338952878901526040880152606087015260a060808701525260c08401949260005b8281106119fe577fb1399aee0736b9c3a9b2afcb0b17b60726080132659ea48cc0d1c157cf534bf886880387a1005b90919293958635907fffffffff000000000000000000000000000000000000000000000000000000008216809203610909579081528683013583820152604090810196019392919083016119cf565b611a6390853d87116107f1576107e28183611d2e565b508861199f565b606492919750611a88600091863d881161082e576108208183611d2e565b9791925061194c565b611a9c918391612157565b35907fffffffff000000000000000000000000000000000000000000000000000000008216820361090957611b8c9189611ad88f8d8591612157565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909316838d01908152910135600482015290611b4381602484015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611d2e565b5190203360005260058a526040600020906000528952604060002060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905561212a565b611879565b847f4e487b710000000000000000000000000000000000000000000000000000000060005260416004526000fd5b6064846015856040519262461bcd60e51b845260048401528201527f436f6e66696720616c72656164792065786973747300000000000000000000006044820152fd5b60848260276040519162461bcd60e51b8352602060048401528201527f4d617820636f6c6c61746572616c2073686f756c64206265206772656174657260448201527f207468616e2030000000000000000000000000000000000000000000000000006064820152fd5b8060268462461bcd60e51b60849452602060048401528201527f576f726b65727320636f756e742073686f756c6420626520677265617465722060448201527f7468616e203000000000000000000000000000000000000000000000000000006064820152fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361090957565b6040810190811067ffffffffffffffff8211176108da57604052565b6060810190811067ffffffffffffffff8211176108da57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108da57604052565b67ffffffffffffffff81116108da57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b15611db057565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b15611e2157565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611ef35773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b91929015611fbe5750815115611f71575090565b3b15611f7a5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015611fd15750805190602001fd5b6040519062461bcd60e51b825281602080600483015282519283602484015260005b848110612034575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611ff3565b90816020910312610909575173ffffffffffffffffffffffffffffffffffffffff811681036109095790565b1561207e57565b608460405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60448201527f6e000000000000000000000000000000000000000000000000000000000000006064820152fd5b818102929181159184041417156120fb57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146120fb5760010190565b91908110156121675760061b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90816020910312610909575180151581036109095790565b9190826040910312610909576040516121c681611cf6565b809280517fffffffff0000000000000000000000000000000000000000000000000000000081168103610909578252602090810151910152565b919082039182116120fb57565b80518210156121675760209160051b010190565b906040918251927ffc1e5e2a000000000000000000000000000000000000000000000000000000008452600092838560048173ffffffffffffffffffffffffffffffffffffffff8097165afa94851561242b57849561234a575b50835b855181101561233f577fffffffff000000000000000000000000000000000000000000000000000000006122b2828861220d565b515116602090611b17612308836122c9868c61220d565b5101518751928391868301958690917fffffffff0000000000000000000000000000000000000000000000000000000060249316825260048201520190565b519020908584168752600581528487209187525260ff838620541615612336576123319061212a565b61227e565b50505050905090565b505050505050600190565b9094503d8085833e61235c8183611d2e565b8101906020808284031261242757815167ffffffffffffffff9283821161242357019183601f8401121561241f5782519081116123f2578451936123a5838360051b0186611d2e565b818552828086019260061b850101938185116123ee5783879101925b8584106123d557505050505050933861227b565b84906123e184866121ae565b81520192019186906123c1565b8880fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b8680fd5b8780fd5b8580fd5b82513d86823e3d90fd5b60015481156124e3576000828152600260205261246f836040832060016040519161245f83611cf6565b80548352015460208201526125f6565b61249f5782821561249757906001926040928455848252600260205280838320558152200155565b915055600155565b606460405162461bcd60e51b815260206004820152601260248201527f4b657920616c72656164792065786973747300000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601260248201527f4b65792063616e6e6f74206265205a45524f00000000000000000000000000006044820152fd5b6000818152600260205260409081812092600183519461254686611cf6565b805486520154906020850191825261255e81866125f6565b156125b35782526002602052828220828155600101829055835180156125a9578151908352600184842001555b519283156125a0575192815260026020522055565b51600155505050565b508051825561258b565b6064845162461bcd60e51b815260206004820152601260248201527f4b657920646f6573206e6f7420657869737400000000000000000000000000006044820152fd5b908151159182159261262a575b50811561261e575b8115612615575090565b90506001541490565b6000548114915061260b565b60200151151591503861260356fea2646970667358221220908d41cc2fd659ea074ff5da81d9379d903d804603aac0d54147d2123506ebc664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8903,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "resourceConfigIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Bytes32List)9763_storage"
      },
      {
        "astId": 8908,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "resourceConfigs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ResourceConfig)8892_storage)"
      },
      {
        "astId": 8912,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "whitelist",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8917,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_effectorsByOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Effectors)8897_storage)"
      },
      {
        "astId": 503,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_initialized",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 506,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "_initializing",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 485,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/global/Matcher.sol:Matcher",
        "label": "__gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Effectors)8897_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MatcherState.Effectors)",
        "numberOfBytes": "32",
        "value": "t_struct(Effectors)8897_storage"
      },
      "t_mapping(t_address,t_struct(ResourceConfig)8892_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MatcherState.ResourceConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ResourceConfig)8892_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Element)9753_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LinkedList.Element)",
        "numberOfBytes": "32",
        "value": "t_struct(Element)9753_storage"
      },
      "t_struct(Bytes32List)9763_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Bytes32List",
        "members": [
          {
            "astId": 9755,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "_first",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9757,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "_last",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9762,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "_elements",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(Element)9753_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Effectors)8897_storage": {
        "encoding": "inplace",
        "label": "struct MatcherState.Effectors",
        "members": [
          {
            "astId": 8896,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "effectors",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Element)9753_storage": {
        "encoding": "inplace",
        "label": "struct LinkedList.Element",
        "members": [
          {
            "astId": 9750,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "prev",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 9752,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "next",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ResourceConfig)8892_storage": {
        "encoding": "inplace",
        "label": "struct MatcherState.ResourceConfig",
        "members": [
          {
            "astId": 8887,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "minPriceByEpoch",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8889,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "maxCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8891,
            "contract": "contracts/global/Matcher.sol:Matcher",
            "label": "workersCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}