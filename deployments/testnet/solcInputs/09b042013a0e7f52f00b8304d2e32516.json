{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "contracts/auroraSDK/AuroraSdk.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nimport \"./Borsh.sol\";\nimport \"./Codec.sol\";\nimport \"./Types.sol\";\nimport \"./Utils.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// Address of Cross Contract Call precompile in Aurora.\n// It allows scheduling new promises to NEAR contracts.\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\n// Address of predecessor account id precompile in Aurora.\n// It allows getting the predecessor account id of the current call.\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\n// Address of predecessor account id precompile in Aurora.\n// It allows getting the current account id of the current call.\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\n// Addresss of promise result precompile in Aurora.\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\n// Address of wNEAR ERC20 on mainnet\naddress constant wNEAR_MAINNET = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\n\nstruct NEAR {\n    /// Wether the represenative NEAR account id for this contract\n    /// has already been created or not. This is required since the\n    /// first cross contract call requires attaching extra deposit\n    /// to cover storage staking balance.\n    bool initialized;\n    /// Address of wNEAR token contract. It is used to charge the user\n    /// required tokens for paying NEAR storage fees and attached balance\n    /// for cross contract calls.\n    IERC20 wNEAR;\n}\n\nlibrary AuroraSdk {\n    using Codec for bytes;\n    using Codec for PromiseCreateArgs;\n    using Codec for PromiseWithCallback;\n    using Codec for Borsh.Data;\n    using Borsh for Borsh.Data;\n\n    /// Create an instance of NEAR object. Requires the address at which\n    /// wNEAR ERC20 token contract is deployed.\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\n        NEAR memory near = NEAR(false, wNEAR);\n        near.wNEAR.approve(XCC_PRECOMPILE, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        return near;\n    }\n\n    /// Default configuration for mainnet.\n    function mainnet() public returns (NEAR memory) {\n        return initNear(IERC20(wNEAR_MAINNET));\n    }\n\n    /// Compute NEAR represtentative account for the given Aurora address.\n    /// This is the NEAR account created by the cross contract call precompile.\n    function nearRepresentative(address account) public returns (string memory) {\n        return addressSubAccount(account, currentAccountId());\n    }\n\n    /// Prepends the given account ID with the given address (hex-encoded).\n    function addressSubAccount(address account, string memory accountId) public pure returns (string memory) {\n        return string(abi.encodePacked(Utils.bytesToHex(abi.encodePacked((bytes20(account)))), \".\", accountId));\n    }\n\n    /// Compute implicity Aurora Address for the given NEAR account.\n    function implicitAuroraAddress(string memory accountId) public pure returns (address) {\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\n    }\n\n    /// Compute the implicit Aurora address of the represenative NEAR account\n    /// for the given Aurora address. Useful when a contract wants to call\n    /// itself via a callback using cross contract call precompile.\n    function nearRepresentitiveImplicitAddress(address account) public returns (address) {\n        return implicitAuroraAddress(nearRepresentative(account));\n    }\n\n    /// Get the promise result at the specified index.\n    function promiseResult(uint256 index) public returns (PromiseResult memory result) {\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE.call(\"\");\n        require(success);\n\n        Borsh.Data memory borsh = Borsh.from(returnData);\n\n        uint32 length = borsh.decodeU32();\n        require(index < length, \"Index out of bounds\");\n\n        for (uint256 i = 0; i < index; i++) {\n            PromiseResultStatus status = PromiseResultStatus(uint8(borsh.decodeU8()));\n            if (status == PromiseResultStatus.Successful) {\n                borsh.skipBytes();\n            }\n        }\n\n        result.status = PromiseResultStatus(borsh.decodeU8());\n        if (result.status == PromiseResultStatus.Successful) {\n            result.output = borsh.decodeBytes();\n        }\n    }\n\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\n    function currentAccountId() public returns (string memory) {\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE.call(\"\");\n        require(success);\n        return string(returnData);\n    }\n\n    /// Get the NEAR account id of the predecessor contract.\n    function predecessorAccountId() public returns (string memory) {\n        (bool success, bytes memory returnData) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\"\");\n        require(success);\n        return string(returnData);\n    }\n\n    /// Crease a base promise. This is not immediately schedule for execution\n    /// until transact is called. It can be combined with other promises using\n    /// `then` combinator.\n    ///\n    /// Input is not checekd during promise creation. If it is invalid, the\n    /// transaction will be scheduled either way, but it will fail during execution.\n    function call(\n        NEAR storage near,\n        string memory targetAccountId,\n        string memory method,\n        bytes memory args,\n        uint128 nearBalance,\n        uint64 nearGas\n    ) public returns (PromiseCreateArgs memory) {\n        /// Need to capture nearBalance before we modify it so that we don't\n        /// double-charge the user for their initialization cost.\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(targetAccountId, method, args, nearBalance, nearGas);\n\n        if (!near.initialized) {\n            /// If the contract needs to be initialized, we need to attach\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\n            nearBalance += 2_000_000_000_000_000_000_000_000;\n            near.initialized = true;\n        }\n\n        if (nearBalance > 0) {\n            near.wNEAR.transferFrom(msg.sender, address(this), uint256(nearBalance));\n        }\n\n        return promise_args;\n    }\n\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\n    /// to a controct inside `Aurora`.\n    function auroraCall(\n        NEAR storage near,\n        address target,\n        bytes memory args,\n        uint128 nearBalance,\n        uint64 nearGas\n    ) public returns (PromiseCreateArgs memory) {\n        return call(near, currentAccountId(), \"call\", abi.encodePacked(uint8(0), target, uint256(0), args.encode()), nearBalance, nearGas);\n    }\n\n    /// Schedule a base promise to be executed on NEAR. After this function is called\n    /// the promise should not be used anymore.\n    function transact(PromiseCreateArgs memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\n    /// the promise should not be used anymore.\n    ///\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\n    /// https://github.com/ethereum/solidity/issues/869\n    function transact(PromiseWithCallback memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager));\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\n    /// A separate transaction to execute the scheduled promise is needed.\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy));\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    /// Create a promise with callback from two given promises.\n    function then(PromiseCreateArgs memory base, PromiseCreateArgs memory callback) public pure returns (PromiseWithCallback memory) {\n        return PromiseWithCallback(base, callback);\n    }\n}\n"
    },
    "contracts/auroraSDK/Borsh.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nimport \"./Utils.sol\";\n\nlibrary Borsh {\n    using Borsh for Data;\n\n    struct Data {\n        uint256 ptr;\n        uint256 end;\n    }\n\n    function from(bytes memory data) internal pure returns (Data memory res) {\n        uint256 ptr;\n        assembly {\n            ptr := data\n        }\n\n        unchecked {\n            res.ptr = ptr + 32;\n            res.end = res.ptr + Utils.readMemory(ptr);\n        }\n    }\n\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\n    function requireSpace(Data memory data, uint256 length) internal pure {\n        unchecked {\n            require(data.ptr + length <= data.end, \"Parse error: unexpected EOI\");\n        }\n    }\n\n    function read(Data memory data, uint256 length) internal pure returns (bytes32 res) {\n        data.requireSpace(length);\n        res = bytes32(Utils.readMemory(data.ptr));\n        unchecked {\n            data.ptr += length;\n        }\n        return res;\n    }\n\n    function done(Data memory data) internal pure {\n        require(data.ptr == data.end, \"Parse error: EOI expected\");\n    }\n\n    // Same considerations as for requireSpace.\n    function peekKeccak256(Data memory data, uint256 length) internal pure returns (bytes32) {\n        data.requireSpace(length);\n        return Utils.keccak256Raw(data.ptr, length);\n    }\n\n    // Same considerations as for requireSpace.\n    function peekSha256(Data memory data, uint256 length) internal view returns (bytes32) {\n        data.requireSpace(length);\n        return Utils.sha256Raw(data.ptr, length);\n    }\n\n    function decodeU8(Data memory data) internal pure returns (uint8) {\n        return uint8(bytes1(data.read(1)));\n    }\n\n    function decodeU16(Data memory data) internal pure returns (uint16) {\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\n    }\n\n    function decodeU32(Data memory data) internal pure returns (uint32) {\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\n    }\n\n    function decodeU64(Data memory data) internal pure returns (uint64) {\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\n    }\n\n    function decodeU128(Data memory data) internal pure returns (uint128) {\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\n    }\n\n    function decodeU256(Data memory data) internal pure returns (uint256) {\n        return Utils.swapBytes32(uint256(data.read(32)));\n    }\n\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\n        return bytes20(data.read(20));\n    }\n\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\n        return data.read(32);\n    }\n\n    function decodeBool(Data memory data) internal pure returns (bool) {\n        uint8 res = data.decodeU8();\n        require(res <= 1, \"Parse error: invalid bool\");\n        return res != 0;\n    }\n\n    function skipBytes(Data memory data) internal pure {\n        uint256 length = data.decodeU32();\n        data.requireSpace(length);\n        unchecked {\n            data.ptr += length;\n        }\n    }\n\n    function decodeBytes(Data memory data) internal pure returns (bytes memory res) {\n        uint256 length = data.decodeU32();\n        data.requireSpace(length);\n        res = Utils.memoryToBytes(data.ptr, length);\n        unchecked {\n            data.ptr += length;\n        }\n    }\n}\n"
    },
    "contracts/auroraSDK/Codec.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nimport \"./Borsh.sol\";\nimport \"./Types.sol\";\nimport \"./Utils.sol\";\n\n/// Provide borsh serialization and deserialization for multiple types.\nlibrary Codec {\n    using Borsh for Borsh.Data;\n\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\n        return bytes1(v);\n    }\n\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\n        return bytes2(Utils.swapBytes2(v));\n    }\n\n    function encodeU32(uint32 v) public pure returns (bytes4) {\n        return bytes4(Utils.swapBytes4(v));\n    }\n\n    function encodeU64(uint64 v) public pure returns (bytes8) {\n        return bytes8(Utils.swapBytes8(v));\n    }\n\n    function encodeU128(uint128 v) public pure returns (bytes16) {\n        return bytes16(Utils.swapBytes16(v));\n    }\n\n    /// Encode bytes into borsh. Use this method to encode strings as well.\n    function encode(bytes memory value) public pure returns (bytes memory) {\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\n    }\n\n    /// Encode Execution mode enum into borsh.\n    function encodeEM(ExecutionMode mode) public pure returns (bytes1) {\n        return bytes1(uint8(mode));\n    }\n\n    /// Encode PromiseArgsVariant enum into borsh.\n    function encodePromise(PromiseArgsVariant mode) public pure returns (bytes1) {\n        return bytes1(uint8(mode));\n    }\n\n    /// Encode base promise into borsh.\n    function encode(PromiseCreateArgs memory nearPromise) public pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                encode(bytes(nearPromise.targetAccountId)),\n                encode(bytes(nearPromise.method)),\n                encode(nearPromise.args),\n                encodeU128(nearPromise.nearBalance),\n                encodeU64(nearPromise.nearGas)\n            );\n    }\n\n    /// Encode promise with callback into borsh.\n    function encode(PromiseWithCallback memory nearPromise) public pure returns (bytes memory) {\n        return abi.encodePacked(encode(nearPromise.base), encode(nearPromise.callback));\n    }\n\n    /// Encode create promise using borsh. The encoded data\n    /// uses the same format that the Cross Contract Call precompile expects.\n    function encodeCrossContractCallArgs(PromiseCreateArgs memory nearPromise, ExecutionMode mode) public pure returns (bytes memory) {\n        return abi.encodePacked(encodeEM(mode), encodePromise(PromiseArgsVariant.Create), encode(nearPromise));\n    }\n\n    /// Encode promise with callback using borsh. The encoded data\n    /// uses the same format that the Cross Contract Call precompile expects.\n    function encodeCrossContractCallArgs(PromiseWithCallback memory nearPromise, ExecutionMode mode) public pure returns (bytes memory) {\n        return abi.encodePacked(encodeEM(mode), encodePromise(PromiseArgsVariant.Callback), encode(nearPromise));\n    }\n\n    /// Decode promise result using borsh.\n    function decodePromiseResult(Borsh.Data memory data) public pure returns (PromiseResult memory result) {\n        result.status = PromiseResultStatus(data.decodeU8());\n        if (result.status == PromiseResultStatus.Successful) {\n            result.output = data.decodeBytes();\n        }\n    }\n\n    /// Skip promise result from the buffer.\n    function skipPromiseResult(Borsh.Data memory data) public pure {\n        PromiseResultStatus status = PromiseResultStatus(uint8(data.decodeU8()));\n        if (status == PromiseResultStatus.Successful) {\n            data.skipBytes();\n        }\n    }\n}\n"
    },
    "contracts/auroraSDK/Types.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\n/// Basic NEAR promise.\nstruct PromiseCreateArgs {\n    /// Account id of the target contract to be called.\n    string targetAccountId;\n    /// Method in the contract to be called\n    string method;\n    /// Payload to be passed to the method as input.\n    bytes args;\n    /// Amount of NEAR tokens to attach to the call. This will\n    /// be charged from the caller in wNEAR.\n    uint128 nearBalance;\n    /// Amount of gas to attach to the call.\n    uint64 nearGas;\n}\n\nenum PromiseArgsVariant {\n    /// Basic NEAR promise\n    Create,\n    /// NEAR promise with a callback attached.\n    Callback,\n    /// Description of arbitrary NEAR promise. Allows applying combinators\n    /// recursively, multiple action types and batched actions.\n    Recursive\n}\n\n/// Combine two base promises using NEAR combinator `then`.\nstruct PromiseWithCallback {\n    /// Initial promise to be triggered.\n    PromiseCreateArgs base;\n    /// Second promise that is executed after the execution of `base`.\n    /// In particular this promise will have access to the result of\n    /// the `base` promise.\n    PromiseCreateArgs callback;\n}\n\nenum ExecutionMode {\n    /// Eager mode means that the promise WILL be executed in a single\n    /// NEAR transaction.\n    Eager,\n    /// Lazy mode means that the promise WILL be scheduled for execution\n    /// and a separate interaction is required to trigger this execution.\n    Lazy\n}\n\nenum PromiseResultStatus {\n    /// This status should not be reachable.\n    NotReady,\n    /// The promise was executed successfully.\n    Successful,\n    /// The promise execution failed.\n    Failed\n}\n\nstruct PromiseResult {\n    /// Status result of the promise execution.\n    PromiseResultStatus status;\n    /// If the status is successful, output contains the output of the promise.\n    /// Otherwise the output field MUST be ignored.\n    bytes output;\n}\n"
    },
    "contracts/auroraSDK/Utils.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nlibrary Utils {\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\n        return (v << 8) | (v >> 8);\n    }\n\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\n        return (v << 16) | (v >> 16);\n    }\n\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\n        return (v << 32) | (v >> 32);\n    }\n\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\n        v = ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\n        v = ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\n        v = ((v & 0x00000000ffffffff00000000ffffffff) << 32) | ((v & 0xffffffff00000000ffffffff00000000) >> 32);\n        return (v << 64) | (v >> 64);\n    }\n\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\n        v =\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\n        v =\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) << 16) |\n            ((v & 0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >> 16);\n        v =\n            ((v & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) << 32) |\n            ((v & 0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >> 32);\n        v =\n            ((v & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) << 64) |\n            ((v & 0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >> 64);\n        return (v << 128) | (v >> 128);\n    }\n\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(ptr)\n        }\n    }\n\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\n        assembly {\n            mstore(ptr, value)\n        }\n    }\n\n    function memoryToBytes(uint256 ptr, uint256 length) internal pure returns (bytes memory res) {\n        if (length != 0) {\n            assembly {\n                // 0x40 is the address of free memory pointer.\n                res := mload(0x40)\n                let end := add(res, and(add(length, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n                // end = res + 32 + 32 * ceil(length / 32).\n                mstore(0x40, end)\n                mstore(res, length)\n                let destPtr := add(res, 32)\n                // prettier-ignore\n                for {} 1 {} {\n                    mstore(destPtr, mload(ptr))\n                    destPtr := add(destPtr, 32)\n                    if eq(destPtr, end) { break }\n                    ptr := add(ptr, 32)\n                }\n            }\n        }\n    }\n\n    function keccak256Raw(uint256 ptr, uint256 length) internal pure returns (bytes32 res) {\n        assembly {\n            res := keccak256(ptr, length)\n        }\n    }\n\n    function sha256Raw(uint256 ptr, uint256 length) internal view returns (bytes32 res) {\n        assembly {\n            // 2 is the address of SHA256 precompiled contract.\n            // First 64 bytes of memory can be used as scratch space.\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\n            // prettier-ignore\n            for {} iszero(ret) {} {}\n            res := mload(0)\n        }\n    }\n\n    /// Convert array of bytes to hexadecimal string.\n    /// https://ethereum.stackexchange.com/a/126928/45323\n    function bytesToHex(bytes memory buffer) public pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(buffer.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < buffer.length; i++) {\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n        }\n\n        return string(converted);\n    }\n}\n"
    },
    "contracts/deal/base/ModuleBase.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./Types.sol\";\nimport \"../interfaces/ICore.sol\";\n\ncontract ModuleBase is UUPSUpgradeable {\n    bytes32 private constant _CORE_SLOT = keccak256(\"network.fluence.proxy.core\");\n\n    modifier onlyModule(Module module) {\n        require(_core().moduleByType(module) == msg.sender, \"ModuleBase: caller is not required module\");\n        _;\n    }\n\n    modifier onlyModules(Module[] calldata modules) {\n        Module callerModule = _core().moduleByAddress(msg.sender);\n\n        bool isRequiredModule = false;\n        for (uint256 i = 0; i < modules.length; i++) {\n            if (modules[i] != callerModule) {\n                continue;\n            }\n\n            isRequiredModule = true;\n            break;\n        }\n\n        require(isRequiredModule, \"ModuleBase: caller is not required module\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(_core().owner() == msg.sender, \"ModuleBase: caller is not owner\");\n        _;\n    }\n\n    modifier onlyCore() {\n        require(address(_core()) == msg.sender, \"ModuleBase: caller is not core\");\n        _;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyCore {\n        //TODO: check that new implementation from DAO\n    }\n\n    function _core() internal view returns (ICore) {\n        return ICore(StorageSlot.getAddressSlot(_CORE_SLOT).value);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/deal/base/ModuleProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"./Types.sol\";\nimport \"../interfaces/ICore.sol\";\n\ncontract ModuleProxy is ERC1967Proxy {\n    bytes32 private constant _CORE_SLOT = keccak256(\"network.fluence.proxy.core\");\n\n    constructor(address _logic, bytes memory _data, address _core) ERC1967Proxy(_logic, _data) {\n        _setCore(_core);\n    }\n\n    function _setCore(address _core) internal {\n        StorageSlot.getAddressSlot(_CORE_SLOT).value = _core;\n    }\n\n    function _getCore() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_CORE_SLOT).value;\n    }\n}\n"
    },
    "contracts/deal/base/Types.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nenum Module {\n    None,\n    Config,\n    Payment,\n    Status,\n    Workers\n}\n\nstruct Particle {\n    string air;\n    string prevData;\n    string params;\n    string callResults;\n}\n\nstruct PAT {\n    uint256 index;\n    address owner;\n    uint256 collateral;\n    uint256 created;\n}\n\nstruct PDT {\n    string peerId;\n    string workerId;\n}\n\nstruct CIDV1 {\n    bytes4 prefixes;\n    bytes32 hash;\n}\n\nenum DealStatus {\n    WaitingForWorkers,\n    Working\n}\n\ntype PATId is bytes32;\n"
    },
    "contracts/deal/ConfigModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../global/interfaces/IParticleVerifyer.sol\";\nimport \"../global/interfaces/IGlobalConfig.sol\";\nimport \"./interfaces/IConfigModule.sol\";\nimport \"./base/ModuleBase.sol\";\nimport \"./base/Types.sol\";\n\nabstract contract ConfigState is IConfigModule {\n    IGlobalConfig public immutable globalConfig;\n    IERC20 public immutable fluenceToken;\n    IParticleVerifyer public immutable particleVerifyer;\n\n    constructor(IGlobalConfig globalConfig_, IParticleVerifyer particleVerifyer_) {\n        globalConfig = globalConfig_;\n        fluenceToken = globalConfig_.fluenceToken();\n        particleVerifyer = particleVerifyer_;\n    }\n\n    IERC20 public paymentToken;\n    uint256 public pricePerEpoch;\n    uint256 public requiredCollateral;\n\n    uint256 public minWorkers;\n    uint256 public maxWorkersPerProvider;\n    uint256 public targetWorkers;\n    uint256 public creationBlock;\n\n    CIDV1 internal _appCID;\n    CIDV1[] internal _effectors;\n}\n\ncontract ConfigModule is ConfigState, ModuleBase, Initializable {\n    event AppCIDChanged(CIDV1 newAppCID);\n\n    constructor(IGlobalConfig globalConfig_, IParticleVerifyer particleVerifyer_) ConfigState(globalConfig_, particleVerifyer_) {}\n\n    function initialize(\n        IERC20 paymentToken_,\n        uint256 pricePerEpoch_,\n        uint256 requiredCollateral_,\n        CIDV1 calldata appCID_,\n        uint256 minWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 targetWorkers_,\n        CIDV1[] memory effectors_\n    ) public initializer {\n        paymentToken = paymentToken_;\n        pricePerEpoch = pricePerEpoch_;\n        requiredCollateral = requiredCollateral_;\n        _appCID = appCID_;\n        minWorkers = minWorkers_;\n        maxWorkersPerProvider = maxWorkersPerProvider_;\n        targetWorkers = targetWorkers_;\n\n        uint256 length = effectors_.length;\n        for (uint256 i = 0; i < length; i++) {\n            _effectors.push(effectors_[i]);\n        }\n\n        creationBlock = block.number;\n    }\n\n    function effectors() external view override returns (CIDV1[] memory) {\n        return _effectors;\n    }\n\n    function appCID() external view override returns (CIDV1 memory) {\n        return _appCID;\n    }\n\n    function setAppCID(CIDV1 calldata appCID_) external onlyOwner {\n        _appCID = appCID_;\n\n        emit AppCIDChanged(appCID_);\n    }\n}\n"
    },
    "contracts/deal/Core.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./interfaces/ICore.sol\";\nimport \"./interfaces/IConfigModule.sol\";\nimport \"./interfaces/IPaymentModule.sol\";\nimport \"./interfaces/IStatusModule.sol\";\nimport \"./interfaces/IWorkersModule.sol\";\nimport \"./base/Types.sol\";\n\ncontract Core is UUPSUpgradeable, OwnableUpgradeable, ICore {\n    mapping(Module => address) public moduleByType;\n    mapping(address => Module) public moduleByAddress;\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        IConfigModule configModule_,\n        IPaymentModule paymentModule_,\n        IStatusModule statusModule_,\n        IWorkersModule workersModule_\n    ) public initializer {\n        moduleByType[Module.Config] = address(configModule_);\n        moduleByType[Module.Payment] = address(paymentModule_);\n        moduleByType[Module.Status] = address(statusModule_);\n        moduleByType[Module.Workers] = address(workersModule_);\n\n        moduleByAddress[address(configModule_)] = Module.Config;\n        moduleByAddress[address(paymentModule_)] = Module.Payment;\n        moduleByAddress[address(statusModule_)] = Module.Status;\n        moduleByAddress[address(workersModule_)] = Module.Workers;\n\n        __Ownable_init();\n    }\n\n    function owner() public view override(OwnableUpgradeable, ICore) returns (address) {\n        return OwnableUpgradeable.owner();\n    }\n\n    function configModule() public view returns (IConfigModule) {\n        return IConfigModule(moduleByType[Module.Config]);\n    }\n\n    function paymentModule() public view returns (IPaymentModule) {\n        return IPaymentModule(moduleByType[Module.Payment]);\n    }\n\n    function statusModule() public view returns (IStatusModule) {\n        return IStatusModule(moduleByType[Module.Status]);\n    }\n\n    function workersModule() public view returns (IWorkersModule) {\n        return IWorkersModule(moduleByType[Module.Workers]);\n    }\n\n    function transferOwnership(address newOwner) public override(OwnableUpgradeable, ICore) {\n        OwnableUpgradeable.transferOwnership(newOwner);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\n        //TODO: check that new implementation from DAO\n    }\n}\n"
    },
    "contracts/deal/interfaces/IConfigModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../base/Types.sol\";\nimport \"../../global/interfaces/IParticleVerifyer.sol\";\nimport \"../../global/interfaces/IGlobalConfig.sol\";\n\ninterface IConfigModule {\n    function initialize(\n        IERC20 paymentToken_,\n        uint256 pricePerEpoch_,\n        uint256 requiredCollateral_,\n        CIDV1 calldata appCID_,\n        uint256 minWorkers_,\n        uint256 maxWorkersPerProvider_,\n        uint256 targetWorkers_,\n        CIDV1[] calldata effectorWasmsCids_\n    ) external;\n\n    function globalConfig() external view returns (IGlobalConfig);\n\n    function fluenceToken() external view returns (IERC20);\n\n    function particleVerifyer() external view returns (IParticleVerifyer);\n\n    function paymentToken() external view returns (IERC20);\n\n    function pricePerEpoch() external view returns (uint256);\n\n    function requiredCollateral() external view returns (uint256);\n\n    function appCID() external view returns (CIDV1 memory);\n\n    function minWorkers() external view returns (uint256);\n\n    function maxWorkersPerProvider() external view returns (uint256);\n\n    function targetWorkers() external view returns (uint256);\n\n    function creationBlock() external view returns (uint256);\n\n    function effectors() external view returns (CIDV1[] memory);\n\n    function setAppCID(CIDV1 calldata appCID_) external;\n}\n"
    },
    "contracts/deal/interfaces/ICore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"./IConfigModule.sol\";\nimport \"./IPaymentModule.sol\";\nimport \"./IStatusModule.sol\";\nimport \"./IWorkersModule.sol\";\nimport \"../base/Types.sol\";\n\ninterface ICore {\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\n\n    function moduleByType(Module module) external view returns (address);\n\n    function moduleByAddress(address module) external view returns (Module);\n\n    function configModule() external view returns (IConfigModule);\n\n    function paymentModule() external view returns (IPaymentModule);\n\n    function statusModule() external view returns (IStatusModule);\n\n    function workersModule() external view returns (IWorkersModule);\n\n    function owner() external view returns (address);\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/deal/interfaces/IPaymentModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport \"../base/Types.sol\";\n\ninterface IPaymentModule {\n    function balance() external view returns (uint256);\n\n    function rewardAmount(bytes32 particleHash, PATId patId) external view returns (uint);\n\n    function depositToPaymentBalance(uint256 amount) external;\n\n    function withdrawFromPaymentBalance(uint256 amount) external;\n\n    function commitParticle(Particle calldata particle) external;\n\n    function withdrawReward(PATId patId, bytes32[] calldata particlesHashes) external;\n}\n"
    },
    "contracts/deal/interfaces/IStatusModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { DealStatus } from \"../base/Types.sol\";\n\ninterface IStatusModule {\n    event StatusChanged(DealStatus newStatus);\n\n    function status() external view returns (DealStatus);\n\n    function startWorkingEpoch() external view returns (uint256);\n\n    function changeStatus(DealStatus status_) external;\n}\n"
    },
    "contracts/deal/interfaces/IWorkersModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"../base/Types.sol\";\n\ninterface IWorkersModule {\n    function workersCount() external view returns (uint256);\n\n    function getNextWorkerIndex() external view returns (uint256);\n\n    function getPATIndex(PATId id) external view returns (uint256);\n\n    function getPATOwner(PATId id) external view returns (address);\n\n    function getPDT(PATId id) external view returns (string memory peerId, string memory workerId);\n\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\n\n    function join() external;\n\n    function joinViaMatcher(address owner) external;\n\n    function exit(PATId id) external;\n\n    function withdrawCollateral(address owner) external;\n\n    function setPDT(PATId id, string calldata peerId, string calldata workerId) external;\n}\n"
    },
    "contracts/deal/PaymentModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport \"./interfaces/IPaymentModule.sol\";\nimport \"./interfaces/ICore.sol\";\nimport \"./interfaces/IWorkersModule.sol\";\nimport \"./base/Types.sol\";\nimport \"./base/ModuleBase.sol\";\n\ncontract PaymentModuleState {\n    struct ParticleInfo {\n        bool isValid;\n        uint256 epoch;\n        uint256 worketsCount;\n        uint reward;\n    }\n\n    uint256 internal _balance;\n    uint256 internal _locked;\n\n    mapping(uint => uint) internal _goldenParticlesCountByEpoch;\n    mapping(bytes32 => ParticleInfo) internal _particles;\n    mapping(uint => mapping(uint => uint)) internal _workersByEpoch;\n    mapping(bytes32 => BitMaps.BitMap) internal _paidWorkersByParticle;\n}\n\ncontract PaymentModuleInternal is ModuleBase, PaymentModuleState {\n    function _hasWorkerInEpoch(uint epoch, PATId id) internal view returns (bool) {\n        IWorkersModule workers = _core().workersModule();\n\n        uint index = workers.getPATIndex(id);\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        if (_workersByEpoch[epoch][bucket] & mask == 0) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\nabstract contract PaymentModuleOwnable is PaymentModuleInternal, IPaymentModule {\n    using BitMaps for BitMaps.BitMap;\n    using SafeERC20 for IERC20;\n\n    function depositToPaymentBalance(uint256 amount) external onlyOwner {\n        IERC20 token = _core().configModule().paymentToken();\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        _balance += amount;\n\n        //TODO: event\n    }\n\n    function withdrawFromPaymentBalance(uint256 amount) external onlyOwner {\n        IERC20 token = _core().configModule().paymentToken();\n        require(_balance - _locked >= amount, \"Not enough free balance\");\n\n        _balance -= amount;\n        token.safeTransfer(msg.sender, amount);\n\n        //TODO: event\n    }\n}\n\ncontract PaymentModule is PaymentModuleOwnable {\n    using BitMaps for BitMaps.BitMap;\n    using SafeERC20 for IERC20;\n\n    function rewardAmount(bytes32 particleHash, PATId patId) public view returns (uint) {\n        ParticleInfo storage particle = _particles[particleHash];\n        require(particle.isValid, \"Particle not valid\");\n\n        uint currentEpoch = _core().configModule().globalConfig().epochManager().currentEpoch();\n        uint epoch = particle.epoch;\n\n        require(currentEpoch - 1 > epoch, \"Particle not confirmed\");\n\n        if (!_hasWorkerInEpoch(epoch, patId) || !_hasWorkerInEpoch(epoch - 1, patId)) {\n            return 0;\n        }\n\n        return particle.reward / particle.worketsCount;\n    }\n\n    function balance() external view returns (uint256) {\n        return _balance;\n    }\n\n    function commitParticle(Particle calldata particle) external {\n        bytes32 hash = keccak256(abi.encode(particle.air, particle.prevData, particle.params, particle.callResults)); // TODO: refactoring\n\n        require(_particles[hash].epoch == 0, \"Particle already exists\");\n\n        ICore core = _core();\n        IConfigModule config = core.configModule();\n        IWorkersModule workers = core.workersModule();\n\n        uint epoch = config.globalConfig().epochManager().currentEpoch();\n\n        PATId[] memory patIds = config.particleVerifyer().verifyParticle(particle);\n\n        for (uint i = 0; i < patIds.length; i++) {\n            uint index = workers.getPATIndex(patIds[i]);\n            uint256 bucket = index >> 8;\n            uint256 mask = 1 << (index & 0xff);\n            _workersByEpoch[epoch][bucket] |= mask; // TODO: gass optimization\n        }\n\n        uint goldenParticlesCountByEpoch = _goldenParticlesCountByEpoch[epoch];\n        uint price = config.pricePerEpoch();\n\n        uint reward = price / (2 ** (goldenParticlesCountByEpoch + 1));\n\n        _particles[hash] = ParticleInfo({ isValid: true, epoch: epoch, worketsCount: patIds.length, reward: reward });\n        _goldenParticlesCountByEpoch[epoch] = goldenParticlesCountByEpoch + 1;\n\n        _balance -= reward;\n        _locked += reward;\n\n        //TODO: event\n    }\n\n    function withdrawReward(PATId patId, bytes32[] calldata particlesHashes) external {\n        ICore core = _core();\n        IConfigModule config = core.configModule();\n\n        IWorkersModule workers = core.workersModule();\n\n        uint index = workers.getPATIndex(patId);\n\n        uint totalReward;\n        for (uint i = 0; i < particlesHashes.length; i++) {\n            bytes32 particleHash = particlesHashes[i];\n\n            require(!_paidWorkersByParticle[particleHash].get(index), \"Already paid\");\n\n            totalReward += rewardAmount(particleHash, patId);\n\n            _paidWorkersByParticle[particleHash].set(index);\n        }\n\n        _locked -= totalReward;\n        config.paymentToken().safeTransfer(workers.getPATOwner(patId), totalReward);\n\n        //TODO: event\n    }\n}\n"
    },
    "contracts/deal/StatusModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Core.sol\";\nimport \"./base/ModuleBase.sol\";\nimport \"./interfaces/IStatusModule.sol\";\nimport \"./base/Types.sol\";\n\ncontract StatusModuleState {\n    DealStatus internal _status_;\n    uint256 internal _startWorkingEpoch_;\n}\n\ncontract StatusModule is ModuleBase, StatusModuleState, IStatusModule {\n    // ----------------- View -----------------\n    function status() external view returns (DealStatus) {\n        return _status_;\n    }\n\n    function startWorkingEpoch() external view returns (uint256) {\n        return _startWorkingEpoch_;\n    }\n\n    // ----------------- Mutable -----------------\n    function changeStatus(DealStatus status_) external onlyModule(Module.Workers) {\n        DealStatus oldStatus = _status_;\n\n        if (oldStatus == status_) {\n            return;\n        }\n\n        if (oldStatus != status_ && status_ == DealStatus.Working) {\n            _onStartWorking();\n        } else if (oldStatus != status_ && status_ == DealStatus.WaitingForWorkers) {\n            _onEndWorking();\n        }\n\n        _status_ = status_;\n        emit StatusChanged(status_);\n    }\n\n    // ----------------- Private -----------------\n\n    function _onStartWorking() private {\n        _startWorkingEpoch_ = _core().configModule().globalConfig().epochManager().currentEpoch();\n    }\n\n    function _onEndWorking() private {\n        _startWorkingEpoch_ = 0;\n    }\n}\n"
    },
    "contracts/deal/WorkersModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"./base/ModuleBase.sol\";\nimport \"../global/interfaces/IGlobalConfig.sol\";\nimport \"../utils/WithdrawRequests.sol\";\nimport \"./interfaces/IWorkersModule.sol\";\nimport \"./interfaces/IConfigModule.sol\";\nimport \"./interfaces/ICore.sol\";\nimport \"./interfaces/IStatusModule.sol\";\nimport \"./base/Types.sol\";\n\ncontract WorkersModuleState {\n    struct OwnerInfo {\n        uint256 patsCount;\n    }\n\n    event PATCreated(PATId id, address owner);\n    event PATRemoved(PATId id);\n\n    event PDTSet(PATId id, string peerId, string workerId);\n    event PDTRemoved(PATId id);\n\n    event CollateralWithdrawn(address owner, uint256 amount);\n\n    bytes32 internal constant _PREFIX_PAT_SLOT = keccak256(\"network.fluence.WorkersManager.pat\");\n    bytes32 internal constant _PAT_ID_PREFIX = keccak256(\"network.fluence.pat\");\n\n    uint256 internal _currentWorkers;\n\n    mapping(address => OwnerInfo) internal _ownersInfo;\n    mapping(address => WithdrawRequests.Requests) internal _requests;\n\n    uint256 internal _nextWorkerIndex;\n    uint256[] internal _freeIndexes;\n    mapping(uint256 => PATId) internal _patIdByIndex;\n    mapping(PATId => PDT) internal _pdtByPATId;\n}\n\ncontract WorkersModuleInternal is WorkersModuleState, ModuleBase {\n    using WithdrawRequests for WithdrawRequests.Requests;\n    using SafeERC20 for IERC20;\n\n    function _initPAT(PAT storage pat, address owner, uint index, uint collateral, uint created) internal {\n        pat.owner = owner;\n        pat.index = index;\n        pat.collateral = collateral;\n        pat.created = created;\n    }\n\n    function _getPAT(PATId id) internal pure returns (PAT storage pat) {\n        bytes32 bytes32Id = PATId.unwrap(id);\n\n        bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_PREFIX_PAT_SLOT, bytes32Id))) - 1);\n\n        assembly {\n            pat.slot := slot\n        }\n\n        return pat;\n    }\n\n    function _clearPAT(PAT storage pat) internal {\n        delete pat.owner;\n        delete pat.collateral;\n        delete pat.created;\n        delete pat.index;\n    }\n\n    function _createWithdrawRequest(address owner, uint256 amount) internal {\n        _requests[owner].push(amount);\n    }\n\n    function _createPAT(address owner, address collateralPayer) internal {\n        uint256 patsCountByOwner = _ownersInfo[owner].patsCount;\n        uint256 currentWorkers = _currentWorkers;\n\n        ICore core = _core();\n        IConfigModule config = core.configModule();\n\n        require(currentWorkers < config.targetWorkers(), \"Target workers reached\");\n        require(patsCountByOwner < config.maxWorkersPerProvider(), \"Max workers per provider reached\");\n\n        uint256 requiredCollateral = config.requiredCollateral();\n        config.fluenceToken().safeTransferFrom(collateralPayer, address(this), requiredCollateral);\n\n        currentWorkers++;\n\n        IStatusModule statusController = core.statusModule();\n\n        {\n            DealStatus status = statusController.status();\n            if (status == DealStatus.WaitingForWorkers && currentWorkers >= config.minWorkers()) {\n                status = DealStatus.Working;\n                statusController.changeStatus(status);\n            }\n        }\n\n        uint index;\n        uint freeIndexLength = _freeIndexes.length;\n        if (freeIndexLength > 0) {\n            index = _freeIndexes[freeIndexLength - 1];\n            _freeIndexes.pop();\n        } else {\n            index = _nextWorkerIndex;\n            _nextWorkerIndex++;\n        }\n\n        PATId id = PATId.wrap(keccak256(abi.encodePacked(_PAT_ID_PREFIX, owner, index)));\n        PAT storage pat = _getPAT(id);\n        require(pat.owner == address(0x00), \"Id already used\");\n\n        _initPAT(pat, owner, index, requiredCollateral, config.globalConfig().epochManager().currentEpoch());\n\n        _patIdByIndex[index] = id;\n        _ownersInfo[owner].patsCount = patsCountByOwner + 1;\n        _currentWorkers = currentWorkers;\n\n        emit PATCreated(id, owner);\n    }\n}\n\ncontract WorkersModule is WorkersModuleInternal, IWorkersModule {\n    using WithdrawRequests for WithdrawRequests.Requests;\n    using SafeERC20 for IERC20;\n\n    function workersCount() external view returns (uint256) {\n        return _currentWorkers;\n    }\n\n    function getNextWorkerIndex() external view returns (uint256) {\n        return _nextWorkerIndex;\n    }\n\n    function getPATIndex(PATId id) external view returns (uint256) {\n        return _getPAT(id).index;\n    }\n\n    function getPATOwner(PATId id) external view returns (address) {\n        return _getPAT(id).owner;\n    }\n\n    function getPDT(PATId id) external view returns (string memory peerId, string memory workerId) {\n        return (_pdtByPATId[id].peerId, _pdtByPATId[id].workerId);\n    }\n\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256) {\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\n        return _requests[owner].getAmountBy(timestamp - globalConfig.withdrawTimeout());\n    }\n\n    // ---- Public mutables ----\n\n    function join() external {\n        _createPAT(msg.sender, msg.sender);\n    }\n\n    function joinViaMatcher(address owner) external {\n        require(address(_core().configModule().globalConfig().matcher()) == msg.sender, \"Only matcher can call this method\");\n\n        _createPAT(owner, msg.sender);\n    }\n\n    function exit(PATId id) external {\n        PAT storage pat = _getPAT(id);\n        address owner = pat.owner;\n\n        require(owner == msg.sender, \"PAT doesn't exist\");\n\n        ICore core = _core();\n        IConfigModule config = core.configModule();\n\n        IStatusModule statusController = core.statusModule();\n\n        _createWithdrawRequest(owner, pat.collateral);\n\n        uint256 currentWorkers = _currentWorkers - 1;\n\n        if (statusController.status() == DealStatus.Working && currentWorkers < config.minWorkers()) {\n            statusController.changeStatus(DealStatus.WaitingForWorkers);\n        }\n\n        uint patIndex = pat.index;\n        _freeIndexes.push(patIndex);\n\n        _ownersInfo[owner].patsCount--;\n        _currentWorkers = currentWorkers;\n        _patIdByIndex[patIndex] = PATId.wrap(bytes32(0));\n        _clearPAT(pat);\n\n        delete _pdtByPATId[id];\n\n        emit PDTRemoved(id);\n        emit PATRemoved(id);\n    }\n\n    function withdrawCollateral(address owner) external {\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\n\n        uint256 amount = _requests[owner].confirmBy(block.timestamp - globalConfig.withdrawTimeout());\n\n        globalConfig.fluenceToken().safeTransfer(owner, amount);\n\n        emit CollateralWithdrawn(owner, amount);\n    }\n\n    function setPDT(PATId id, string calldata peerId, string calldata workerId) external {\n        _pdtByPATId[id] = PDT(peerId, workerId);\n\n        emit PDTSet(id, peerId, workerId);\n    }\n}\n"
    },
    "contracts/dev/OwnableFaucet.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"../global/AquaProxy.sol\";\nimport \"./TestERC20.sol\";\n\ncontract OwnableFaucet is Ownable, Multicall {\n    IERC20 public immutable fluenceToken;\n    IERC20 public immutable usdToken;\n\n    constructor(IERC20 fluenceToken_, IERC20 usdToken_) {\n        fluenceToken = fluenceToken_;\n        usdToken = usdToken_;\n    }\n\n    function sendUSD(address addr, uint256 value) external onlyOwner {\n        usdToken.transfer(addr, value);\n    }\n\n    function sendFLT(address addr, uint256 value) external onlyOwner {\n        fluenceToken.transfer(addr, value);\n    }\n}\n"
    },
    "contracts/dev/TestERC20.sol": {
      "content": "// contracts/GLDToken.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        uint256 v = 0;\n        unchecked {\n            v--;\n        }\n\n        _mint(msg.sender, v);\n    }\n}\n"
    },
    "contracts/global/AquaProxy.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"../auroraSDK/AuroraSdk.sol\";\n\ncontract AquaProxy {\n    using AuroraSdk for NEAR;\n    using AuroraSdk for PromiseWithCallback;\n    using AuroraSdk for PromiseCreateArgs;\n\n    enum ParticleStatus {\n        None,\n        Pending,\n        Success,\n        Failure\n    }\n\n    struct Particle {\n        string air;\n        string prevData;\n        string params;\n        string callResults;\n    }\n\n    IERC20 constant wNEAR = IERC20(0x4861825E75ab14553E5aF711EbbE6873d369d146);\n\n    address public immutable selfReprsentativeImplicitAddress;\n    address public immutable aquaVMImplicitAddress;\n\n    NEAR public near;\n    string public aquaVMAddress;\n\n    uint64 constant VS_NEAR_GAS = 30_000_000_000_000;\n\n    constructor(string memory aquaVMAddress_) {\n        aquaVMAddress = aquaVMAddress_;\n        aquaVMImplicitAddress = AuroraSdk.implicitAuroraAddress(aquaVMAddress);\n\n        near = AuroraSdk.initNear(wNEAR);\n\n        selfReprsentativeImplicitAddress = AuroraSdk.nearRepresentitiveImplicitAddress(address(this));\n    }\n\n    function verifyParticle(Particle calldata particle) public {\n        PromiseCreateArgs memory verifyScriptCall = near.call(\n            aquaVMAddress,\n            \"verify_script\",\n            abi.encodePacked(\n                Codec.encode(bytes(particle.air)),\n                Codec.encode(bytes(particle.prevData)),\n                Codec.encode(bytes(particle.params)),\n                Codec.encode(bytes(particle.callResults))\n            ),\n            0,\n            VS_NEAR_GAS\n        );\n\n        verifyScriptCall.transact();\n    }\n}\n"
    },
    "contracts/global/DealFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"../global/interfaces/IGlobalConfig.sol\";\nimport \"../mocks/MockParticleVerifyer.sol\";\nimport \"../deal/interfaces/ICore.sol\";\nimport \"../deal/interfaces/IConfigModule.sol\";\nimport \"../deal/interfaces/IPaymentModule.sol\";\nimport \"../deal/interfaces/IStatusModule.sol\";\nimport \"../deal/interfaces/IWorkersModule.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport \"../deal/base/ModuleProxy.sol\";\n\nabstract contract DealFactoryState is IFactory {\n    constructor(\n        IGlobalConfig globalConfig_,\n        IERC20 defaultPaymentToken_,\n        ICore coreImpl_,\n        IConfigModule configImpl_,\n        IPaymentModule paymentImpl_,\n        IStatusModule statusImpl_,\n        IWorkersModule workersImpl_\n    ) {\n        globalConfig = globalConfig_;\n        defaultPaymentToken = defaultPaymentToken_;\n\n        coreImpl = coreImpl_;\n        configImpl = configImpl_;\n        paymentImpl = paymentImpl_;\n        statusImpl = statusImpl_;\n        workersImpl = workersImpl_;\n    }\n\n    uint256 public constant PRICE_PER_EPOCH = 83 * 10 ** 15;\n    uint256 public constant REQUIRED_COLLATERAL = 1 * 10 ** 18;\n    uint256 public constant MAX_WORKERS_PER_PROVIDER = 10000000;\n\n    IGlobalConfig public immutable globalConfig;\n    IERC20 public immutable defaultPaymentToken;\n\n    ICore public immutable coreImpl;\n    IConfigModule public immutable configImpl;\n    IPaymentModule public immutable paymentImpl;\n    IStatusModule public immutable statusImpl;\n    IWorkersModule public immutable workersImpl;\n\n    mapping(address => bool) public isDeal;\n}\n\ncontract DealFactory is DealFactoryState, UUPSUpgradeable {\n    struct Deal {\n        ICore core;\n        IConfigModule configModule;\n        IPaymentModule paymentModule;\n        IStatusModule statusModule;\n        IWorkersModule workersModule;\n    }\n\n    event DealCreated(\n        Deal deal,\n        address paymentToken,\n        uint256 pricePerEpoch,\n        uint256 requiredCollateral,\n        uint256 minWorkers,\n        uint256 maxWorkersPerProvider,\n        uint256 targetWorkers,\n        CIDV1 appCID,\n        CIDV1[] effectorWasmsCids,\n        uint256 epoch\n    );\n\n    constructor(\n        IGlobalConfig globalConfig_,\n        IERC20 defaultPaymentToken_,\n        ICore coreImpl_,\n        IConfigModule configImpl_,\n        IPaymentModule paymentImpl_,\n        IStatusModule statusImpl_,\n        IWorkersModule workersImpl_\n    ) DealFactoryState(globalConfig_, defaultPaymentToken_, coreImpl_, configImpl_, paymentImpl_, statusImpl_, workersImpl_) {\n        _disableInitializers();\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == globalConfig.owner(), \"Only owner can call this function\");\n        _;\n    }\n\n    function createDeal(\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        CIDV1 calldata appCID_,\n        CIDV1[] calldata effectors\n    ) external returns (address) {\n        Deal memory deal = _deployDeal(minWorkers_, targetWorkers_, appCID_, effectors);\n\n        emit DealCreated(\n            deal,\n            address(defaultPaymentToken),\n            PRICE_PER_EPOCH,\n            REQUIRED_COLLATERAL,\n            minWorkers_,\n            MAX_WORKERS_PER_PROVIDER,\n            targetWorkers_,\n            appCID_,\n            effectors,\n            deal.configModule.globalConfig().epochManager().currentEpoch()\n        );\n\n        isDeal[address(deal.core)] = true;\n\n        return address(deal.core);\n    }\n\n    function _deployDeal(\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        CIDV1 calldata appCID_,\n        CIDV1[] calldata effectorWasmsCids_\n    ) private returns (Deal memory deal) {\n        bytes memory emptyBytes;\n\n        ICore core = ICore(address(new ERC1967Proxy(address(coreImpl), emptyBytes)));\n        IConfigModule configModule = IConfigModule(\n            address(\n                new ModuleProxy(\n                    address(configImpl),\n                    abi.encodeWithSelector(\n                        IConfigModule.initialize.selector,\n                        defaultPaymentToken,\n                        PRICE_PER_EPOCH,\n                        REQUIRED_COLLATERAL,\n                        appCID_,\n                        minWorkers_,\n                        MAX_WORKERS_PER_PROVIDER,\n                        targetWorkers_,\n                        effectorWasmsCids_\n                    ),\n                    address(core)\n                )\n            )\n        );\n\n        IPaymentModule paymentModule = IPaymentModule(address(new ModuleProxy(address(paymentImpl), emptyBytes, address(core))));\n        IStatusModule statusModule = IStatusModule(address(new ModuleProxy(address(statusImpl), emptyBytes, address(core))));\n        IWorkersModule workersModule = IWorkersModule(address(new ModuleProxy(address(workersImpl), emptyBytes, address(core))));\n\n        core.initialize(configModule, paymentModule, statusModule, workersModule);\n        core.transferOwnership(msg.sender);\n\n        deal.core = core;\n        deal.configModule = configModule;\n        deal.paymentModule = paymentModule;\n        deal.statusModule = statusModule;\n        deal.workersModule = workersModule;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n"
    },
    "contracts/global/EpochManager.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"./interfaces/IEpochManager.sol\";\n\ncontract EpochManager is IEpochManager {\n    uint256 public epochDuration;\n\n    constructor(uint256 epochDuration_) {\n        epochDuration = epochDuration_;\n    }\n\n    function currentEpoch() external view returns (uint256) {\n        return block.timestamp / epochDuration;\n    }\n}\n"
    },
    "contracts/global/GlobalConfig.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../auroraSDK/AuroraSdk.sol\";\nimport \"./AquaProxy.sol\";\nimport \"./DealFactory.sol\";\nimport \"./interfaces/IGlobalConfig.sol\";\nimport \"./interfaces/IMatcher.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport \"./interfaces/IEpochManager.sol\";\n\nabstract contract GlobalConfigState is IGlobalConfig {\n    IERC20 public fluenceToken;\n    uint public withdrawTimeout;\n    IEpochManager public epochManager;\n    IMatcher public matcher;\n    IFactory public factory;\n}\n\ncontract GlobalConfig is OwnableUpgradeable, GlobalConfigState, UUPSUpgradeable {\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(IERC20 fluenceToken_, uint withdrawTimeout_, IEpochManager epochManager_) public initializer {\n        fluenceToken = fluenceToken_;\n        withdrawTimeout = withdrawTimeout_;\n        epochManager = epochManager_;\n\n        __Ownable_init();\n    }\n\n    function owner() public view override(OwnableUpgradeable, IGlobalConfig) returns (address) {\n        return OwnableUpgradeable.owner();\n    }\n\n    function setFluenceToken(IERC20 fluenceToken_) external onlyOwner {\n        fluenceToken = fluenceToken_;\n    }\n\n    function setWithdrawTimeout(uint withdrawTimeout_) external onlyOwner {\n        withdrawTimeout = withdrawTimeout_;\n    }\n\n    function setEpochManager(IEpochManager epochManager_) external onlyOwner {\n        epochManager = epochManager_;\n    }\n\n    function setMatcher(IMatcher matcher_) external onlyOwner {\n        matcher = matcher_;\n    }\n\n    function setFactory(IFactory factory_) external onlyOwner {\n        factory = factory_;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n"
    },
    "contracts/global/interfaces/IEpochManager.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\ninterface IEpochManager {\n    function epochDuration() external view returns (uint256);\n\n    function currentEpoch() external view returns (uint256);\n}\n"
    },
    "contracts/global/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"../../deal/base/Types.sol\";\n\ninterface IFactory {\n    function isDeal(address addr) external view returns (bool);\n\n    function createDeal(\n        uint256 minWorkers_,\n        uint256 targetWorkers_,\n        CIDV1 calldata appCID_,\n        CIDV1[] calldata effectors\n    ) external returns (address);\n}\n"
    },
    "contracts/global/interfaces/IGlobalConfig.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IEpochManager.sol\";\nimport \"./IMatcher.sol\";\nimport \"./IFactory.sol\";\n\ninterface IGlobalConfig {\n    function owner() external view returns (address);\n\n    function fluenceToken() external view returns (IERC20);\n\n    function withdrawTimeout() external view returns (uint);\n\n    function epochManager() external view returns (IEpochManager);\n\n    function matcher() external view returns (IMatcher);\n\n    function factory() external view returns (IFactory);\n}\n"
    },
    "contracts/global/interfaces/IMatcher.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"../../deal/interfaces/ICore.sol\";\n\ninterface IMatcher {\n    function matchWithDeal(ICore deal) external;\n}\n"
    },
    "contracts/global/interfaces/IParticleVerifyer.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport { Particle, PATId } from \"../../deal/base/Types.sol\";\n\ninterface IParticleVerifyer {\n    function verifyParticle(Particle calldata particle) external returns (PATId[] memory);\n}\n"
    },
    "contracts/global/Matcher.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"../deal/interfaces/ICore.sol\";\nimport \"./interfaces/IGlobalConfig.sol\";\nimport \"./interfaces/IMatcher.sol\";\nimport \"../utils/LinkedList.sol\";\nimport \"../deal/base/Types.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract MatcherState {\n    struct ResourceConfig {\n        uint minPriceByEpoch;\n        uint maxCollateral;\n        uint workersCount;\n    }\n\n    struct Effectors {\n        mapping(bytes32 => bool) effectors;\n    }\n\n    IGlobalConfig public immutable globalConfig;\n\n    LinkedList.Bytes32List public resourceConfigIds;\n    mapping(address => ResourceConfig) public resourceConfigs;\n    mapping(address => bool) public whitelist;\n\n    mapping(address => Effectors) internal _effectorsByOwner;\n\n    constructor(IGlobalConfig globalConfig_) {\n        globalConfig = globalConfig_;\n    }\n}\n\nabstract contract MatcherInternal is MatcherState, UUPSUpgradeable {\n    using LinkedList for LinkedList.Bytes32List;\n\n    event Matched(address indexed computeProvider, address deal, uint joinedWorkers, uint dealCreationBlock, CIDV1 appCID);\n\n    modifier onlyOwner() {\n        require(msg.sender == globalConfig.owner(), \"Only owner can call this function\");\n        _;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    function _isEffectorsMatched(IConfigModule dealConfig, address computeProvider) internal view returns (bool) {\n        CIDV1[] memory dealEffectors = dealConfig.effectors();\n\n        for (uint i = 0; i < dealEffectors.length; i++) {\n            bytes32 dealEffector = keccak256(abi.encodePacked(dealEffectors[i].prefixes, dealEffectors[i].hash));\n            if (!_effectorsByOwner[computeProvider].effectors[dealEffector]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\nabstract contract MatcherOwnable is MatcherInternal {\n    function setWhiteList(address owner, bool hasAccess) external onlyOwner {\n        whitelist[owner] = hasAccess;\n    }\n}\n\ncontract Matcher is IMatcher, MatcherOwnable {\n    using LinkedList for LinkedList.Bytes32List;\n\n    event ComputeProviderRegistered(\n        address computeProvider,\n        uint minPriceByEpoch,\n        uint maxCollateral,\n        uint workersCount,\n        CIDV1[] effectors\n    );\n\n    constructor(IGlobalConfig globalConfig_) MatcherState(globalConfig_) {}\n\n    function register(uint minPriceByEpoch, uint maxCollateral, uint workersCount, CIDV1[] calldata effectors) external {\n        address owner = msg.sender;\n        //TODO: require(whitelist[owner], \"Only whitelisted can call this function\");\n        require(workersCount > 0, \"Workers count should be greater than 0\");\n        require(maxCollateral > 0, \"Max collateral should be greater than 0\");\n        require(resourceConfigs[owner].workersCount == 0, \"Config already exists\");\n\n        uint amount = maxCollateral * workersCount;\n        ResourceConfig memory config = ResourceConfig({\n            minPriceByEpoch: minPriceByEpoch,\n            maxCollateral: maxCollateral,\n            workersCount: workersCount\n        });\n\n        for (uint i = 0; i < effectors.length; i++) {\n            bytes32 dealEffector = keccak256(abi.encodePacked(effectors[i].prefixes, effectors[i].hash));\n            _effectorsByOwner[owner].effectors[dealEffector] = true;\n        }\n\n        resourceConfigIds.push(bytes32(bytes20(owner)));\n\n        resourceConfigs[owner] = config;\n\n        globalConfig.fluenceToken().transferFrom(owner, address(this), amount);\n\n        emit ComputeProviderRegistered(owner, minPriceByEpoch, maxCollateral, workersCount, effectors);\n    }\n\n    function remove() external {\n        address owner = msg.sender;\n        ResourceConfig storage resourceConfig = resourceConfigs[owner];\n\n        require(resourceConfig.workersCount != 0, \"Config doesn't exist\");\n\n        uint amount = resourceConfig.maxCollateral * resourceConfig.workersCount;\n        delete resourceConfigs[owner];\n        resourceConfigIds.remove(bytes32(bytes20(owner)));\n\n        globalConfig.fluenceToken().transfer(owner, amount);\n    }\n\n    function matchWithDeal(ICore deal) external {\n        require(globalConfig.factory().isDeal(address(deal)), \"Deal is not from factory\");\n\n        IConfigModule config = deal.configModule();\n        uint requiredCollateral = config.requiredCollateral();\n        uint pricePerEpoch = config.pricePerEpoch();\n        uint maxWorkersPerProvider = config.maxWorkersPerProvider();\n        uint creationBlock = config.creationBlock();\n        CIDV1 memory appCID = config.appCID();\n\n        IWorkersModule workersModule = deal.workersModule();\n        uint freeWorkerSlots = config.targetWorkers() - workersModule.workersCount();\n\n        bytes32 currentId = resourceConfigIds.first();\n        while (currentId != bytes32(0x00) && freeWorkerSlots > 0) {\n            address computeProvider = address(bytes20(currentId));\n\n            ResourceConfig storage resourceConfig = resourceConfigs[computeProvider];\n            uint maxCollateral = resourceConfig.maxCollateral;\n            uint workersCount = resourceConfig.workersCount;\n\n            if (\n                resourceConfig.minPriceByEpoch > pricePerEpoch ||\n                maxCollateral < requiredCollateral ||\n                !_isEffectorsMatched(config, computeProvider)\n            ) {\n                currentId = resourceConfigIds.next(currentId);\n                continue;\n            }\n\n            uint joinedWorkers;\n            if (maxWorkersPerProvider > workersCount) {\n                joinedWorkers = workersCount;\n            } else {\n                joinedWorkers = maxWorkersPerProvider;\n            }\n\n            if (joinedWorkers > freeWorkerSlots) {\n                joinedWorkers = freeWorkerSlots;\n            }\n\n            uint newWorkersCount = workersCount - joinedWorkers;\n            if (newWorkersCount == 0) {\n                delete resourceConfigs[computeProvider];\n                resourceConfigIds.remove(bytes32(bytes20(computeProvider)));\n            } else {\n                workersCount = newWorkersCount;\n            }\n\n            globalConfig.fluenceToken().approve(address(workersModule), requiredCollateral * joinedWorkers);\n            for (uint j = 0; j < joinedWorkers; j++) {\n                workersModule.joinViaMatcher(computeProvider);\n            }\n\n            uint refoundByWorker = maxCollateral - requiredCollateral;\n            if (refoundByWorker > 0) {\n                globalConfig.fluenceToken().transfer(computeProvider, refoundByWorker * joinedWorkers);\n            }\n\n            freeWorkerSlots -= joinedWorkers;\n            currentId = resourceConfigIds.next(currentId);\n\n            emit Matched(computeProvider, address(deal), joinedWorkers, creationBlock, appCID);\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockParticleVerifyer.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nimport \"../global/interfaces/IParticleVerifyer.sol\";\nimport { Particle, PATId } from \"../deal/base/Types.sol\";\n\ncontract MockParticleVerifyer is IParticleVerifyer {\n    mapping(bytes32 => PATId[]) public particlePATIds;\n\n    function verifyParticle(Particle calldata particle) external returns (PATId[] memory) {\n        bytes32 hash = keccak256(abi.encodePacked(particle.air, particle.prevData, particle.params, particle.callResults));\n\n        return particlePATIds[hash];\n    }\n\n    function setPATIds(Particle calldata particle, PATId[] memory patIds) external {\n        bytes32 hash = keccak256(abi.encodePacked(particle.air, particle.prevData, particle.params, particle.callResults));\n\n        particlePATIds[hash] = patIds;\n    }\n}\n"
    },
    "contracts/utils/LinkedList.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nlibrary LinkedList {\n    struct Element {\n        bytes32 prev;\n        bytes32 next;\n    }\n\n    struct Bytes32List {\n        bytes32 _first;\n        bytes32 _last;\n        mapping(bytes32 => Element) _elements;\n    }\n\n    function _init(Bytes32List storage self, bytes32 key) private {\n        self._first = key;\n        self._last = key;\n    }\n\n    function push(Bytes32List storage self, bytes32 key) internal {\n        bytes32 oldLast = self._last;\n\n        require(key != bytes32(0x00), \"Key cannot be ZERO\");\n\n        require(!exist(self, key), \"Key already exists\");\n\n        if (oldLast == 0) {\n            _init(self, key);\n            return;\n        }\n\n        self._last = key;\n        self._elements[key].prev = oldLast;\n        self._elements[oldLast].next = key;\n    }\n\n    function first(Bytes32List storage self) internal view returns (bytes32) {\n        return self._first;\n    }\n\n    function last(Bytes32List storage self) internal view returns (bytes32) {\n        return self._last;\n    }\n\n    function remove(Bytes32List storage self, bytes32 key) internal {\n        Element memory element = self._elements[key];\n\n        require(_exist(self, element, key), \"Key does not exist\");\n\n        delete self._elements[key];\n\n        if (element.prev != bytes32(0x00)) {\n            self._elements[element.prev].next = element.next;\n        } else {\n            self._first = element.next;\n        }\n\n        if (element.next != bytes32(0x00)) {\n            self._elements[element.next].prev = element.prev;\n        } else {\n            self._last = element.prev;\n        }\n    }\n\n    function exist(Bytes32List storage self, bytes32 key) internal view returns (bool) {\n        return _exist(self, self._elements[key], key);\n    }\n\n    function _exist(Bytes32List storage self, Element memory element, bytes32 key) private view returns (bool) {\n        return element.prev != bytes32(0x00) || element.next != bytes32(0x00) || key == self._first || key == self._last;\n    }\n\n    function next(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\n        return self._elements[key].next;\n    }\n\n    function prev(Bytes32List storage self, bytes32 key) internal view returns (bytes32) {\n        return self._elements[key].prev;\n    }\n}\n"
    },
    "contracts/utils/WithdrawRequests.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.17;\n\nlibrary WithdrawRequests {\n    struct Requests {\n        Request[] _requests;\n        uint256 _indexOffset;\n    }\n\n    struct Request {\n        uint32 _createTimestamp;\n        uint224 _cumulative;\n    }\n\n    function getAt(Requests storage self, uint256 index) internal view returns (uint256 timestamp, uint256 amount) {\n        uint256 realLength = self._requests.length;\n        uint256 realIndex = index + self._indexOffset;\n\n        if (realIndex >= realLength) {\n            revert(\"Index is out of range\");\n        }\n\n        Request storage request = self._requests[realIndex];\n\n        amount = request._cumulative;\n        if (realIndex != 0) {\n            Request storage previousRequest = self._requests[realIndex - 1];\n            amount -= previousRequest._cumulative;\n        }\n\n        return (request._createTimestamp, amount);\n    }\n\n    function length(Requests storage self) internal view returns (uint256) {\n        return self._requests.length - self._indexOffset;\n    }\n\n    function getAmountBy(Requests storage self, uint256 timestamp) internal view returns (uint256) {\n        (, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\n        return amount;\n    }\n\n    function push(Requests storage self, uint256 amount) internal {\n        uint32 timestamp = uint32(block.timestamp);\n\n        require(amount > 0, \"Amount can't be zero\");\n        require(amount <= type(uint224).max, \"Amount is too big\");\n\n        //TODO: check overflow\n        uint224 uint224Amount = uint224(amount);\n        uint256 realLength = self._requests.length;\n        uint256 currentLength = realLength - self._indexOffset;\n\n        if (currentLength != 0) {\n            Request storage last = self._requests[realLength - 1];\n            if (last._createTimestamp == timestamp) {\n                last._cumulative += uint224Amount;\n                return;\n            } else {\n                self._requests.push(Request(timestamp, last._cumulative + uint224Amount));\n            }\n        } else {\n            self._requests.push(Request(timestamp, uint224Amount));\n        }\n    }\n\n    function removeFromLast(Requests storage self, uint256 amount) internal {\n        uint256 realLength = self._requests.length;\n        uint256 currentLength = realLength - self._indexOffset;\n\n        require(currentLength != 0, \"Requests is empty\");\n        require(amount <= type(uint224).max, \"Amount is too big\");\n\n        //TODO: check overflow\n        uint224 uint224Amount = uint224(amount);\n\n        Request storage last = self._requests[currentLength - 1];\n        uint256 currentAmount = last._cumulative;\n\n        require(currentAmount >= uint224Amount, \"Not enough amount\");\n\n        if (uint224Amount < currentAmount) {\n            last._cumulative -= uint224Amount;\n        } else {\n            self._requests.pop();\n        }\n    }\n\n    function confirmBy(Requests storage self, uint256 timestamp) internal returns (uint256) {\n        (uint256 index, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\n        self._indexOffset = index + 1;\n        return amount;\n    }\n\n    function _getIndexAndAmountBy(Requests storage self, uint256 timestamp) private view returns (uint256, uint256) {\n        uint256 realLength = self._requests.length;\n        uint256 indexOffset = self._indexOffset;\n\n        uint256 currentLength = realLength - indexOffset;\n\n        require(currentLength != 0, \"Requests is empty\");\n\n        (uint256 index, Request storage request) = _getIndexBy(self, indexOffset, realLength - 1, timestamp);\n        uint256 amount = request._cumulative;\n        if (indexOffset != 0) {\n            amount -= self._requests[indexOffset - 1]._cumulative;\n        }\n\n        return (index, amount);\n    }\n\n    function _getIndexBy(\n        Requests storage self,\n        uint256 startLow,\n        uint256 startHigh,\n        uint256 timestamp\n    ) private view returns (uint256, Request storage request) {\n        uint256 low = startLow;\n        uint256 high = startHigh;\n\n        uint256 mid = (low + high) / 2;\n        request = self._requests[mid];\n\n        while (low != high) {\n            uint256 midTimestamp = request._createTimestamp;\n            if (midTimestamp == timestamp) {\n                return (mid, request);\n            } else if (midTimestamp < timestamp) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n\n            mid = (low + high) / 2;\n            request = self._requests[mid];\n        }\n\n        return (mid, request);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}