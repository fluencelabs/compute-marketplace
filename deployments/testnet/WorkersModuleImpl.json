{
  "address": "0xc9A69177286cCAc29B00A90E4AF49771cf157698",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PATCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "PATRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "PDTRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "workerId",
          "type": "string"
        }
      ],
      "name": "PDTSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextWorkerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPATIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPATOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPDT",
      "outputs": [
        {
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "workerId",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getUnlockedAmountBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "joinViaMatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "PATId",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "peerId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "workerId",
          "type": "string"
        }
      ],
      "name": "setPDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2341fc174a123a027303474684e36fed50ec97392715f14a04c7fac90cf03085",
  "receipt": {
    "to": null,
    "from": "0x306543FC9eA9bd49CE047C7cD4Ba10b2a98B507c",
    "contractAddress": "0xc9A69177286cCAc29B00A90E4AF49771cf157698",
    "transactionIndex": 0,
    "gasUsed": "2504765",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1a1e8ece38ffd6dd6f0d42f65af68b37a24caaaf067b4b3e77acf12bd6fc194a",
    "transactionHash": "0x2341fc174a123a027303474684e36fed50ec97392715f14a04c7fac90cf03085",
    "logs": [],
    "blockNumber": 131443219,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "09b042013a0e7f52f00b8304d2e32516",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PATCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PATRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PDTRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"workerId\",\"type\":\"string\"}],\"name\":\"PDTSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextWorkerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPATIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPATOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPDT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"workerId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getUnlockedAmountBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"joinViaMatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PATId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"peerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"workerId\",\"type\":\"string\"}],\"name\":\"setPDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deal/WorkersModule.sol\":\"WorkersModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xac946730f979a447732a5bed58aa30c995ae666c3e1663b312ab5fd11dbe3eb6\",\"license\":\"MIT\"},\"contracts/deal/WorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"./base/ModuleBase.sol\\\";\\nimport \\\"../global/interfaces/IGlobalConfig.sol\\\";\\nimport \\\"../utils/WithdrawRequests.sol\\\";\\nimport \\\"./interfaces/IWorkersModule.sol\\\";\\nimport \\\"./interfaces/IConfigModule.sol\\\";\\nimport \\\"./interfaces/ICore.sol\\\";\\nimport \\\"./interfaces/IStatusModule.sol\\\";\\nimport \\\"./base/Types.sol\\\";\\n\\ncontract WorkersModuleState {\\n    struct OwnerInfo {\\n        uint256 patsCount;\\n    }\\n\\n    event PATCreated(PATId id, address owner);\\n    event PATRemoved(PATId id);\\n\\n    event PDTSet(PATId id, string peerId, string workerId);\\n    event PDTRemoved(PATId id);\\n\\n    event CollateralWithdrawn(address owner, uint256 amount);\\n\\n    bytes32 internal constant _PREFIX_PAT_SLOT = keccak256(\\\"network.fluence.WorkersManager.pat\\\");\\n    bytes32 internal constant _PAT_ID_PREFIX = keccak256(\\\"network.fluence.pat\\\");\\n\\n    uint256 internal _currentWorkers;\\n\\n    mapping(address => OwnerInfo) internal _ownersInfo;\\n    mapping(address => WithdrawRequests.Requests) internal _requests;\\n\\n    uint256 internal _nextWorkerIndex;\\n    uint256[] internal _freeIndexes;\\n    mapping(uint256 => PATId) internal _patIdByIndex;\\n    mapping(PATId => PDT) internal _pdtByPATId;\\n}\\n\\ncontract WorkersModuleInternal is WorkersModuleState, ModuleBase {\\n    using WithdrawRequests for WithdrawRequests.Requests;\\n    using SafeERC20 for IERC20;\\n\\n    function _initPAT(PAT storage pat, address owner, uint index, uint collateral, uint created) internal {\\n        pat.owner = owner;\\n        pat.index = index;\\n        pat.collateral = collateral;\\n        pat.created = created;\\n    }\\n\\n    function _getPAT(PATId id) internal pure returns (PAT storage pat) {\\n        bytes32 bytes32Id = PATId.unwrap(id);\\n\\n        bytes32 slot = bytes32(uint256(keccak256(abi.encodePacked(_PREFIX_PAT_SLOT, bytes32Id))) - 1);\\n\\n        assembly {\\n            pat.slot := slot\\n        }\\n\\n        return pat;\\n    }\\n\\n    function _clearPAT(PAT storage pat) internal {\\n        delete pat.owner;\\n        delete pat.collateral;\\n        delete pat.created;\\n        delete pat.index;\\n    }\\n\\n    function _createWithdrawRequest(address owner, uint256 amount) internal {\\n        _requests[owner].push(amount);\\n    }\\n\\n    function _createPAT(address owner, address collateralPayer) internal {\\n        uint256 patsCountByOwner = _ownersInfo[owner].patsCount;\\n        uint256 currentWorkers = _currentWorkers;\\n\\n        ICore core = _core();\\n        IConfigModule config = core.configModule();\\n\\n        require(currentWorkers < config.targetWorkers(), \\\"Target workers reached\\\");\\n        require(patsCountByOwner < config.maxWorkersPerProvider(), \\\"Max workers per provider reached\\\");\\n\\n        uint256 requiredCollateral = config.requiredCollateral();\\n        config.fluenceToken().safeTransferFrom(collateralPayer, address(this), requiredCollateral);\\n\\n        currentWorkers++;\\n\\n        IStatusModule statusController = core.statusModule();\\n\\n        {\\n            DealStatus status = statusController.status();\\n            if (status == DealStatus.WaitingForWorkers && currentWorkers >= config.minWorkers()) {\\n                status = DealStatus.Working;\\n                statusController.changeStatus(status);\\n            }\\n        }\\n\\n        uint index;\\n        uint freeIndexLength = _freeIndexes.length;\\n        if (freeIndexLength > 0) {\\n            index = _freeIndexes[freeIndexLength - 1];\\n            _freeIndexes.pop();\\n        } else {\\n            index = _nextWorkerIndex;\\n            _nextWorkerIndex++;\\n        }\\n\\n        PATId id = PATId.wrap(keccak256(abi.encodePacked(_PAT_ID_PREFIX, owner, index)));\\n        PAT storage pat = _getPAT(id);\\n        require(pat.owner == address(0x00), \\\"Id already used\\\");\\n\\n        _initPAT(pat, owner, index, requiredCollateral, config.globalConfig().epochManager().currentEpoch());\\n\\n        _patIdByIndex[index] = id;\\n        _ownersInfo[owner].patsCount = patsCountByOwner + 1;\\n        _currentWorkers = currentWorkers;\\n\\n        emit PATCreated(id, owner);\\n    }\\n}\\n\\ncontract WorkersModule is WorkersModuleInternal, IWorkersModule {\\n    using WithdrawRequests for WithdrawRequests.Requests;\\n    using SafeERC20 for IERC20;\\n\\n    function workersCount() external view returns (uint256) {\\n        return _currentWorkers;\\n    }\\n\\n    function getNextWorkerIndex() external view returns (uint256) {\\n        return _nextWorkerIndex;\\n    }\\n\\n    function getPATIndex(PATId id) external view returns (uint256) {\\n        return _getPAT(id).index;\\n    }\\n\\n    function getPATOwner(PATId id) external view returns (address) {\\n        return _getPAT(id).owner;\\n    }\\n\\n    function getPDT(PATId id) external view returns (string memory peerId, string memory workerId) {\\n        return (_pdtByPATId[id].peerId, _pdtByPATId[id].workerId);\\n    }\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256) {\\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\\n        return _requests[owner].getAmountBy(timestamp - globalConfig.withdrawTimeout());\\n    }\\n\\n    // ---- Public mutables ----\\n\\n    function join() external {\\n        _createPAT(msg.sender, msg.sender);\\n    }\\n\\n    function joinViaMatcher(address owner) external {\\n        require(address(_core().configModule().globalConfig().matcher()) == msg.sender, \\\"Only matcher can call this method\\\");\\n\\n        _createPAT(owner, msg.sender);\\n    }\\n\\n    function exit(PATId id) external {\\n        PAT storage pat = _getPAT(id);\\n        address owner = pat.owner;\\n\\n        require(owner == msg.sender, \\\"PAT doesn't exist\\\");\\n\\n        ICore core = _core();\\n        IConfigModule config = core.configModule();\\n\\n        IStatusModule statusController = core.statusModule();\\n\\n        _createWithdrawRequest(owner, pat.collateral);\\n\\n        uint256 currentWorkers = _currentWorkers - 1;\\n\\n        if (statusController.status() == DealStatus.Working && currentWorkers < config.minWorkers()) {\\n            statusController.changeStatus(DealStatus.WaitingForWorkers);\\n        }\\n\\n        uint patIndex = pat.index;\\n        _freeIndexes.push(patIndex);\\n\\n        _ownersInfo[owner].patsCount--;\\n        _currentWorkers = currentWorkers;\\n        _patIdByIndex[patIndex] = PATId.wrap(bytes32(0));\\n        _clearPAT(pat);\\n\\n        delete _pdtByPATId[id];\\n\\n        emit PDTRemoved(id);\\n        emit PATRemoved(id);\\n    }\\n\\n    function withdrawCollateral(address owner) external {\\n        IGlobalConfig globalConfig = _core().configModule().globalConfig();\\n\\n        uint256 amount = _requests[owner].confirmBy(block.timestamp - globalConfig.withdrawTimeout());\\n\\n        globalConfig.fluenceToken().safeTransfer(owner, amount);\\n\\n        emit CollateralWithdrawn(owner, amount);\\n    }\\n\\n    function setPDT(PATId id, string calldata peerId, string calldata workerId) external {\\n        _pdtByPATId[id] = PDT(peerId, workerId);\\n\\n        emit PDTSet(id, peerId, workerId);\\n    }\\n}\\n\",\"keccak256\":\"0x0d390cc71cb8cae04e8ab8fe882b77a42421ffcb1ce68251f0aa39d7b878729b\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/ModuleBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\n\\ncontract ModuleBase is UUPSUpgradeable {\\n    bytes32 private constant _CORE_SLOT = keccak256(\\\"network.fluence.proxy.core\\\");\\n\\n    modifier onlyModule(Module module) {\\n        require(_core().moduleByType(module) == msg.sender, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyModules(Module[] calldata modules) {\\n        Module callerModule = _core().moduleByAddress(msg.sender);\\n\\n        bool isRequiredModule = false;\\n        for (uint256 i = 0; i < modules.length; i++) {\\n            if (modules[i] != callerModule) {\\n                continue;\\n            }\\n\\n            isRequiredModule = true;\\n            break;\\n        }\\n\\n        require(isRequiredModule, \\\"ModuleBase: caller is not required module\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_core().owner() == msg.sender, \\\"ModuleBase: caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCore() {\\n        require(address(_core()) == msg.sender, \\\"ModuleBase: caller is not core\\\");\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyCore {\\n        //TODO: check that new implementation from DAO\\n    }\\n\\n    function _core() internal view returns (ICore) {\\n        return ICore(StorageSlot.getAddressSlot(_CORE_SLOT).value);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x001458f0530bf630f1c300058ea8d14bbffdd850516b98e4a98a0246ac415e82\",\"license\":\"Apache-2.0\"},\"contracts/deal/base/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nenum Module {\\n    None,\\n    Config,\\n    Payment,\\n    Status,\\n    Workers\\n}\\n\\nstruct Particle {\\n    string air;\\n    string prevData;\\n    string params;\\n    string callResults;\\n}\\n\\nstruct PAT {\\n    uint256 index;\\n    address owner;\\n    uint256 collateral;\\n    uint256 created;\\n}\\n\\nstruct PDT {\\n    string peerId;\\n    string workerId;\\n}\\n\\nstruct CIDV1 {\\n    bytes4 prefixes;\\n    bytes32 hash;\\n}\\n\\nenum DealStatus {\\n    WaitingForWorkers,\\n    Working\\n}\\n\\ntype PATId is bytes32;\\n\",\"keccak256\":\"0xd32e425ecf1ce5ca9bb538b95a0a86308dd27255469d4c945b39752c30227cfa\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IConfigModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\nimport \\\"../../global/interfaces/IParticleVerifyer.sol\\\";\\nimport \\\"../../global/interfaces/IGlobalConfig.sol\\\";\\n\\ninterface IConfigModule {\\n    function initialize(\\n        IERC20 paymentToken_,\\n        uint256 pricePerEpoch_,\\n        uint256 requiredCollateral_,\\n        CIDV1 calldata appCID_,\\n        uint256 minWorkers_,\\n        uint256 maxWorkersPerProvider_,\\n        uint256 targetWorkers_,\\n        CIDV1[] calldata effectorWasmsCids_\\n    ) external;\\n\\n    function globalConfig() external view returns (IGlobalConfig);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function particleVerifyer() external view returns (IParticleVerifyer);\\n\\n    function paymentToken() external view returns (IERC20);\\n\\n    function pricePerEpoch() external view returns (uint256);\\n\\n    function requiredCollateral() external view returns (uint256);\\n\\n    function appCID() external view returns (CIDV1 memory);\\n\\n    function minWorkers() external view returns (uint256);\\n\\n    function maxWorkersPerProvider() external view returns (uint256);\\n\\n    function targetWorkers() external view returns (uint256);\\n\\n    function creationBlock() external view returns (uint256);\\n\\n    function effectors() external view returns (CIDV1[] memory);\\n\\n    function setAppCID(CIDV1 calldata appCID_) external;\\n}\\n\",\"keccak256\":\"0x7732f67045048e33830c0d726f727f9b6ff3d6404f072570a6c6eddee4059418\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IConfigModule.sol\\\";\\nimport \\\"./IPaymentModule.sol\\\";\\nimport \\\"./IStatusModule.sol\\\";\\nimport \\\"./IWorkersModule.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface ICore {\\n    function initialize(IConfigModule config_, IPaymentModule payment_, IStatusModule statys_, IWorkersModule workers_) external;\\n\\n    function moduleByType(Module module) external view returns (address);\\n\\n    function moduleByAddress(address module) external view returns (Module);\\n\\n    function configModule() external view returns (IConfigModule);\\n\\n    function paymentModule() external view returns (IPaymentModule);\\n\\n    function statusModule() external view returns (IStatusModule);\\n\\n    function workersModule() external view returns (IWorkersModule);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xc8f2c2cd6c9448dfdbfd779e8150291980e37bceb075de40b4d0253aa0e88078\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IPaymentModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IPaymentModule {\\n    function balance() external view returns (uint256);\\n\\n    function rewardAmount(bytes32 particleHash, PATId patId) external view returns (uint);\\n\\n    function depositToPaymentBalance(uint256 amount) external;\\n\\n    function withdrawFromPaymentBalance(uint256 amount) external;\\n\\n    function commitParticle(Particle calldata particle) external;\\n\\n    function withdrawReward(PATId patId, bytes32[] calldata particlesHashes) external;\\n}\\n\",\"keccak256\":\"0x1cabc17d173bff8cd646c562f989a69826dd0a563c93fb14c096da2297386358\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IStatusModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { DealStatus } from \\\"../base/Types.sol\\\";\\n\\ninterface IStatusModule {\\n    event StatusChanged(DealStatus newStatus);\\n\\n    function status() external view returns (DealStatus);\\n\\n    function startWorkingEpoch() external view returns (uint256);\\n\\n    function changeStatus(DealStatus status_) external;\\n}\\n\",\"keccak256\":\"0x8a8377364730135a67039b942fe05c4d6ea99cd1d2c492179965dbbebc70aee3\",\"license\":\"Apache-2.0\"},\"contracts/deal/interfaces/IWorkersModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../base/Types.sol\\\";\\n\\ninterface IWorkersModule {\\n    function workersCount() external view returns (uint256);\\n\\n    function getNextWorkerIndex() external view returns (uint256);\\n\\n    function getPATIndex(PATId id) external view returns (uint256);\\n\\n    function getPATOwner(PATId id) external view returns (address);\\n\\n    function getPDT(PATId id) external view returns (string memory peerId, string memory workerId);\\n\\n    function getUnlockedAmountBy(address owner, uint256 timestamp) external view returns (uint256);\\n\\n    function join() external;\\n\\n    function joinViaMatcher(address owner) external;\\n\\n    function exit(PATId id) external;\\n\\n    function withdrawCollateral(address owner) external;\\n\\n    function setPDT(PATId id, string calldata peerId, string calldata workerId) external;\\n}\\n\",\"keccak256\":\"0xa36af9ddfecb54d12c933f5608194d889de93126f0108ffb6b8b91c7f6c57ddd\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IEpochManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\ninterface IEpochManager {\\n    function epochDuration() external view returns (uint256);\\n\\n    function currentEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2dce187734fef8462cf222ec53569253aae570020578c7d470545b476ac3e87d\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IFactory {\\n    function isDeal(address addr) external view returns (bool);\\n\\n    function createDeal(\\n        uint256 minWorkers_,\\n        uint256 targetWorkers_,\\n        CIDV1 calldata appCID_,\\n        CIDV1[] calldata effectors\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8c2c4ac19b466b701a282339069aa2df46c98c70b74d587afbfbf53ed0905a14\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IGlobalConfig.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IEpochManager.sol\\\";\\nimport \\\"./IMatcher.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IGlobalConfig {\\n    function owner() external view returns (address);\\n\\n    function fluenceToken() external view returns (IERC20);\\n\\n    function withdrawTimeout() external view returns (uint);\\n\\n    function epochManager() external view returns (IEpochManager);\\n\\n    function matcher() external view returns (IMatcher);\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0xf5f3740cd208be3ee6019fefb519e46757d546b224f08dacf462250871aafa06\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../deal/interfaces/ICore.sol\\\";\\n\\ninterface IMatcher {\\n    function matchWithDeal(ICore deal) external;\\n}\\n\",\"keccak256\":\"0xe1e0f00c2f2bc64b78f90a39bdfe978bdf9f33ada219c1ff53650fc851301b95\",\"license\":\"Apache-2.0\"},\"contracts/global/interfaces/IParticleVerifyer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nimport { Particle, PATId } from \\\"../../deal/base/Types.sol\\\";\\n\\ninterface IParticleVerifyer {\\n    function verifyParticle(Particle calldata particle) external returns (PATId[] memory);\\n}\\n\",\"keccak256\":\"0x412b05804fad54d070e405c6992e463cccf486a12858f4332659a5e3fc69055b\",\"license\":\"Apache-2.0\"},\"contracts/utils/WithdrawRequests.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.17;\\n\\nlibrary WithdrawRequests {\\n    struct Requests {\\n        Request[] _requests;\\n        uint256 _indexOffset;\\n    }\\n\\n    struct Request {\\n        uint32 _createTimestamp;\\n        uint224 _cumulative;\\n    }\\n\\n    function getAt(Requests storage self, uint256 index) internal view returns (uint256 timestamp, uint256 amount) {\\n        uint256 realLength = self._requests.length;\\n        uint256 realIndex = index + self._indexOffset;\\n\\n        if (realIndex >= realLength) {\\n            revert(\\\"Index is out of range\\\");\\n        }\\n\\n        Request storage request = self._requests[realIndex];\\n\\n        amount = request._cumulative;\\n        if (realIndex != 0) {\\n            Request storage previousRequest = self._requests[realIndex - 1];\\n            amount -= previousRequest._cumulative;\\n        }\\n\\n        return (request._createTimestamp, amount);\\n    }\\n\\n    function length(Requests storage self) internal view returns (uint256) {\\n        return self._requests.length - self._indexOffset;\\n    }\\n\\n    function getAmountBy(Requests storage self, uint256 timestamp) internal view returns (uint256) {\\n        (, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\\n        return amount;\\n    }\\n\\n    function push(Requests storage self, uint256 amount) internal {\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        require(amount > 0, \\\"Amount can't be zero\\\");\\n        require(amount <= type(uint224).max, \\\"Amount is too big\\\");\\n\\n        //TODO: check overflow\\n        uint224 uint224Amount = uint224(amount);\\n        uint256 realLength = self._requests.length;\\n        uint256 currentLength = realLength - self._indexOffset;\\n\\n        if (currentLength != 0) {\\n            Request storage last = self._requests[realLength - 1];\\n            if (last._createTimestamp == timestamp) {\\n                last._cumulative += uint224Amount;\\n                return;\\n            } else {\\n                self._requests.push(Request(timestamp, last._cumulative + uint224Amount));\\n            }\\n        } else {\\n            self._requests.push(Request(timestamp, uint224Amount));\\n        }\\n    }\\n\\n    function removeFromLast(Requests storage self, uint256 amount) internal {\\n        uint256 realLength = self._requests.length;\\n        uint256 currentLength = realLength - self._indexOffset;\\n\\n        require(currentLength != 0, \\\"Requests is empty\\\");\\n        require(amount <= type(uint224).max, \\\"Amount is too big\\\");\\n\\n        //TODO: check overflow\\n        uint224 uint224Amount = uint224(amount);\\n\\n        Request storage last = self._requests[currentLength - 1];\\n        uint256 currentAmount = last._cumulative;\\n\\n        require(currentAmount >= uint224Amount, \\\"Not enough amount\\\");\\n\\n        if (uint224Amount < currentAmount) {\\n            last._cumulative -= uint224Amount;\\n        } else {\\n            self._requests.pop();\\n        }\\n    }\\n\\n    function confirmBy(Requests storage self, uint256 timestamp) internal returns (uint256) {\\n        (uint256 index, uint256 amount) = _getIndexAndAmountBy(self, timestamp);\\n        self._indexOffset = index + 1;\\n        return amount;\\n    }\\n\\n    function _getIndexAndAmountBy(Requests storage self, uint256 timestamp) private view returns (uint256, uint256) {\\n        uint256 realLength = self._requests.length;\\n        uint256 indexOffset = self._indexOffset;\\n\\n        uint256 currentLength = realLength - indexOffset;\\n\\n        require(currentLength != 0, \\\"Requests is empty\\\");\\n\\n        (uint256 index, Request storage request) = _getIndexBy(self, indexOffset, realLength - 1, timestamp);\\n        uint256 amount = request._cumulative;\\n        if (indexOffset != 0) {\\n            amount -= self._requests[indexOffset - 1]._cumulative;\\n        }\\n\\n        return (index, amount);\\n    }\\n\\n    function _getIndexBy(\\n        Requests storage self,\\n        uint256 startLow,\\n        uint256 startHigh,\\n        uint256 timestamp\\n    ) private view returns (uint256, Request storage request) {\\n        uint256 low = startLow;\\n        uint256 high = startHigh;\\n\\n        uint256 mid = (low + high) / 2;\\n        request = self._requests[mid];\\n\\n        while (low != high) {\\n            uint256 midTimestamp = request._createTimestamp;\\n            if (midTimestamp == timestamp) {\\n                return (mid, request);\\n            } else if (midTimestamp < timestamp) {\\n                low = mid + 1;\\n            } else {\\n                high = mid - 1;\\n            }\\n\\n            mid = (low + high) / 2;\\n            request = self._requests[mid];\\n        }\\n\\n        return (mid, request);\\n    }\\n}\\n\",\"keccak256\":\"0x8590be01c5c1c8a70eac20c611c0ed6dade5416b1c43070f2b7cef460dd540e7\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100315730608052612c99908161003782396080518181816108870152818161099e0152610ffa0152f35b600080fdfe604060c081526004908136101561001557600080fd5b600091823560e01c80630ca36263146113a25780631268f880146113455780633659cfe614610fc55780633a75c39214610cbf5780634f1ef2861461093e57806352d1902d1461085d57806375ddd19a1461083e578063928d300e1461054b578063aa5a0bcd14610523578063b688a36314610508578063be18cf7f146104e7578063c79d469d146104a6578063cb35a195146102e05763e5e63b31146100bb57600080fd5b346102dc576020806003193601126102d8576100d5611853565b9273ffffffffffffffffffffffffffffffffffffffff8383827fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168451928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa908115610284578291859189916102bb575b50868551809481937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa9081156102845782918591899161028e575b50868551809581937f7e7e66b2000000000000000000000000000000000000000000000000000000008352165afa918215610284578792610248575b50339116036101e157846101de3386611e32565b80f35b60849350519162461bcd60e51b8352820152602160248201527f4f6e6c79206d6174636865722063616e2063616c6c2074686973206d6574686f60448201527f64000000000000000000000000000000000000000000000000000000000000006064820152fd5b9091508381813d831161027d575b6102608183611906565b81010312610279575181811681036102795790386101ca565b8680fd5b503d610256565b83513d89823e3d90fd5b6102ae9150823d84116102b4575b6102a68183611906565b810190611d6d565b3861018e565b503d61029c565b6102d29150823d84116102b4576102a68183611906565b3861014e565b8380fd5b8280fd5b5091346104a357816003193601126104a3576102fa611853565b9273ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541694845180967f68f1e99a00000000000000000000000000000000000000000000000000000000825281856020998a935afa90811561047c5783929188918791610486575b50858851809581937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa91821561047c578792918491879361045d575b5016855260028252858520938651809481937f9c15d1a2000000000000000000000000000000000000000000000000000000008352165afa928315610452579261041c575b5061040e61041492602435611bfc565b90612af3565b915191825250f35b91508382813d831161044b575b6104338183611906565b810103126104465790519061040e6103fe565b600080fd5b503d610429565b8451903d90823e3d90fd5b610475919350843d86116102b4576102a68183611906565b91386103b9565b86513d87823e3d90fd5b61049d9150823d84116102b4576102a68183611906565b38610378565b80fd5b5091346104a35760206003193601126104a3575073ffffffffffffffffffffffffffffffffffffffff60016104dd60209435611c1f565b0154169051908152f35b505034610504578160031936011261050457602091549051908152f35b5080fd5b83346104a357806003193601126104a3576101de3333611e32565b5091346104a35760206003193601126104a3575061054360209235611c1f565b549051908152f35b50346102dc576020806003193601126102d857610566611853565b9073ffffffffffffffffffffffffffffffffffffffff928082857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168751928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa90811561081757859184918991610821575b50838851809881937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa9485156108175787956107f8575b50808416875260028352858720941685517f9c15d1a200000000000000000000000000000000000000000000000000000000815283818481855afa9081156107ee5788916107bf575b506106736106799142611bfc565b86612af3565b95600182018092116107ac5790600185939201558651928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa9081156107a25761077f927fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d9692610752928991610785575b5083517fa9059cbb000000000000000000000000000000000000000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff861660248301526044808301889052825261074d606483611906565b612723565b51928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a180f35b61079c9150823d84116102b4576102a68183611906565b386106f1565b85513d88823e3d90fd5b602489601186634e487b7160e01b835252fd5b90508381813d83116107e7575b6107d68183611906565b810103126104465751610673610665565b503d6107cc565b87513d8a823e3d90fd5b610810919550833d85116102b4576102a68183611906565b933861061c565b86513d89823e3d90fd5b6108389150823d84116102b4576102a68183611906565b386105e0565b5050346105045781600319360112610504576020906003549051908152f35b5082346104a357806003193601126104a3575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036108d657602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b5090806003193601126102dc57610953611853565b9060243567ffffffffffffffff8111610cbb5736602382011215610cbb576109849036906024818701359101611945565b9073ffffffffffffffffffffffffffffffffffffffff91827f000000000000000000000000000000000000000000000000000000000000000016926109cb8430141561197c565b6109fa7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9482865416146119ed565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303610c78577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610a5c57505050506101de9150611a5e565b84929394168351947f52d1902d00000000000000000000000000000000000000000000000000000000865260209586818981865afa60009181610c49575b50610b07576084888888519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9691929394959603610be15750610b1d83611a5e565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590610bd9575b610b59575b5050505080f35b60008091610bcf957f206661696c656400000000000000000000000000000000000000000000000000865196610b8e886118ea565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8389015287015281519101845af4610bc9611b30565b91611b60565b5038808080610b52565b506001610b4d565b6084908686519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918882813d8311610c71575b610c608183611906565b810103126104a35750519038610a9a565b503d610c56565b606486602085519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b8480fd5b509190346105045760606003193601126105045767ffffffffffffffff926024358481116102d857610cf49036908301611876565b9290604435868111610fc157610d0d9036908501611876565b91835195610d1a876118ce565b610d25368284611945565b8752610d32368585611945565b986020978881019a8b5287358a5260068952868a209051805190838211610f145790808c8c93610d628654611c6e565b601f95868211610f94575b50508d91858411600114610f325792610f27575b50506000198260011b9260031b1c19161782555b60018092019b518051938411610f14578b8b8e84610db38254611c6e565b91818311610edb575b50505050508a918411600114610e4c5792610e32949281808e9f947f799dc8187fd3f8ba56efd0df5ed4f1de4e16e69f4e0e300c315cf6a3da0603089f9761077f9d9c9b9a9893610e3f575b505060001991921b9260031b1c19161790555b60608651998a99358a528901526060880191612896565b9285840390860152612896565b0151915060001938610e08565b8c8c528a8c20909c9391601f1983168d5b818110610ec657509183917f799dc8187fd3f8ba56efd0df5ed4f1de4e16e69f4e0e300c315cf6a3da0603089e9f61077f9c9b9a999795610e3299979510610ead575b505050811b019055610e1b565b015160001960f88460031b161c19169055388080610ea0565b8f830151845592850192918d01918d01610e5d565b848491610f009652209181890160051c8301938910610f0b575b0160051c0190612833565b8b8b388f8590610dbc565b92508192610ef5565b60248c60418c634e487b7160e01b835252fd5b015190503880610d81565b8681528e812093601f1916908f5b828210610f7d575050908460019594939210610f64575b505050811b018255610d95565b015160001960f88460031b161c19169055388080610f57565b60018596829396860151815501950193018f610f40565b610fba91888552878286209181880160051c8301938810610f0b570160051c0190612833565b388e610d6d565b8580fd5b5090346102dc576020806003193601126102d857610fe1611853565b9173ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000166110268130141561197c565b6110557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9183835416146119ed565b817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303611303578251908482019282841067ffffffffffffffff8511176112ee578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156110d9575050505050506101de9150611a5e565b8693949596169085517f52d1902d00000000000000000000000000000000000000000000000000000000815287818a81865afa600091816112bf575b50611182576084898989519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b979192949795939503611257575061119984611a5e565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061124f575b6111d6575b505050505080f35b611244946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8695519861122d8a6118ea565b60278a528901528701525190845af4610bc9611b30565b5038808080806111ce565b5060006111c9565b6084908684519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d83116112e7575b6112d68183611906565b810103126104a35750519038611115565b503d6112cc565b604188634e487b7160e01b6000525260246000fd5b6064868585519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b50346102dc5760206003193601126102dc57358252600660205261139e61137d61137760018480872096200194611ca8565b93611ca8565b6113908351948486958652850190611813565b908382036020850152611813565b0390f35b5091903461050457602090816003193601126102dc578335906113c482611c1f565b6001810173ffffffffffffffffffffffffffffffffffffffff9687825416903382036117d157887fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416908551907f68f1e99a00000000000000000000000000000000000000000000000000000000825288828281865afa9182156117a85789908b936117b2575b508192938851928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa9081156117a8578a9161178b575b50600286019a6114a38c54868d5260028c52898d20612961565b8a5493600019928386019586116117785782169189517f200d2ed20000000000000000000000000000000000000000000000000000000081528c818781875afa90811561176c578e9161173f575b50600281101561172c5760018d911492836116a7575b50505061163f575b5085549382546801000000000000000081101561162c576115368160018893018655611dc0565b819291549060031b85811b9283911b169119161790558a5260018952868a2091825490811561161957509260009695928795927f444a3a44058938b8969bdac08b1dda569100d49a708e17765e90dafd7be093319c9d950190558b558a526005885289868120557fffffffffffffffffffffffff000000000000000000000000000000000000000081541690555581600382015555818552600683526115e960018287206115e38161284a565b0161284a565b7f0bbd2d73af8b098a5b3a3bfdf635f97573da5d6d686c5a1f770f013fb610348d838251848152a151908152a180f35b8b6011602492634e487b7160e01b835252fd5b60248c604186634e487b7160e01b835252fd5b803b156116a3578a809160248a51809481937f95bc953800000000000000000000000000000000000000000000000000000000835281898401525af18015611699571561150f57611692909a919a6118a4565b983861150f565b88513d8d823e3d90fd5b8a80fd5b90919250858b51809481937f2db31193000000000000000000000000000000000000000000000000000000008352165afa908115611722578c916116f1575b508410388b81611507565b90508a81813d831161171b575b6117088183611906565b810103126117175751386116e6565b8b80fd5b503d6116fe565b89513d8e823e3d90fd5b60248e602188634e487b7160e01b835252fd5b61175f91508d803d10611765575b6117578183611906565b810190611da8565b386114f1565b503d61174d565b8e8c51903d90823e3d90fd5b60248d601187634e487b7160e01b835252fd5b6117a29150893d8b116102b4576102a68183611906565b38611489565b87513d8c823e3d90fd5b8293506117cb90823d84116102b4576102a68183611906565b9261144c565b6064908786519162461bcd60e51b8352820152601160248201527f50415420646f65736e27742065786973740000000000000000000000000000006044820152fd5b919082519283825260005b84811061183f575050601f19601f8460006020809697860101520116010190565b60208183018101518483018201520161181e565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361044657565b9181601f840112156104465782359167ffffffffffffffff8311610446576020838186019501011161044657565b67ffffffffffffffff81116118b857604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176118b857604052565b6060810190811067ffffffffffffffff8211176118b857604052565b90601f601f19910116810190811067ffffffffffffffff8211176118b857604052565b67ffffffffffffffff81116118b857601f01601f191660200190565b92919261195182611929565b9161195f6040519384611906565b829481845281830111610446578281602093846000960137010152565b1561198357565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b156119f457565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611ac65773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611b5b573d90611b4182611929565b91611b4f6040519384611906565b82523d6000602084013e565b606090565b91929015611bc15750815115611b74575090565b3b15611b7d5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015611bd45750805190602001fd5b611bf89060405191829162461bcd60e51b8352602060048401526024830190611813565b0390fd5b91908203918211611c0957565b634e487b7160e01b600052601160045260246000fd5b60405160208101917f4ec9908308216b4c7f2662384140ebfbfcc0766c9877c0140af195bd95ed0c818352604082015260408152611c5c816118ea565b5190206000198101908111611c095790565b90600182811c92168015611c9e575b6020831014611c8857565b634e487b7160e01b600052602260045260246000fd5b91607f1691611c7d565b9060405191826000825492611cbc84611c6e565b908184526001948581169081600014611d2b5750600114611ce8575b5050611ce692500383611906565b565b9093915060005260209081600020936000915b818310611d13575050611ce693508201013880611cd8565b85548884018501529485019487945091830191611cfb565b9050611ce69550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880611cd8565b90816020910312610446575173ffffffffffffffffffffffffffffffffffffffff811681036104465790565b6000198114611c095760010190565b90816020910312610446575160028110156104465790565b600454811015611df75760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b8054821015611df75760005260206000200190600090565b91908201809211611c0957565b91909160009273ffffffffffffffffffffffffffffffffffffffff8083168552602090600182526040938487205493875494837fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654169187517f68f1e99a000000000000000000000000000000000000000000000000000000008152608060a052600460a051528681600481875afa908115612719579086918c916126fc575b501688517f2943dcab000000000000000000000000000000000000000000000000000000008152878160a0515181855afa9081156124d3578c916126cf575b5088101561268a5788517f8a0c725b000000000000000000000000000000000000000000000000000000008152878160a0515181855afa9081156124d3578c9161265d575b50831015612619578851977fb53105a3000000000000000000000000000000000000000000000000000000008952878960a0515181855afa9889156124d3578c996125ea575b508951927fac027f97000000000000000000000000000000000000000000000000000000008452888460a0515181865afa93841561258e578d946125cb575b50878b51917f23b872dd000000000000000000000000000000000000000000000000000000008b8401521660248201523060448201528960648201526064815260a081019367ffffffffffffffff94828110868211176125b5578c5261204a929161204591612723565b611d99565b93878a5180927f9e4b35540000000000000000000000000000000000000000000000000000000082528160a05151915afa9081156124d3579087918d91612598575b501689517f200d2ed2000000000000000000000000000000000000000000000000000000008152888160a0515181855afa90811561258e578d91612571575b50600281101561255b57908c9115806124dd575b61246f575b505060a051515491821561245957600019928381019081116124435761210990611dc0565b90549060031b1c9260a0515154801561242d5781019061212882611dc0565b909182549160031b1b1916905560a05151555b8951888101917fc8aaee8b33ec932cbcaafea157708df26b70956d01af32ed14988794c643e4e383527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008860601b168c8301528460548301526054825260a05182019082821090821117612415578b52519020976121b889611c1f565b90600182018054938985166123d057908e9392918b8e5180927fa7c1abe00000000000000000000000000000000000000000000000000000000082528160a05151915afa9081156123a7578b8f8e9288946123b1575b5051928380927fe2d2bfe300000000000000000000000000000000000000000000000000000000825260a0515192165afa9081156123a7578b8f8e92889461236d575b5051928380927f7667180800000000000000000000000000000000000000000000000000000000825260a0515192165afa9485156123625794612332575b50600393947fffffffffffffffffffffffff00000000000000000000000000000000000000008b8b1691161790558482556002820155015589526005855285878a20556001810180911161231c57977ff9afe7870c7ad4010cedbe87273d2282bcedb40f6734c102d53059c8da187bdf9798848416825260018652878220555584519384521690820152a1565b602489634e487b7160e01b8152601160a0515152fd5b93508a84813d831161235b575b6123498183611906565b8101031261044657600393519361228f565b503d61233f565b8e51903d90823e3d90fd5b9350505081813d83116123a0575b6123858183611906565b81010312610cbb57518a81168103610cbb578b8b8f38612251565b503d61237b565b8e513d87823e3d90fd5b6123c9919450833d85116102b4576102a68183611906565b923861220e565b60648b8e519062461bcd60e51b825260a05151820152600f60248201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b634e487b7160e01b600052604160a051515260246000fd5b60248e634e487b7160e01b8152603160a0515152fd5b60248d634e487b7160e01b8152601160a0515152fd5b600354925061246783611d99565b60035561213b565b803b1561050457819060248c51809481937f95bc9538000000000000000000000000000000000000000000000000000000008352600160a051518401525af180156124d3576124c0575b8b906120e4565b6124cc909b919b6118a4565b99386124b9565b8a513d8e823e3d90fd5b508a517f2db31193000000000000000000000000000000000000000000000000000000008152898160a0515181875afa908115612551578391612524575b508610156120df565b90508981813d831161254a575b61253b8183611906565b810103126102dc57513861251b565b503d612531565b8c513d85823e3d90fd5b60248d634e487b7160e01b8152602160a0515152fd5b6125889150893d8b11611765576117578183611906565b386120cb565b8b513d8f823e3d90fd5b6125af9150893d8b116102b4576102a68183611906565b3861208c565b60248f634e487b7160e01b8152604160a0515152fd5b6125e3919450893d8b116102b4576102a68183611906565b9238611fdb565b9098508781813d8311612612575b6126028183611906565b8101031261171757519738611f9c565b503d6125f8565b6064878a519062461bcd60e51b82528060a0515183015260248201527f4d617820776f726b657273207065722070726f766964657220726561636865646044820152fd5b90508781813d8311612683575b6126748183611906565b81010312611717575138611f56565b503d61266a565b6064878a519062461bcd60e51b825260a05151820152601660248201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b90508781813d83116126f5575b6126e68183611906565b81010312611717575138611f11565b503d6126dc565b6127139150883d8a116102b4576102a68183611906565b38611ed2565b89513d8d823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff169061278a604051612749816118ce565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1610bc9611b30565b80519182159184831561280f575b5050509050156127a55750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312610504578201519081151582036104a3575080388084612798565b81811061283e575050565b60008155600101612833565b6128548154611c6e565b908161285e575050565b81601f60009311600114612870575055565b8183526020832061288c91601f0160051c810190600101612833565b8160208120915555565b601f8260209493601f19938186528686013760008582860101520116010190565b8054680100000000000000008110156118b8576128d991600182018155611e0d565b61291b57815160209283015190921b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b634e487b7160e01b600052600060045260246000fd5b9190917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80809416911601918211611c0957565b63ffffffff90814216908315612aaf577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff93848111612a6b5784169381546129a9600184015482611bfc565b15612a49576000198101908111611c09576129c49083611e0d565b508054909481168403612a1a57505050506129e6611ce692825460201c612931565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b612a2f919293945094611ce69560201c612931565b60405193612a3c856118ce565b84521660208301526128b7565b5050909150611ce69260405192612a5f846118ce565b835260208301526128b7565b606460405162461bcd60e51b815260206004820152601160248201527f416d6f756e7420697320746f6f206269670000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f416d6f756e742063616e2774206265207a65726f0000000000000000000000006044820152fd5b9190918054600182015490612b088282611bfc565b15612b685760001994858201918211611c0957612b26918385612bac565b9290925460201c9482612b3b575b5050509190565b8293959201928311611c0957612b5f92612b5491611e0d565b505460201c90611bfc565b91388080612b34565b606460405162461bcd60e51b815260206004820152601160248201527f526571756573747320697320656d7074790000000000000000000000000000006044820152fd5b9093929091612bbb8186611e25565b90600191821c93612bcc8582611e0d565b50965b828103612bdf5750505050509190565b875463ffffffff16858103612bf8575050505050509190565b8598509592949091939510600014612c4e5750838101809111612c3957925b612c218385611e25565b811c93612c2e8584611e0d565b509693919290612bcf565b60246000634e487b7160e01b81526011600452fd5b9392506000198101908111612c395791612c1756fea26469706673582212201d17f2bac584bc93058b0ad3916c7d90ab1bb5de1e5a031fe572f8e5a3bb4e0964736f6c63430008110033",
  "deployedBytecode": "0x604060c081526004908136101561001557600080fd5b600091823560e01c80630ca36263146113a25780631268f880146113455780633659cfe614610fc55780633a75c39214610cbf5780634f1ef2861461093e57806352d1902d1461085d57806375ddd19a1461083e578063928d300e1461054b578063aa5a0bcd14610523578063b688a36314610508578063be18cf7f146104e7578063c79d469d146104a6578063cb35a195146102e05763e5e63b31146100bb57600080fd5b346102dc576020806003193601126102d8576100d5611853565b9273ffffffffffffffffffffffffffffffffffffffff8383827fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168451928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa908115610284578291859189916102bb575b50868551809481937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa9081156102845782918591899161028e575b50868551809581937f7e7e66b2000000000000000000000000000000000000000000000000000000008352165afa918215610284578792610248575b50339116036101e157846101de3386611e32565b80f35b60849350519162461bcd60e51b8352820152602160248201527f4f6e6c79206d6174636865722063616e2063616c6c2074686973206d6574686f60448201527f64000000000000000000000000000000000000000000000000000000000000006064820152fd5b9091508381813d831161027d575b6102608183611906565b81010312610279575181811681036102795790386101ca565b8680fd5b503d610256565b83513d89823e3d90fd5b6102ae9150823d84116102b4575b6102a68183611906565b810190611d6d565b3861018e565b503d61029c565b6102d29150823d84116102b4576102a68183611906565b3861014e565b8380fd5b8280fd5b5091346104a357816003193601126104a3576102fa611853565b9273ffffffffffffffffffffffffffffffffffffffff807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e96541694845180967f68f1e99a00000000000000000000000000000000000000000000000000000000825281856020998a935afa90811561047c5783929188918791610486575b50858851809581937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa91821561047c578792918491879361045d575b5016855260028252858520938651809481937f9c15d1a2000000000000000000000000000000000000000000000000000000008352165afa928315610452579261041c575b5061040e61041492602435611bfc565b90612af3565b915191825250f35b91508382813d831161044b575b6104338183611906565b810103126104465790519061040e6103fe565b600080fd5b503d610429565b8451903d90823e3d90fd5b610475919350843d86116102b4576102a68183611906565b91386103b9565b86513d87823e3d90fd5b61049d9150823d84116102b4576102a68183611906565b38610378565b80fd5b5091346104a35760206003193601126104a3575073ffffffffffffffffffffffffffffffffffffffff60016104dd60209435611c1f565b0154169051908152f35b505034610504578160031936011261050457602091549051908152f35b5080fd5b83346104a357806003193601126104a3576101de3333611e32565b5091346104a35760206003193601126104a3575061054360209235611c1f565b549051908152f35b50346102dc576020806003193601126102d857610566611853565b9073ffffffffffffffffffffffffffffffffffffffff928082857fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654168751928380927f68f1e99a0000000000000000000000000000000000000000000000000000000082525afa90811561081757859184918991610821575b50838851809881937fa7c1abe0000000000000000000000000000000000000000000000000000000008352165afa9485156108175787956107f8575b50808416875260028352858720941685517f9c15d1a200000000000000000000000000000000000000000000000000000000815283818481855afa9081156107ee5788916107bf575b506106736106799142611bfc565b86612af3565b95600182018092116107ac5790600185939201558651928380927fac027f970000000000000000000000000000000000000000000000000000000082525afa9081156107a25761077f927fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d9692610752928991610785575b5083517fa9059cbb000000000000000000000000000000000000000000000000000000009281019290925273ffffffffffffffffffffffffffffffffffffffff861660248301526044808301889052825261074d606483611906565b612723565b51928392836020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b0390a180f35b61079c9150823d84116102b4576102a68183611906565b386106f1565b85513d88823e3d90fd5b602489601186634e487b7160e01b835252fd5b90508381813d83116107e7575b6107d68183611906565b810103126104465751610673610665565b503d6107cc565b87513d8a823e3d90fd5b610810919550833d85116102b4576102a68183611906565b933861061c565b86513d89823e3d90fd5b6108389150823d84116102b4576102a68183611906565b386105e0565b5050346105045781600319360112610504576020906003549051908152f35b5082346104a357806003193601126104a3575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036108d657602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b6020608492519162461bcd60e51b8352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b5090806003193601126102dc57610953611853565b9060243567ffffffffffffffff8111610cbb5736602382011215610cbb576109849036906024818701359101611945565b9073ffffffffffffffffffffffffffffffffffffffff91827f000000000000000000000000000000000000000000000000000000000000000016926109cb8430141561197c565b6109fa7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9482865416146119ed565b807fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303610c78577f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610a5c57505050506101de9150611a5e565b84929394168351947f52d1902d00000000000000000000000000000000000000000000000000000000865260209586818981865afa60009181610c49575b50610b07576084888888519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b9691929394959603610be15750610b1d83611a5e565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590610bd9575b610b59575b5050505080f35b60008091610bcf957f206661696c656400000000000000000000000000000000000000000000000000865196610b8e886118ea565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8389015287015281519101845af4610bc9611b30565b91611b60565b5038808080610b52565b506001610b4d565b6084908686519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918882813d8311610c71575b610c608183611906565b810103126104a35750519038610a9a565b503d610c56565b606486602085519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b8480fd5b509190346105045760606003193601126105045767ffffffffffffffff926024358481116102d857610cf49036908301611876565b9290604435868111610fc157610d0d9036908501611876565b91835195610d1a876118ce565b610d25368284611945565b8752610d32368585611945565b986020978881019a8b5287358a5260068952868a209051805190838211610f145790808c8c93610d628654611c6e565b601f95868211610f94575b50508d91858411600114610f325792610f27575b50506000198260011b9260031b1c19161782555b60018092019b518051938411610f14578b8b8e84610db38254611c6e565b91818311610edb575b50505050508a918411600114610e4c5792610e32949281808e9f947f799dc8187fd3f8ba56efd0df5ed4f1de4e16e69f4e0e300c315cf6a3da0603089f9761077f9d9c9b9a9893610e3f575b505060001991921b9260031b1c19161790555b60608651998a99358a528901526060880191612896565b9285840390860152612896565b0151915060001938610e08565b8c8c528a8c20909c9391601f1983168d5b818110610ec657509183917f799dc8187fd3f8ba56efd0df5ed4f1de4e16e69f4e0e300c315cf6a3da0603089e9f61077f9c9b9a999795610e3299979510610ead575b505050811b019055610e1b565b015160001960f88460031b161c19169055388080610ea0565b8f830151845592850192918d01918d01610e5d565b848491610f009652209181890160051c8301938910610f0b575b0160051c0190612833565b8b8b388f8590610dbc565b92508192610ef5565b60248c60418c634e487b7160e01b835252fd5b015190503880610d81565b8681528e812093601f1916908f5b828210610f7d575050908460019594939210610f64575b505050811b018255610d95565b015160001960f88460031b161c19169055388080610f57565b60018596829396860151815501950193018f610f40565b610fba91888552878286209181880160051c8301938810610f0b570160051c0190612833565b388e610d6d565b8580fd5b5090346102dc576020806003193601126102d857610fe1611853565b9173ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000166110268130141561197c565b6110557f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc9183835416146119ed565b817fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654163303611303578251908482019282841067ffffffffffffffff8511176112ee578385528883527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156110d9575050505050506101de9150611a5e565b8693949596169085517f52d1902d00000000000000000000000000000000000000000000000000000000815287818a81865afa600091816112bf575b50611182576084898989519162461bcd60e51b8352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b979192949795939503611257575061119984611a5e565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061124f575b6111d6575b505050505080f35b611244946000927f206661696c656400000000000000000000000000000000000000000000000000837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8695519861122d8a6118ea565b60278a528901528701525190845af4610bc9611b30565b5038808080806111ce565b5060006111c9565b6084908684519162461bcd60e51b8352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b90918982813d83116112e7575b6112d68183611906565b810103126104a35750519038611115565b503d6112cc565b604188634e487b7160e01b6000525260246000fd5b6064868585519162461bcd60e51b8352820152601e60248201527f4d6f64756c65426173653a2063616c6c6572206973206e6f7420636f726500006044820152fd5b50346102dc5760206003193601126102dc57358252600660205261139e61137d61137760018480872096200194611ca8565b93611ca8565b6113908351948486958652850190611813565b908382036020850152611813565b0390f35b5091903461050457602090816003193601126102dc578335906113c482611c1f565b6001810173ffffffffffffffffffffffffffffffffffffffff9687825416903382036117d157887fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e965416908551907f68f1e99a00000000000000000000000000000000000000000000000000000000825288828281865afa9182156117a85789908b936117b2575b508192938851928380927f9e4b35540000000000000000000000000000000000000000000000000000000082525afa9081156117a8578a9161178b575b50600286019a6114a38c54868d5260028c52898d20612961565b8a5493600019928386019586116117785782169189517f200d2ed20000000000000000000000000000000000000000000000000000000081528c818781875afa90811561176c578e9161173f575b50600281101561172c5760018d911492836116a7575b50505061163f575b5085549382546801000000000000000081101561162c576115368160018893018655611dc0565b819291549060031b85811b9283911b169119161790558a5260018952868a2091825490811561161957509260009695928795927f444a3a44058938b8969bdac08b1dda569100d49a708e17765e90dafd7be093319c9d950190558b558a526005885289868120557fffffffffffffffffffffffff000000000000000000000000000000000000000081541690555581600382015555818552600683526115e960018287206115e38161284a565b0161284a565b7f0bbd2d73af8b098a5b3a3bfdf635f97573da5d6d686c5a1f770f013fb610348d838251848152a151908152a180f35b8b6011602492634e487b7160e01b835252fd5b60248c604186634e487b7160e01b835252fd5b803b156116a3578a809160248a51809481937f95bc953800000000000000000000000000000000000000000000000000000000835281898401525af18015611699571561150f57611692909a919a6118a4565b983861150f565b88513d8d823e3d90fd5b8a80fd5b90919250858b51809481937f2db31193000000000000000000000000000000000000000000000000000000008352165afa908115611722578c916116f1575b508410388b81611507565b90508a81813d831161171b575b6117088183611906565b810103126117175751386116e6565b8b80fd5b503d6116fe565b89513d8e823e3d90fd5b60248e602188634e487b7160e01b835252fd5b61175f91508d803d10611765575b6117578183611906565b810190611da8565b386114f1565b503d61174d565b8e8c51903d90823e3d90fd5b60248d601187634e487b7160e01b835252fd5b6117a29150893d8b116102b4576102a68183611906565b38611489565b87513d8c823e3d90fd5b8293506117cb90823d84116102b4576102a68183611906565b9261144c565b6064908786519162461bcd60e51b8352820152601160248201527f50415420646f65736e27742065786973740000000000000000000000000000006044820152fd5b919082519283825260005b84811061183f575050601f19601f8460006020809697860101520116010190565b60208183018101518483018201520161181e565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361044657565b9181601f840112156104465782359167ffffffffffffffff8311610446576020838186019501011161044657565b67ffffffffffffffff81116118b857604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176118b857604052565b6060810190811067ffffffffffffffff8211176118b857604052565b90601f601f19910116810190811067ffffffffffffffff8211176118b857604052565b67ffffffffffffffff81116118b857601f01601f191660200190565b92919261195182611929565b9161195f6040519384611906565b829481845281830111610446578281602093846000960137010152565b1561198357565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b156119f457565b608460405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b803b15611ac65773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b3d15611b5b573d90611b4182611929565b91611b4f6040519384611906565b82523d6000602084013e565b606090565b91929015611bc15750815115611b74575090565b3b15611b7d5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015611bd45750805190602001fd5b611bf89060405191829162461bcd60e51b8352602060048401526024830190611813565b0390fd5b91908203918211611c0957565b634e487b7160e01b600052601160045260246000fd5b60405160208101917f4ec9908308216b4c7f2662384140ebfbfcc0766c9877c0140af195bd95ed0c818352604082015260408152611c5c816118ea565b5190206000198101908111611c095790565b90600182811c92168015611c9e575b6020831014611c8857565b634e487b7160e01b600052602260045260246000fd5b91607f1691611c7d565b9060405191826000825492611cbc84611c6e565b908184526001948581169081600014611d2b5750600114611ce8575b5050611ce692500383611906565b565b9093915060005260209081600020936000915b818310611d13575050611ce693508201013880611cd8565b85548884018501529485019487945091830191611cfb565b9050611ce69550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880611cd8565b90816020910312610446575173ffffffffffffffffffffffffffffffffffffffff811681036104465790565b6000198114611c095760010190565b90816020910312610446575160028110156104465790565b600454811015611df75760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b8054821015611df75760005260206000200190600090565b91908201809211611c0957565b91909160009273ffffffffffffffffffffffffffffffffffffffff8083168552602090600182526040938487205493875494837fe0c154d538f20c8d1aadcd299210daa7f0a434a5bf4a39795668b28b61ec6e9654169187517f68f1e99a000000000000000000000000000000000000000000000000000000008152608060a052600460a051528681600481875afa908115612719579086918c916126fc575b501688517f2943dcab000000000000000000000000000000000000000000000000000000008152878160a0515181855afa9081156124d3578c916126cf575b5088101561268a5788517f8a0c725b000000000000000000000000000000000000000000000000000000008152878160a0515181855afa9081156124d3578c9161265d575b50831015612619578851977fb53105a3000000000000000000000000000000000000000000000000000000008952878960a0515181855afa9889156124d3578c996125ea575b508951927fac027f97000000000000000000000000000000000000000000000000000000008452888460a0515181865afa93841561258e578d946125cb575b50878b51917f23b872dd000000000000000000000000000000000000000000000000000000008b8401521660248201523060448201528960648201526064815260a081019367ffffffffffffffff94828110868211176125b5578c5261204a929161204591612723565b611d99565b93878a5180927f9e4b35540000000000000000000000000000000000000000000000000000000082528160a05151915afa9081156124d3579087918d91612598575b501689517f200d2ed2000000000000000000000000000000000000000000000000000000008152888160a0515181855afa90811561258e578d91612571575b50600281101561255b57908c9115806124dd575b61246f575b505060a051515491821561245957600019928381019081116124435761210990611dc0565b90549060031b1c9260a0515154801561242d5781019061212882611dc0565b909182549160031b1b1916905560a05151555b8951888101917fc8aaee8b33ec932cbcaafea157708df26b70956d01af32ed14988794c643e4e383527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008860601b168c8301528460548301526054825260a05182019082821090821117612415578b52519020976121b889611c1f565b90600182018054938985166123d057908e9392918b8e5180927fa7c1abe00000000000000000000000000000000000000000000000000000000082528160a05151915afa9081156123a7578b8f8e9288946123b1575b5051928380927fe2d2bfe300000000000000000000000000000000000000000000000000000000825260a0515192165afa9081156123a7578b8f8e92889461236d575b5051928380927f7667180800000000000000000000000000000000000000000000000000000000825260a0515192165afa9485156123625794612332575b50600393947fffffffffffffffffffffffff00000000000000000000000000000000000000008b8b1691161790558482556002820155015589526005855285878a20556001810180911161231c57977ff9afe7870c7ad4010cedbe87273d2282bcedb40f6734c102d53059c8da187bdf9798848416825260018652878220555584519384521690820152a1565b602489634e487b7160e01b8152601160a0515152fd5b93508a84813d831161235b575b6123498183611906565b8101031261044657600393519361228f565b503d61233f565b8e51903d90823e3d90fd5b9350505081813d83116123a0575b6123858183611906565b81010312610cbb57518a81168103610cbb578b8b8f38612251565b503d61237b565b8e513d87823e3d90fd5b6123c9919450833d85116102b4576102a68183611906565b923861220e565b60648b8e519062461bcd60e51b825260a05151820152600f60248201527f496420616c7265616479207573656400000000000000000000000000000000006044820152fd5b634e487b7160e01b600052604160a051515260246000fd5b60248e634e487b7160e01b8152603160a0515152fd5b60248d634e487b7160e01b8152601160a0515152fd5b600354925061246783611d99565b60035561213b565b803b1561050457819060248c51809481937f95bc9538000000000000000000000000000000000000000000000000000000008352600160a051518401525af180156124d3576124c0575b8b906120e4565b6124cc909b919b6118a4565b99386124b9565b8a513d8e823e3d90fd5b508a517f2db31193000000000000000000000000000000000000000000000000000000008152898160a0515181875afa908115612551578391612524575b508610156120df565b90508981813d831161254a575b61253b8183611906565b810103126102dc57513861251b565b503d612531565b8c513d85823e3d90fd5b60248d634e487b7160e01b8152602160a0515152fd5b6125889150893d8b11611765576117578183611906565b386120cb565b8b513d8f823e3d90fd5b6125af9150893d8b116102b4576102a68183611906565b3861208c565b60248f634e487b7160e01b8152604160a0515152fd5b6125e3919450893d8b116102b4576102a68183611906565b9238611fdb565b9098508781813d8311612612575b6126028183611906565b8101031261171757519738611f9c565b503d6125f8565b6064878a519062461bcd60e51b82528060a0515183015260248201527f4d617820776f726b657273207065722070726f766964657220726561636865646044820152fd5b90508781813d8311612683575b6126748183611906565b81010312611717575138611f56565b503d61266a565b6064878a519062461bcd60e51b825260a05151820152601660248201527f54617267657420776f726b6572732072656163686564000000000000000000006044820152fd5b90508781813d83116126f5575b6126e68183611906565b81010312611717575138611f11565b503d6126dc565b6127139150883d8a116102b4576102a68183611906565b38611ed2565b89513d8d823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff169061278a604051612749816118ce565b6020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af1610bc9611b30565b80519182159184831561280f575b5050509050156127a55750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919381809450010312610504578201519081151582036104a3575080388084612798565b81811061283e575050565b60008155600101612833565b6128548154611c6e565b908161285e575050565b81601f60009311600114612870575055565b8183526020832061288c91601f0160051c810190600101612833565b8160208120915555565b601f8260209493601f19938186528686013760008582860101520116010190565b8054680100000000000000008110156118b8576128d991600182018155611e0d565b61291b57815160209283015190921b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff92909216919091179055565b634e487b7160e01b600052600060045260246000fd5b9190917bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80809416911601918211611c0957565b63ffffffff90814216908315612aaf577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff93848111612a6b5784169381546129a9600184015482611bfc565b15612a49576000198101908111611c09576129c49083611e0d565b508054909481168403612a1a57505050506129e6611ce692825460201c612931565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000083549260201b169116179055565b612a2f919293945094611ce69560201c612931565b60405193612a3c856118ce565b84521660208301526128b7565b5050909150611ce69260405192612a5f846118ce565b835260208301526128b7565b606460405162461bcd60e51b815260206004820152601160248201527f416d6f756e7420697320746f6f206269670000000000000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601460248201527f416d6f756e742063616e2774206265207a65726f0000000000000000000000006044820152fd5b9190918054600182015490612b088282611bfc565b15612b685760001994858201918211611c0957612b26918385612bac565b9290925460201c9482612b3b575b5050509190565b8293959201928311611c0957612b5f92612b5491611e0d565b505460201c90611bfc565b91388080612b34565b606460405162461bcd60e51b815260206004820152601160248201527f526571756573747320697320656d7074790000000000000000000000000000006044820152fd5b9093929091612bbb8186611e25565b90600191821c93612bcc8582611e0d565b50965b828103612bdf5750505050509190565b875463ffffffff16858103612bf8575050505050509190565b8598509592949091939510600014612c4e5750838101809111612c3957925b612c218385611e25565b811c93612c2e8584611e0d565b509693919290612bcf565b60246000634e487b7160e01b81526011600452fd5b9392506000198101908111612c395791612c1756fea26469706673582212201d17f2bac584bc93058b0ad3916c7d90ab1bb5de1e5a031fe572f8e5a3bb4e0964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6684,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_currentWorkers",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6689,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_ownersInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(OwnerInfo)6640_storage)"
      },
      {
        "astId": 6694,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Requests)10068_storage)"
      },
      {
        "astId": 6696,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_nextWorkerIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6699,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_freeIndexes",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6704,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_patIdByIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_userDefinedValueType(PATId)7648)"
      },
      {
        "astId": 6710,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "_pdtByPATId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_userDefinedValueType(PATId)7648,t_struct(PDT)7638_storage)"
      },
      {
        "astId": 7547,
        "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Request)10073_storage)dyn_storage": {
        "base": "t_struct(Request)10073_storage",
        "encoding": "dynamic_array",
        "label": "struct WithdrawRequests.Request[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(OwnerInfo)6640_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WorkersModuleState.OwnerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(OwnerInfo)6640_storage"
      },
      "t_mapping(t_address,t_struct(Requests)10068_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WithdrawRequests.Requests)",
        "numberOfBytes": "32",
        "value": "t_struct(Requests)10068_storage"
      },
      "t_mapping(t_uint256,t_userDefinedValueType(PATId)7648)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => PATId)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(PATId)7648"
      },
      "t_mapping(t_userDefinedValueType(PATId)7648,t_struct(PDT)7638_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(PATId)7648",
        "label": "mapping(PATId => struct PDT)",
        "numberOfBytes": "32",
        "value": "t_struct(PDT)7638_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OwnerInfo)6640_storage": {
        "encoding": "inplace",
        "label": "struct WorkersModuleState.OwnerInfo",
        "members": [
          {
            "astId": 6639,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "patsCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PDT)7638_storage": {
        "encoding": "inplace",
        "label": "struct PDT",
        "members": [
          {
            "astId": 7635,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "peerId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 7637,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "workerId",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Request)10073_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRequests.Request",
        "members": [
          {
            "astId": 10070,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_createTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10072,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_cumulative",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Requests)10068_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRequests.Requests",
        "members": [
          {
            "astId": 10065,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_requests",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Request)10073_storage)dyn_storage"
          },
          {
            "astId": 10067,
            "contract": "contracts/deal/WorkersModule.sol:WorkersModule",
            "label": "_indexOffset",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_userDefinedValueType(PATId)7648": {
        "encoding": "inplace",
        "label": "PATId",
        "numberOfBytes": "32"
      }
    }
  }
}