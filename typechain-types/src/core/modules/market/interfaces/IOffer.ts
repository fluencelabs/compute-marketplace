/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export type CIDV1Struct = { prefixes: BytesLike; hash: BytesLike };

export type CIDV1StructOutput = [prefixes: string, hash: string] & {
  prefixes: string;
  hash: string;
};

export declare namespace IOffer {
  export type RegisterComputePeerStruct = {
    peerId: BytesLike;
    owner: AddressLike;
    unitIds: BytesLike[];
  };

  export type RegisterComputePeerStructOutput = [
    peerId: string,
    owner: string,
    unitIds: string[]
  ] & { peerId: string; owner: string; unitIds: string[] };

  export type ComputePeerStruct = {
    offerId: BytesLike;
    commitmentId: BytesLike;
    unitCount: BigNumberish;
    owner: AddressLike;
  };

  export type ComputePeerStructOutput = [
    offerId: string,
    commitmentId: string,
    unitCount: bigint,
    owner: string
  ] & {
    offerId: string;
    commitmentId: string;
    unitCount: bigint;
    owner: string;
  };

  export type ComputeUnitStruct = {
    deal: AddressLike;
    peerId: BytesLike;
    startEpoch: BigNumberish;
  };

  export type ComputeUnitStructOutput = [
    deal: string,
    peerId: string,
    startEpoch: bigint
  ] & { deal: string; peerId: string; startEpoch: bigint };

  export type ComputeUnitViewStruct = {
    id: BytesLike;
    deal: AddressLike;
    startEpoch: BigNumberish;
  };

  export type ComputeUnitViewStructOutput = [
    id: string,
    deal: string,
    startEpoch: bigint
  ] & { id: string; deal: string; startEpoch: bigint };

  export type EffectorInfoStruct = {
    description: string;
    metadata: CIDV1Struct;
  };

  export type EffectorInfoStructOutput = [
    description: string,
    metadata: CIDV1StructOutput
  ] & { description: string; metadata: CIDV1StructOutput };

  export type OfferStruct = {
    provider: AddressLike;
    minPricePerWorkerEpoch: BigNumberish;
    paymentToken: AddressLike;
    peerCount: BigNumberish;
    minProtocolVersion: BigNumberish;
    maxProtocolVersion: BigNumberish;
  };

  export type OfferStructOutput = [
    provider: string,
    minPricePerWorkerEpoch: bigint,
    paymentToken: string,
    peerCount: bigint,
    minProtocolVersion: bigint,
    maxProtocolVersion: bigint
  ] & {
    provider: string;
    minPricePerWorkerEpoch: bigint;
    paymentToken: string;
    peerCount: bigint;
    minProtocolVersion: bigint;
    maxProtocolVersion: bigint;
  };

  export type ProviderInfoStruct = { name: string; metadata: CIDV1Struct };

  export type ProviderInfoStructOutput = [
    name: string,
    metadata: CIDV1StructOutput
  ] & { name: string; metadata: CIDV1StructOutput };
}

export interface IOfferInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addComputePeers"
      | "addComputeUnits"
      | "addEffector"
      | "changeMinPricePerWorkerEpoch"
      | "changePaymentToken"
      | "getComputePeer"
      | "getComputeUnit"
      | "getComputeUnitIds"
      | "getComputeUnits"
      | "getEffectorInfo"
      | "getOffer"
      | "getProviderInfo"
      | "registerMarketOffer"
      | "removeComputePeer"
      | "removeComputeUnit"
      | "removeEffector"
      | "removeEffectorInfo"
      | "removeOffer"
      | "returnComputeUnitFromDeal"
      | "setCommitmentId"
      | "setEffectorInfo"
      | "setProviderInfo"
      | "setStartEpoch"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ComputeUnitAddedToDeal"
      | "ComputeUnitCreated"
      | "ComputeUnitRemoved"
      | "ComputeUnitRemovedFromDeal"
      | "EffectorAdded"
      | "EffectorInfoRemoved"
      | "EffectorInfoSet"
      | "EffectorRemoved"
      | "MarketOfferRegistered"
      | "MinPricePerEpochUpdated"
      | "PaymentTokenUpdated"
      | "PeerCreated"
      | "PeerRemoved"
      | "ProviderInfoUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addComputePeers",
    values: [BytesLike, IOffer.RegisterComputePeerStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addComputeUnits",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addEffector",
    values: [BytesLike, CIDV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinPricePerWorkerEpoch",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePaymentToken",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputePeer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeUnit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeUnitIds",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeUnits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEffectorInfo",
    values: [CIDV1Struct]
  ): string;
  encodeFunctionData(functionFragment: "getOffer", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getProviderInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarketOffer",
    values: [
      BigNumberish,
      AddressLike,
      CIDV1Struct[],
      IOffer.RegisterComputePeerStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComputePeer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeComputeUnit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEffector",
    values: [BytesLike, CIDV1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEffectorInfo",
    values: [CIDV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOffer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "returnComputeUnitFromDeal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommitmentId",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEffectorInfo",
    values: [CIDV1Struct, string, CIDV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderInfo",
    values: [string, CIDV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartEpoch",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addComputePeers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addComputeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEffector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinPricePerWorkerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputePeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeUnitIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEffectorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProviderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMarketOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComputePeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeComputeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEffector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEffectorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnComputeUnitFromDeal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommitmentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEffectorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartEpoch",
    data: BytesLike
  ): Result;
}

export namespace ComputeUnitAddedToDealEvent {
  export type InputTuple = [
    unitId: BytesLike,
    deal: AddressLike,
    peerId: BytesLike
  ];
  export type OutputTuple = [unitId: string, deal: string, peerId: string];
  export interface OutputObject {
    unitId: string;
    deal: string;
    peerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeUnitCreatedEvent {
  export type InputTuple = [peerId: BytesLike, unitId: BytesLike];
  export type OutputTuple = [peerId: string, unitId: string];
  export interface OutputObject {
    peerId: string;
    unitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeUnitRemovedEvent {
  export type InputTuple = [peerId: BytesLike, unitId: BytesLike];
  export type OutputTuple = [peerId: string, unitId: string];
  export interface OutputObject {
    peerId: string;
    unitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ComputeUnitRemovedFromDealEvent {
  export type InputTuple = [
    unitId: BytesLike,
    deal: AddressLike,
    peerId: BytesLike
  ];
  export type OutputTuple = [unitId: string, deal: string, peerId: string];
  export interface OutputObject {
    unitId: string;
    deal: string;
    peerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorAddedEvent {
  export type InputTuple = [offerId: BytesLike, effector: CIDV1Struct];
  export type OutputTuple = [offerId: string, effector: CIDV1StructOutput];
  export interface OutputObject {
    offerId: string;
    effector: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorInfoRemovedEvent {
  export type InputTuple = [id: CIDV1Struct];
  export type OutputTuple = [id: CIDV1StructOutput];
  export interface OutputObject {
    id: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorInfoSetEvent {
  export type InputTuple = [
    id: CIDV1Struct,
    description: string,
    metadata: CIDV1Struct
  ];
  export type OutputTuple = [
    id: CIDV1StructOutput,
    description: string,
    metadata: CIDV1StructOutput
  ];
  export interface OutputObject {
    id: CIDV1StructOutput;
    description: string;
    metadata: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EffectorRemovedEvent {
  export type InputTuple = [offerId: BytesLike, effector: CIDV1Struct];
  export type OutputTuple = [offerId: string, effector: CIDV1StructOutput];
  export interface OutputObject {
    offerId: string;
    effector: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketOfferRegisteredEvent {
  export type InputTuple = [
    provider: AddressLike,
    offerId: BytesLike,
    minPricePerWorkerEpoch: BigNumberish,
    paymentToken: AddressLike,
    effectors: CIDV1Struct[],
    minProtocolVersion: BigNumberish,
    maxProtocolVersion: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    offerId: string,
    minPricePerWorkerEpoch: bigint,
    paymentToken: string,
    effectors: CIDV1StructOutput[],
    minProtocolVersion: bigint,
    maxProtocolVersion: bigint
  ];
  export interface OutputObject {
    provider: string;
    offerId: string;
    minPricePerWorkerEpoch: bigint;
    paymentToken: string;
    effectors: CIDV1StructOutput[];
    minProtocolVersion: bigint;
    maxProtocolVersion: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinPricePerEpochUpdatedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    minPricePerWorkerEpoch: BigNumberish
  ];
  export type OutputTuple = [offerId: string, minPricePerWorkerEpoch: bigint];
  export interface OutputObject {
    offerId: string;
    minPricePerWorkerEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenUpdatedEvent {
  export type InputTuple = [offerId: BytesLike, paymentToken: AddressLike];
  export type OutputTuple = [offerId: string, paymentToken: string];
  export interface OutputObject {
    offerId: string;
    paymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerCreatedEvent {
  export type InputTuple = [
    offerId: BytesLike,
    peerId: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [offerId: string, peerId: string, owner: string];
  export interface OutputObject {
    offerId: string;
    peerId: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerRemovedEvent {
  export type InputTuple = [offerId: BytesLike, peerId: BytesLike];
  export type OutputTuple = [offerId: string, peerId: string];
  export interface OutputObject {
    offerId: string;
    peerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderInfoUpdatedEvent {
  export type InputTuple = [
    provider: AddressLike,
    name: string,
    metadata: CIDV1Struct
  ];
  export type OutputTuple = [
    provider: string,
    name: string,
    metadata: CIDV1StructOutput
  ];
  export interface OutputObject {
    provider: string;
    name: string;
    metadata: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOffer extends BaseContract {
  connect(runner?: ContractRunner | null): IOffer;
  waitForDeployment(): Promise<this>;

  interface: IOfferInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addComputePeers: TypedContractMethod<
    [offerId: BytesLike, peers: IOffer.RegisterComputePeerStruct[]],
    [void],
    "nonpayable"
  >;

  addComputeUnits: TypedContractMethod<
    [peerId: BytesLike, unitIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  addEffector: TypedContractMethod<
    [offerId: BytesLike, newEffectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;

  changeMinPricePerWorkerEpoch: TypedContractMethod<
    [offerId: BytesLike, newMinPricePerWorkerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  changePaymentToken: TypedContractMethod<
    [offerId: BytesLike, newPaymentToken: AddressLike],
    [void],
    "nonpayable"
  >;

  getComputePeer: TypedContractMethod<
    [peerId: BytesLike],
    [IOffer.ComputePeerStructOutput],
    "view"
  >;

  getComputeUnit: TypedContractMethod<
    [unitId: BytesLike],
    [IOffer.ComputeUnitStructOutput],
    "view"
  >;

  getComputeUnitIds: TypedContractMethod<
    [peerId: BytesLike],
    [string[]],
    "view"
  >;

  getComputeUnits: TypedContractMethod<
    [peerId: BytesLike],
    [IOffer.ComputeUnitViewStructOutput[]],
    "view"
  >;

  getEffectorInfo: TypedContractMethod<
    [id: CIDV1Struct],
    [IOffer.EffectorInfoStructOutput],
    "view"
  >;

  getOffer: TypedContractMethod<
    [offerId: BytesLike],
    [IOffer.OfferStructOutput],
    "view"
  >;

  getProviderInfo: TypedContractMethod<
    [provider: AddressLike],
    [IOffer.ProviderInfoStructOutput],
    "view"
  >;

  registerMarketOffer: TypedContractMethod<
    [
      minPricePerWorkerEpoch: BigNumberish,
      paymentToken: AddressLike,
      effectors: CIDV1Struct[],
      peers: IOffer.RegisterComputePeerStruct[],
      minProtocolVersion: BigNumberish,
      maxProtocolVersion: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  removeComputePeer: TypedContractMethod<
    [peerId: BytesLike],
    [void],
    "nonpayable"
  >;

  removeComputeUnit: TypedContractMethod<
    [unitId: BytesLike],
    [void],
    "nonpayable"
  >;

  removeEffector: TypedContractMethod<
    [offerId: BytesLike, effectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;

  removeEffectorInfo: TypedContractMethod<
    [id: CIDV1Struct],
    [void],
    "nonpayable"
  >;

  removeOffer: TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;

  returnComputeUnitFromDeal: TypedContractMethod<
    [unitId: BytesLike],
    [void],
    "nonpayable"
  >;

  setCommitmentId: TypedContractMethod<
    [peerId: BytesLike, commitmentId: BytesLike],
    [void],
    "nonpayable"
  >;

  setEffectorInfo: TypedContractMethod<
    [id: CIDV1Struct, description: string, metadata: CIDV1Struct],
    [void],
    "nonpayable"
  >;

  setProviderInfo: TypedContractMethod<
    [name: string, metadata: CIDV1Struct],
    [void],
    "nonpayable"
  >;

  setStartEpoch: TypedContractMethod<
    [unitId: BytesLike, startEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addComputePeers"
  ): TypedContractMethod<
    [offerId: BytesLike, peers: IOffer.RegisterComputePeerStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addComputeUnits"
  ): TypedContractMethod<
    [peerId: BytesLike, unitIds: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEffector"
  ): TypedContractMethod<
    [offerId: BytesLike, newEffectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeMinPricePerWorkerEpoch"
  ): TypedContractMethod<
    [offerId: BytesLike, newMinPricePerWorkerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePaymentToken"
  ): TypedContractMethod<
    [offerId: BytesLike, newPaymentToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getComputePeer"
  ): TypedContractMethod<
    [peerId: BytesLike],
    [IOffer.ComputePeerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComputeUnit"
  ): TypedContractMethod<
    [unitId: BytesLike],
    [IOffer.ComputeUnitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComputeUnitIds"
  ): TypedContractMethod<[peerId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getComputeUnits"
  ): TypedContractMethod<
    [peerId: BytesLike],
    [IOffer.ComputeUnitViewStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEffectorInfo"
  ): TypedContractMethod<
    [id: CIDV1Struct],
    [IOffer.EffectorInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOffer"
  ): TypedContractMethod<
    [offerId: BytesLike],
    [IOffer.OfferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProviderInfo"
  ): TypedContractMethod<
    [provider: AddressLike],
    [IOffer.ProviderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerMarketOffer"
  ): TypedContractMethod<
    [
      minPricePerWorkerEpoch: BigNumberish,
      paymentToken: AddressLike,
      effectors: CIDV1Struct[],
      peers: IOffer.RegisterComputePeerStruct[],
      minProtocolVersion: BigNumberish,
      maxProtocolVersion: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeComputePeer"
  ): TypedContractMethod<[peerId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeComputeUnit"
  ): TypedContractMethod<[unitId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeEffector"
  ): TypedContractMethod<
    [offerId: BytesLike, effectors: CIDV1Struct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeEffectorInfo"
  ): TypedContractMethod<[id: CIDV1Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOffer"
  ): TypedContractMethod<[offerId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "returnComputeUnitFromDeal"
  ): TypedContractMethod<[unitId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCommitmentId"
  ): TypedContractMethod<
    [peerId: BytesLike, commitmentId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEffectorInfo"
  ): TypedContractMethod<
    [id: CIDV1Struct, description: string, metadata: CIDV1Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProviderInfo"
  ): TypedContractMethod<
    [name: string, metadata: CIDV1Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStartEpoch"
  ): TypedContractMethod<
    [unitId: BytesLike, startEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ComputeUnitAddedToDeal"
  ): TypedContractEvent<
    ComputeUnitAddedToDealEvent.InputTuple,
    ComputeUnitAddedToDealEvent.OutputTuple,
    ComputeUnitAddedToDealEvent.OutputObject
  >;
  getEvent(
    key: "ComputeUnitCreated"
  ): TypedContractEvent<
    ComputeUnitCreatedEvent.InputTuple,
    ComputeUnitCreatedEvent.OutputTuple,
    ComputeUnitCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ComputeUnitRemoved"
  ): TypedContractEvent<
    ComputeUnitRemovedEvent.InputTuple,
    ComputeUnitRemovedEvent.OutputTuple,
    ComputeUnitRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ComputeUnitRemovedFromDeal"
  ): TypedContractEvent<
    ComputeUnitRemovedFromDealEvent.InputTuple,
    ComputeUnitRemovedFromDealEvent.OutputTuple,
    ComputeUnitRemovedFromDealEvent.OutputObject
  >;
  getEvent(
    key: "EffectorAdded"
  ): TypedContractEvent<
    EffectorAddedEvent.InputTuple,
    EffectorAddedEvent.OutputTuple,
    EffectorAddedEvent.OutputObject
  >;
  getEvent(
    key: "EffectorInfoRemoved"
  ): TypedContractEvent<
    EffectorInfoRemovedEvent.InputTuple,
    EffectorInfoRemovedEvent.OutputTuple,
    EffectorInfoRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EffectorInfoSet"
  ): TypedContractEvent<
    EffectorInfoSetEvent.InputTuple,
    EffectorInfoSetEvent.OutputTuple,
    EffectorInfoSetEvent.OutputObject
  >;
  getEvent(
    key: "EffectorRemoved"
  ): TypedContractEvent<
    EffectorRemovedEvent.InputTuple,
    EffectorRemovedEvent.OutputTuple,
    EffectorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MarketOfferRegistered"
  ): TypedContractEvent<
    MarketOfferRegisteredEvent.InputTuple,
    MarketOfferRegisteredEvent.OutputTuple,
    MarketOfferRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MinPricePerEpochUpdated"
  ): TypedContractEvent<
    MinPricePerEpochUpdatedEvent.InputTuple,
    MinPricePerEpochUpdatedEvent.OutputTuple,
    MinPricePerEpochUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTokenUpdated"
  ): TypedContractEvent<
    PaymentTokenUpdatedEvent.InputTuple,
    PaymentTokenUpdatedEvent.OutputTuple,
    PaymentTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PeerCreated"
  ): TypedContractEvent<
    PeerCreatedEvent.InputTuple,
    PeerCreatedEvent.OutputTuple,
    PeerCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PeerRemoved"
  ): TypedContractEvent<
    PeerRemovedEvent.InputTuple,
    PeerRemovedEvent.OutputTuple,
    PeerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderInfoUpdated"
  ): TypedContractEvent<
    ProviderInfoUpdatedEvent.InputTuple,
    ProviderInfoUpdatedEvent.OutputTuple,
    ProviderInfoUpdatedEvent.OutputObject
  >;

  filters: {
    "ComputeUnitAddedToDeal(bytes32,address,bytes32)": TypedContractEvent<
      ComputeUnitAddedToDealEvent.InputTuple,
      ComputeUnitAddedToDealEvent.OutputTuple,
      ComputeUnitAddedToDealEvent.OutputObject
    >;
    ComputeUnitAddedToDeal: TypedContractEvent<
      ComputeUnitAddedToDealEvent.InputTuple,
      ComputeUnitAddedToDealEvent.OutputTuple,
      ComputeUnitAddedToDealEvent.OutputObject
    >;

    "ComputeUnitCreated(bytes32,bytes32)": TypedContractEvent<
      ComputeUnitCreatedEvent.InputTuple,
      ComputeUnitCreatedEvent.OutputTuple,
      ComputeUnitCreatedEvent.OutputObject
    >;
    ComputeUnitCreated: TypedContractEvent<
      ComputeUnitCreatedEvent.InputTuple,
      ComputeUnitCreatedEvent.OutputTuple,
      ComputeUnitCreatedEvent.OutputObject
    >;

    "ComputeUnitRemoved(bytes32,bytes32)": TypedContractEvent<
      ComputeUnitRemovedEvent.InputTuple,
      ComputeUnitRemovedEvent.OutputTuple,
      ComputeUnitRemovedEvent.OutputObject
    >;
    ComputeUnitRemoved: TypedContractEvent<
      ComputeUnitRemovedEvent.InputTuple,
      ComputeUnitRemovedEvent.OutputTuple,
      ComputeUnitRemovedEvent.OutputObject
    >;

    "ComputeUnitRemovedFromDeal(bytes32,address,bytes32)": TypedContractEvent<
      ComputeUnitRemovedFromDealEvent.InputTuple,
      ComputeUnitRemovedFromDealEvent.OutputTuple,
      ComputeUnitRemovedFromDealEvent.OutputObject
    >;
    ComputeUnitRemovedFromDeal: TypedContractEvent<
      ComputeUnitRemovedFromDealEvent.InputTuple,
      ComputeUnitRemovedFromDealEvent.OutputTuple,
      ComputeUnitRemovedFromDealEvent.OutputObject
    >;

    "EffectorAdded(bytes32,tuple)": TypedContractEvent<
      EffectorAddedEvent.InputTuple,
      EffectorAddedEvent.OutputTuple,
      EffectorAddedEvent.OutputObject
    >;
    EffectorAdded: TypedContractEvent<
      EffectorAddedEvent.InputTuple,
      EffectorAddedEvent.OutputTuple,
      EffectorAddedEvent.OutputObject
    >;

    "EffectorInfoRemoved(tuple)": TypedContractEvent<
      EffectorInfoRemovedEvent.InputTuple,
      EffectorInfoRemovedEvent.OutputTuple,
      EffectorInfoRemovedEvent.OutputObject
    >;
    EffectorInfoRemoved: TypedContractEvent<
      EffectorInfoRemovedEvent.InputTuple,
      EffectorInfoRemovedEvent.OutputTuple,
      EffectorInfoRemovedEvent.OutputObject
    >;

    "EffectorInfoSet(tuple,string,tuple)": TypedContractEvent<
      EffectorInfoSetEvent.InputTuple,
      EffectorInfoSetEvent.OutputTuple,
      EffectorInfoSetEvent.OutputObject
    >;
    EffectorInfoSet: TypedContractEvent<
      EffectorInfoSetEvent.InputTuple,
      EffectorInfoSetEvent.OutputTuple,
      EffectorInfoSetEvent.OutputObject
    >;

    "EffectorRemoved(bytes32,tuple)": TypedContractEvent<
      EffectorRemovedEvent.InputTuple,
      EffectorRemovedEvent.OutputTuple,
      EffectorRemovedEvent.OutputObject
    >;
    EffectorRemoved: TypedContractEvent<
      EffectorRemovedEvent.InputTuple,
      EffectorRemovedEvent.OutputTuple,
      EffectorRemovedEvent.OutputObject
    >;

    "MarketOfferRegistered(address,bytes32,uint256,address,tuple[],uint256,uint256)": TypedContractEvent<
      MarketOfferRegisteredEvent.InputTuple,
      MarketOfferRegisteredEvent.OutputTuple,
      MarketOfferRegisteredEvent.OutputObject
    >;
    MarketOfferRegistered: TypedContractEvent<
      MarketOfferRegisteredEvent.InputTuple,
      MarketOfferRegisteredEvent.OutputTuple,
      MarketOfferRegisteredEvent.OutputObject
    >;

    "MinPricePerEpochUpdated(bytes32,uint256)": TypedContractEvent<
      MinPricePerEpochUpdatedEvent.InputTuple,
      MinPricePerEpochUpdatedEvent.OutputTuple,
      MinPricePerEpochUpdatedEvent.OutputObject
    >;
    MinPricePerEpochUpdated: TypedContractEvent<
      MinPricePerEpochUpdatedEvent.InputTuple,
      MinPricePerEpochUpdatedEvent.OutputTuple,
      MinPricePerEpochUpdatedEvent.OutputObject
    >;

    "PaymentTokenUpdated(bytes32,address)": TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;
    PaymentTokenUpdated: TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;

    "PeerCreated(bytes32,bytes32,address)": TypedContractEvent<
      PeerCreatedEvent.InputTuple,
      PeerCreatedEvent.OutputTuple,
      PeerCreatedEvent.OutputObject
    >;
    PeerCreated: TypedContractEvent<
      PeerCreatedEvent.InputTuple,
      PeerCreatedEvent.OutputTuple,
      PeerCreatedEvent.OutputObject
    >;

    "PeerRemoved(bytes32,bytes32)": TypedContractEvent<
      PeerRemovedEvent.InputTuple,
      PeerRemovedEvent.OutputTuple,
      PeerRemovedEvent.OutputObject
    >;
    PeerRemoved: TypedContractEvent<
      PeerRemovedEvent.InputTuple,
      PeerRemovedEvent.OutputTuple,
      PeerRemovedEvent.OutputObject
    >;

    "ProviderInfoUpdated(address,string,tuple)": TypedContractEvent<
      ProviderInfoUpdatedEvent.InputTuple,
      ProviderInfoUpdatedEvent.OutputTuple,
      ProviderInfoUpdatedEvent.OutputObject
    >;
    ProviderInfoUpdated: TypedContractEvent<
      ProviderInfoUpdatedEvent.InputTuple,
      ProviderInfoUpdatedEvent.OutputTuple,
      ProviderInfoUpdatedEvent.OutputObject
    >;
  };
}
