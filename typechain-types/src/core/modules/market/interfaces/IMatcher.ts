/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export type CIDV1Struct = { prefixes: BytesLike; hash: BytesLike };

export type CIDV1StructOutput = [prefixes: string, hash: string] & {
  prefixes: string;
  hash: string;
};

export interface IMatcherInterface extends Interface {
  getFunction(nameOrSignature: "matchDeal"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ComputeUnitMatched"): EventFragment;

  encodeFunctionData(
    functionFragment: "matchDeal",
    values: [AddressLike, BytesLike[], BytesLike[][]]
  ): string;

  decodeFunctionResult(functionFragment: "matchDeal", data: BytesLike): Result;
}

export namespace ComputeUnitMatchedEvent {
  export type InputTuple = [
    peerId: BytesLike,
    deal: AddressLike,
    unitId: BytesLike,
    dealCreationBlock: BigNumberish,
    appCID: CIDV1Struct
  ];
  export type OutputTuple = [
    peerId: string,
    deal: string,
    unitId: string,
    dealCreationBlock: bigint,
    appCID: CIDV1StructOutput
  ];
  export interface OutputObject {
    peerId: string;
    deal: string;
    unitId: string;
    dealCreationBlock: bigint;
    appCID: CIDV1StructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMatcher extends BaseContract {
  connect(runner?: ContractRunner | null): IMatcher;
  waitForDeployment(): Promise<this>;

  interface: IMatcherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  matchDeal: TypedContractMethod<
    [deal: AddressLike, offers: BytesLike[], computeUnits: BytesLike[][]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "matchDeal"
  ): TypedContractMethod<
    [deal: AddressLike, offers: BytesLike[], computeUnits: BytesLike[][]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ComputeUnitMatched"
  ): TypedContractEvent<
    ComputeUnitMatchedEvent.InputTuple,
    ComputeUnitMatchedEvent.OutputTuple,
    ComputeUnitMatchedEvent.OutputObject
  >;

  filters: {
    "ComputeUnitMatched(bytes32,address,bytes32,uint256,tuple)": TypedContractEvent<
      ComputeUnitMatchedEvent.InputTuple,
      ComputeUnitMatchedEvent.OutputTuple,
      ComputeUnitMatchedEvent.OutputObject
    >;
    ComputeUnitMatched: TypedContractEvent<
      ComputeUnitMatchedEvent.InputTuple,
      ComputeUnitMatchedEvent.OutputTuple,
      ComputeUnitMatchedEvent.OutputObject
    >;
  };
}
