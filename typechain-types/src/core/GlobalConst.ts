/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface GlobalConstInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeUnitCount"
      | "calculateRewardPool"
      | "currentEpoch"
      | "difficulty"
      | "epochDuration"
      | "fltCollateralPerUnit"
      | "fltPrice"
      | "getRewardPool"
      | "initTimestamp"
      | "maxFailedRatio"
      | "maxProofsPerEpoch"
      | "maxProtocolVersion"
      | "maxRewardPerEpoch"
      | "minDealDepositedEpochs"
      | "minDealRematchingEpochs"
      | "minDuration"
      | "minProofsPerEpoch"
      | "minProtocolVersion"
      | "minRewardPerEpoch"
      | "owner"
      | "precision"
      | "randomXProxy"
      | "renounceOwnership"
      | "setCapacityConstant"
      | "setConstant"
      | "setDifficulty"
      | "setFLTPrice"
      | "slashingRate"
      | "transferOwnership"
      | "usdCollateralPerUnit"
      | "usdTargetRevenuePerEpoch"
      | "vestingPeriodCount"
      | "vestingPeriodDuration"
      | "withdrawEpochsAfterFailed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CapacityConstantUpdated"
      | "ConstantUpdated"
      | "DifficultyUpdated"
      | "FLTPriceUpdated"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeUnitCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fltCollateralPerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fltPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFailedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProofsPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDealDepositedEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDealRematchingEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProofsPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "precision", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomXProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCapacityConstant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConstant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDifficulty",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFLTPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usdCollateralPerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdTargetRevenuePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPeriodCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEpochsAfterFailed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeUnitCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fltCollateralPerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fltPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFailedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProofsPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDealDepositedEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDealRematchingEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProofsPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "precision", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomXProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCapacityConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFLTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdCollateralPerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdTargetRevenuePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingPeriodCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEpochsAfterFailed",
    data: BytesLike
  ): Result;
}

export namespace CapacityConstantUpdatedEvent {
  export type InputTuple = [constantType: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [constantType: bigint, newValue: bigint];
  export interface OutputObject {
    constantType: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConstantUpdatedEvent {
  export type InputTuple = [constantType: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [constantType: bigint, newValue: bigint];
  export interface OutputObject {
    constantType: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DifficultyUpdatedEvent {
  export type InputTuple = [difficulty: BytesLike];
  export type OutputTuple = [difficulty: string];
  export interface OutputObject {
    difficulty: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FLTPriceUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish];
  export type OutputTuple = [newValue: bigint];
  export interface OutputObject {
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GlobalConst extends BaseContract {
  connect(runner?: ContractRunner | null): GlobalConst;
  waitForDeployment(): Promise<this>;

  interface: GlobalConstInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeUnitCount: TypedContractMethod<[], [bigint], "view">;

  calculateRewardPool: TypedContractMethod<[], [void], "nonpayable">;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  difficulty: TypedContractMethod<[], [string], "view">;

  epochDuration: TypedContractMethod<[], [bigint], "view">;

  fltCollateralPerUnit: TypedContractMethod<[], [bigint], "view">;

  fltPrice: TypedContractMethod<[], [bigint], "view">;

  getRewardPool: TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;

  initTimestamp: TypedContractMethod<[], [bigint], "view">;

  maxFailedRatio: TypedContractMethod<[], [bigint], "view">;

  maxProofsPerEpoch: TypedContractMethod<[], [bigint], "view">;

  maxProtocolVersion: TypedContractMethod<[], [bigint], "view">;

  maxRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  minDealDepositedEpochs: TypedContractMethod<[], [bigint], "view">;

  minDealRematchingEpochs: TypedContractMethod<[], [bigint], "view">;

  minDuration: TypedContractMethod<[], [bigint], "view">;

  minProofsPerEpoch: TypedContractMethod<[], [bigint], "view">;

  minProtocolVersion: TypedContractMethod<[], [bigint], "view">;

  minRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  precision: TypedContractMethod<[], [bigint], "view">;

  randomXProxy: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCapacityConstant: TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  setConstant: TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDifficulty: TypedContractMethod<
    [difficulty_: BytesLike],
    [void],
    "nonpayable"
  >;

  setFLTPrice: TypedContractMethod<
    [fltPrice_: BigNumberish],
    [void],
    "nonpayable"
  >;

  slashingRate: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdCollateralPerUnit: TypedContractMethod<[], [bigint], "view">;

  usdTargetRevenuePerEpoch: TypedContractMethod<[], [bigint], "view">;

  vestingPeriodCount: TypedContractMethod<[], [bigint], "view">;

  vestingPeriodDuration: TypedContractMethod<[], [bigint], "view">;

  withdrawEpochsAfterFailed: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeUnitCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRewardPool"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "difficulty"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fltCollateralPerUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fltPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardPool"
  ): TypedContractMethod<[epoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFailedRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxProofsPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxProtocolVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDealDepositedEpochs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDealRematchingEpochs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minProofsPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minProtocolVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "precision"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "randomXProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCapacityConstant"
  ): TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConstant"
  ): TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDifficulty"
  ): TypedContractMethod<[difficulty_: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFLTPrice"
  ): TypedContractMethod<[fltPrice_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slashingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdCollateralPerUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdTargetRevenuePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingPeriodCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingPeriodDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawEpochsAfterFailed"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CapacityConstantUpdated"
  ): TypedContractEvent<
    CapacityConstantUpdatedEvent.InputTuple,
    CapacityConstantUpdatedEvent.OutputTuple,
    CapacityConstantUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConstantUpdated"
  ): TypedContractEvent<
    ConstantUpdatedEvent.InputTuple,
    ConstantUpdatedEvent.OutputTuple,
    ConstantUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DifficultyUpdated"
  ): TypedContractEvent<
    DifficultyUpdatedEvent.InputTuple,
    DifficultyUpdatedEvent.OutputTuple,
    DifficultyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FLTPriceUpdated"
  ): TypedContractEvent<
    FLTPriceUpdatedEvent.InputTuple,
    FLTPriceUpdatedEvent.OutputTuple,
    FLTPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CapacityConstantUpdated(uint8,uint256)": TypedContractEvent<
      CapacityConstantUpdatedEvent.InputTuple,
      CapacityConstantUpdatedEvent.OutputTuple,
      CapacityConstantUpdatedEvent.OutputObject
    >;
    CapacityConstantUpdated: TypedContractEvent<
      CapacityConstantUpdatedEvent.InputTuple,
      CapacityConstantUpdatedEvent.OutputTuple,
      CapacityConstantUpdatedEvent.OutputObject
    >;

    "ConstantUpdated(uint8,uint256)": TypedContractEvent<
      ConstantUpdatedEvent.InputTuple,
      ConstantUpdatedEvent.OutputTuple,
      ConstantUpdatedEvent.OutputObject
    >;
    ConstantUpdated: TypedContractEvent<
      ConstantUpdatedEvent.InputTuple,
      ConstantUpdatedEvent.OutputTuple,
      ConstantUpdatedEvent.OutputObject
    >;

    "DifficultyUpdated(bytes32)": TypedContractEvent<
      DifficultyUpdatedEvent.InputTuple,
      DifficultyUpdatedEvent.OutputTuple,
      DifficultyUpdatedEvent.OutputObject
    >;
    DifficultyUpdated: TypedContractEvent<
      DifficultyUpdatedEvent.InputTuple,
      DifficultyUpdatedEvent.OutputTuple,
      DifficultyUpdatedEvent.OutputObject
    >;

    "FLTPriceUpdated(uint256)": TypedContractEvent<
      FLTPriceUpdatedEvent.InputTuple,
      FLTPriceUpdatedEvent.OutputTuple,
      FLTPriceUpdatedEvent.OutputObject
    >;
    FLTPriceUpdated: TypedContractEvent<
      FLTPriceUpdatedEvent.InputTuple,
      FLTPriceUpdatedEvent.OutputTuple,
      FLTPriceUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
