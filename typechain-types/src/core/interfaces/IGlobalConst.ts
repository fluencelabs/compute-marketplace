/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IGlobalConstInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "maxProtocolVersion"
      | "minDealDepositedEpochs"
      | "minDealRematchingEpochs"
      | "minProtocolVersion"
      | "precision"
      | "setConstant"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ConstantUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "maxProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDealDepositedEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDealRematchingEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProtocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "precision", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setConstant",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "maxProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDealDepositedEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDealRematchingEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProtocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "precision", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConstant",
    data: BytesLike
  ): Result;
}

export namespace ConstantUpdatedEvent {
  export type InputTuple = [constantType: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [constantType: bigint, newValue: bigint];
  export interface OutputObject {
    constantType: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGlobalConst extends BaseContract {
  connect(runner?: ContractRunner | null): IGlobalConst;
  waitForDeployment(): Promise<this>;

  interface: IGlobalConstInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  maxProtocolVersion: TypedContractMethod<[], [bigint], "view">;

  minDealDepositedEpochs: TypedContractMethod<[], [bigint], "view">;

  minDealRematchingEpochs: TypedContractMethod<[], [bigint], "view">;

  minProtocolVersion: TypedContractMethod<[], [bigint], "view">;

  precision: TypedContractMethod<[], [bigint], "view">;

  setConstant: TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "maxProtocolVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDealDepositedEpochs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDealRematchingEpochs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minProtocolVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "precision"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setConstant"
  ): TypedContractMethod<
    [constantType: BigNumberish, v: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConstantUpdated"
  ): TypedContractEvent<
    ConstantUpdatedEvent.InputTuple,
    ConstantUpdatedEvent.OutputTuple,
    ConstantUpdatedEvent.OutputObject
  >;

  filters: {
    "ConstantUpdated(uint8,uint256)": TypedContractEvent<
      ConstantUpdatedEvent.InputTuple,
      ConstantUpdatedEvent.OutputTuple,
      ConstantUpdatedEvent.OutputObject
    >;
    ConstantUpdated: TypedContractEvent<
      ConstantUpdatedEvent.InputTuple,
      ConstantUpdatedEvent.OutputTuple,
      ConstantUpdatedEvent.OutputObject
    >;
  };
}
