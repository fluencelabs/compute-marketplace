/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IWorkersModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "exit"
      | "getNextWorkerIndex"
      | "getPATIndex"
      | "getPATOwner"
      | "getPDT"
      | "getUnlockedAmountBy"
      | "join"
      | "joinViaMatcher"
      | "setPDT"
      | "withdrawCollateral"
      | "workersCount"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "exit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getNextWorkerIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPATIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPATOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPDT", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getUnlockedAmountBy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinViaMatcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPDT",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "workersCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextWorkerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPATIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPATOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockedAmountBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinViaMatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workersCount",
    data: BytesLike
  ): Result;
}

export interface IWorkersModule extends BaseContract {
  connect(runner?: ContractRunner | null): IWorkersModule;
  waitForDeployment(): Promise<this>;

  interface: IWorkersModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exit: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  getNextWorkerIndex: TypedContractMethod<[], [bigint], "view">;

  getPATIndex: TypedContractMethod<[id: BytesLike], [bigint], "view">;

  getPATOwner: TypedContractMethod<[id: BytesLike], [string], "view">;

  getPDT: TypedContractMethod<
    [id: BytesLike],
    [[string, string] & { peerId: string; workerId: string }],
    "view"
  >;

  getUnlockedAmountBy: TypedContractMethod<
    [owner: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  join: TypedContractMethod<[], [void], "nonpayable">;

  joinViaMatcher: TypedContractMethod<
    [owner: AddressLike],
    [void],
    "nonpayable"
  >;

  setPDT: TypedContractMethod<
    [id: BytesLike, peerId: string, workerId: string],
    [void],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [owner: AddressLike],
    [void],
    "nonpayable"
  >;

  workersCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getNextWorkerIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPATIndex"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPATOwner"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getPDT"
  ): TypedContractMethod<
    [id: BytesLike],
    [[string, string] & { peerId: string; workerId: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnlockedAmountBy"
  ): TypedContractMethod<
    [owner: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "joinViaMatcher"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPDT"
  ): TypedContractMethod<
    [id: BytesLike, peerId: string, workerId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "workersCount"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
