/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IStatusModuleInterface extends Interface {
  getFunction(
    nameOrSignature: "changeStatus" | "startWorkingEpoch" | "status"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "StatusChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "changeStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startWorkingEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "changeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startWorkingEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
}

export namespace StatusChangedEvent {
  export type InputTuple = [newStatus: BigNumberish];
  export type OutputTuple = [newStatus: bigint];
  export interface OutputObject {
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStatusModule extends BaseContract {
  connect(runner?: ContractRunner | null): IStatusModule;
  waitForDeployment(): Promise<this>;

  interface: IStatusModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeStatus: TypedContractMethod<
    [status_: BigNumberish],
    [void],
    "nonpayable"
  >;

  startWorkingEpoch: TypedContractMethod<[], [bigint], "view">;

  status: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeStatus"
  ): TypedContractMethod<[status_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startWorkingEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "StatusChanged"
  ): TypedContractEvent<
    StatusChangedEvent.InputTuple,
    StatusChangedEvent.OutputTuple,
    StatusChangedEvent.OutputObject
  >;

  filters: {
    "StatusChanged(uint8)": TypedContractEvent<
      StatusChangedEvent.InputTuple,
      StatusChangedEvent.OutputTuple,
      StatusChangedEvent.OutputObject
    >;
    StatusChanged: TypedContractEvent<
      StatusChangedEvent.InputTuple,
      StatusChangedEvent.OutputTuple,
      StatusChangedEvent.OutputObject
    >;
  };
}
