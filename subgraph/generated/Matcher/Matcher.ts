// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MatchedWithDeal extends ethereum.Event {
  get params(): MatchedWithDeal__Params {
    return new MatchedWithDeal__Params(this);
  }
}

export class MatchedWithDeal__Params {
  _event: MatchedWithDeal;

  constructor(event: MatchedWithDeal) {
    this._event = event;
  }

  get deal(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get resources(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get workersCount(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class ResourceOwnerRegistred extends ethereum.Event {
  get params(): ResourceOwnerRegistred__Params {
    return new ResourceOwnerRegistred__Params(this);
  }
}

export class ResourceOwnerRegistred__Params {
  _event: ResourceOwnerRegistred;

  constructor(event: ResourceOwnerRegistred) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get info(): ResourceOwnerRegistredInfoStruct {
    return changetype<ResourceOwnerRegistredInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class ResourceOwnerRegistredInfoStruct extends ethereum.Tuple {
  get minPriceByEpoch(): BigInt {
    return this[0].toBigInt();
  }

  get maxCollateral(): BigInt {
    return this[1].toBigInt();
  }

  get workersCount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ResourceOwnerRemoved extends ethereum.Event {
  get params(): ResourceOwnerRemoved__Params {
    return new ResourceOwnerRemoved__Params(this);
  }
}

export class ResourceOwnerRemoved__Params {
  _event: ResourceOwnerRemoved;

  constructor(event: ResourceOwnerRemoved) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Matcher__resourceOwnersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getMinPriceByEpoch(): BigInt {
    return this.value0;
  }

  getMaxCollateral(): BigInt {
    return this.value1;
  }

  getWorkersCount(): BigInt {
    return this.value2;
  }
}

export class Matcher extends ethereum.SmartContract {
  static bind(address: Address): Matcher {
    return new Matcher("Matcher", address);
  }

  collateral(param0: Address): BigInt {
    let result = super.call("collateral", "collateral(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_collateral(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collateral", "collateral(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalConfig(): Address {
    let result = super.call("globalConfig", "globalConfig():(address)", []);

    return result[0].toAddress();
  }

  try_globalConfig(): ethereum.CallResult<Address> {
    let result = super.tryCall("globalConfig", "globalConfig():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  resourceOwners(param0: Address): Matcher__resourceOwnersResult {
    let result = super.call(
      "resourceOwners",
      "resourceOwners(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Matcher__resourceOwnersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_resourceOwners(
    param0: Address
  ): ethereum.CallResult<Matcher__resourceOwnersResult> {
    let result = super.tryCall(
      "resourceOwners",
      "resourceOwners(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Matcher__resourceOwnersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get globalConfig_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MatchWithDealCall extends ethereum.Call {
  get inputs(): MatchWithDealCall__Inputs {
    return new MatchWithDealCall__Inputs(this);
  }

  get outputs(): MatchWithDealCall__Outputs {
    return new MatchWithDealCall__Outputs(this);
  }
}

export class MatchWithDealCall__Inputs {
  _call: MatchWithDealCall;

  constructor(call: MatchWithDealCall) {
    this._call = call;
  }

  get deal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get resources(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get workersCount_(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MatchWithDealCall__Outputs {
  _call: MatchWithDealCall;

  constructor(call: MatchWithDealCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get minPriceByEpoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxCollateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get workersCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class RemoveCall extends ethereum.Call {
  get inputs(): RemoveCall__Inputs {
    return new RemoveCall__Inputs(this);
  }

  get outputs(): RemoveCall__Outputs {
    return new RemoveCall__Outputs(this);
  }
}

export class RemoveCall__Inputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }
}

export class RemoveCall__Outputs {
  _call: RemoveCall;

  constructor(call: RemoveCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
