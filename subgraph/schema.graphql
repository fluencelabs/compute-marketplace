# In the scheme below used behaviour where deleted entity marked as deleted=True instead of actual deletion (in contrast as in contract).
# Thus, please refer to the field when querying the data.

type GraphNetwork @entity {
  "ID is set to 1"
  id: ID! # for example trick thanks to https://github.com/graphprotocol/graph-network-analytics-subgraph/blob/00d32f153f7b6bcef4344b934e3c9a9286304658/schema.graphql#L4.
  # Contract addresses add below.
  coreContractAddress: String
  capacityContractAddress: String
  marketContractAddress: String
  # TODO: remove total counters when total counter field wil be added by developers.
  # https://github.com/graphprotocol/graph-node/issues/613
  # Note that total counter for not deleted entities.
  "Providers that register themselves in the network with setInfo() method."
  providersRegisteredTotal: BigInt!
  "@deprecated TODO: deprecate because it is not used. changed to providersRegisteredTotal used."
  providersTotal: BigInt!
  dealsTotal: BigInt!
  offersTotal: BigInt!
  tokensTotal: BigInt!
  effectorsTotal: BigInt!
  capacityCommitmentsTotal: BigInt!
  proofsTotal: BigInt!
  # Add constants from Core contract below.
  coreEpochDuration: Int
  initTimestamp: Int
  corePrecision: Int
  # Capacity consts are below.
  capacityMaxFailedRatio: Int
  minRequiredProofsPerEpoch: Int
}

type Token @entity {
  id: ID! # Token Address
  symbol: String!
  decimals: Int!
}

type Provider @entity {
  id: ID!
  name: String!
  createdAt: BigInt!
  approved: Boolean!
  "Is provider registered in the network (if false possibly it is only mentioned or global-whitelisted)."
  registered: Boolean!

  offers: [Offer!] @derivedFrom(field: "provider")

  # Add Statistics below.
  "It depends on if CU in deal or not."
  computeUnitsAvailable: Int! # Sum of all available compute units in the offer (not in the deals).
  computeUnitsTotal: Int! # Sum of all compute units registered in the offer. TODO: when CU deleted?
  peerCount: Int!
}

# ---- Core Contract ----
type Offer @entity {
  """
  Used in the next figma views:
  - Offer from List Of offers 1.2.
  - Offer 1.2
  """
  id: ID! # Ref to offerId in contract.
  createdAt: BigInt!
  updatedAt: BigInt!
  provider: Provider!
  #   TODO: price per epoch and price per worker epoch are the same essentials?
  pricePerEpoch: BigInt!
  paymentToken: Token!

  peers: [Peer!] @derivedFrom(field: "offer")
  effectors: [OfferToEffector!] @derivedFrom(field: "offer")

  # Add Statistics below.
  "It depends on if CU in deal or not."
  computeUnitsAvailable: Int # Sum of all available compute units in the offer (not in the deals).
  computeUnitsTotal: Int # Sum of all compute units registered in the offer. TODO: when CU deleted?
  # Add helpers fields to support some queries below.
  "To support check that a peer already in a deal."
  joinedOfferPeers: [DealToJoinedOfferPeer!] @derivedFrom(field: "offer")
}

"""
To support many2many b/w offer and effector.
E.g. to use
{
  offers {
    effectors {
      effector {
        description
      }
    }
  }
}
"""
type OfferToEffector @entity {
  id: ID! # Set to `user.id.concat(organization.id)`
  offer: Offer!
  effector: Effector!
}

"Effector table is obsolete table since it is a simple mapping."
type Effector @entity {
  "id and CID are the same."
  id: ID! # Currently effector id is merged(prefix + hash) aka 1 CID.
  description: String!
  offers: [OfferToEffector!] @derivedFrom(field: "effector")
}

type Peer @entity {
  "ref to peerId in contract."
  id: ID!
  offer: Offer!
  provider: Provider!
  deleted: Boolean!
  computeUnits: [ComputeUnit!] @derivedFrom(field: "peer")

  currentCapacityCommitment: CapacityCommitment
  "To access history of capacity commitments."
  capacityCommitments: [CapacityCommitment!] @derivedFrom(field: "peer")

  # Indexer query helper fields below (named with prefix of already existed field, e.g. currentCapacityCommitment).
  "To understand if collateral for peer have been submitted. This field should be use in conjunction with currentCapacityCommitment."
  currentCCCollateralDepositedAt: BigInt
  currentCCEndEpoch: BigInt
  currentCCNextCCFailedEpoch: BigInt

  # We need field to query from perspective of Peer on deal field.
  joinedDeals: [DealToPeer!] @derivedFrom(field: "peer")
  # To make query with OR to retrieve even entities with joinedDeals == [].
  # TODO: create issue on Subgraph for the feature and past here.
  isAnyJoinedDeals: Boolean!

  # Add Peer stats below.
  computeUnitsTotal: Int!
  "Compute units in any deals: update only when moved to deal or out."
  computeUnitsInDeal: Int!
}

type ComputeUnit @entity {
  id: ID!
  peer: Peer!
  "In order to simplify relation for query."
  provider: Provider!
  deleted: Boolean!

  deal: Deal
  workerId: String
  createdAt: BigInt!
  # TODO: worker status "Expired" how to calculate.

  submittedProofs: [SubmittedProof!] @derivedFrom(field: "computeUnit")

  # Add fields for stats below.
  submittedProofsCount: Int!
}

# ---- Deal Contract ----
type DealToEffector @entity {
  id: ID! # Set to `deal.id.concat(effector.id)`
  deal: Deal!
  effector: Effector!
}

type DealToPeer @entity {
  id: ID! # Set to `deal.id.concat(peer.id)`
  deal: Deal!
  peer: Peer!
  "Helper field to understand number of connections."
  connections: Int!
}

"""
TODO: deprecate.
To add possibility to filter already joined peers into a Deal from perspective of an Offer
(protocol does not allow more than one CU per peer for the same Deal).
"""
type DealToJoinedOfferPeer @entity {
  id: ID! # Set to `deal.id.concat(offer.id.concat(peer.id))`
  deal: Deal!
  offer: Offer! # search offers initially using this fk relation.
  peer: Peer!
}

"It represents m2m b/w deal and provider in context of access list."
type DealToProvidersAccess @entity {
  id: ID! # Set to `deal.id.concat(provider.id)`
  deal: Deal!
  provider: Provider!
}

type Deal @entity {
  id: ID! # Ref to offerId in contract.
  appCID: String!
  createdAt: BigInt!
  owner: String!
  # Settings from public methods.
  minWorkers: Int!
  targetWorkers: Int!
  maxWorkersPerProvider: Int!
  paymentToken: Token!
  pricePerWorkerEpoch: BigInt!
  effectors: [DealToEffector!] @derivedFrom(field: "deal")
  "Many to many to access joined peers to maintain protocol restrictions"
  joinedPeers: [DealToPeer!] @derivedFrom(field: "deal")
  "It represents AccessType of Deal contract."
  providersAccessType: Int!
  providersAccessList: [DealToProvidersAccess!] @derivedFrom(field: "deal")
  #  balance: BigInt!  # on-request via frontend
  #  status: DealStatus!  # on-request via frontend

  # Add Statistics below.
  withdrawalSum: BigInt!
  depositedSum: BigInt! # calculated from the withdraw() [no rewards withdraw].
  maxPaidEpoch: BigInt
  registeredWorkersCurrentCount: Int!
  "Currently matched workers == matched compute units."
  matchedWorkersCurrentCount: Int!

  "I.e. Matching Result (Figma)."
  addedComputeUnits: [ComputeUnit!] @derivedFrom(field: "deal")
  #   TODO: add matched workers.
}

enum CapacityCommitmentStatus {
  Active
  WaitDelegation
  WaitStart
  Inactive
  Failed
  Removed
}

type CapacityCommitmentToComputeUnit @entity {
  id: ID! # Set to `capacityCommitment.id.concat(computeUnit.id)`
  capacityCommitment: CapacityCommitment!
  computeUnit: ComputeUnit!
}

"""
To represent that Peer has capacity commitment for some time.
"""
type CapacityCommitment @entity {
  id: ID!
  peer: Peer!
  "This status represents last stored status on chain (status that does not depends on the current epoch some how)."
  status: CapacityCommitmentStatus
  collateralPerUnit: BigInt!
  duration: BigInt!
  "This field represents Ratio [0, 1] only when it is divided by PRECISION constant of Core contract."
  rewardDelegatorRate: Int!
  delegator: String!
  "timestamp of creation of CC. It does not mean that CC is started."
  createdAt: BigInt!
  startEpoch: BigInt!
  endEpoch: BigInt!
  totalFailCount: Int!
  failedEpoch: BigInt!
  exitedUnitCount: Int!
  activeUnitCount: Int!
  nextAdditionalActiveUnitCount: Int!
  "Collateral of native token (FLT) that has been deposited."
  totalCollateral: BigInt!
  rewardWithdrawn: BigInt!

  submittedProofs: [SubmittedProof!] @derivedFrom(field: "capacityCommitment")
  submittedProofsCount: Int!

  computeUnits: [CapacityCommitmentToComputeUnit!]
    @derivedFrom(field: "capacityCommitment")
  computeUnitsCount: Int!

  snapshotEpoch: BigInt!
  "If CC deleted before collateral deposited."
  deleted: Boolean!
  "Calculated in subgraph field: next failed epoch means the next epoch without proofs submitted when CC declared to be Failed."
  nextCCFailedEpoch: BigInt!

  # Add additional fields to filter by below.
  provider: Provider!
}

type SubmittedProof @entity {
  "Id here is a transaction hash."
  id: ID!
  capacityCommitment: CapacityCommitment!
  computeUnit: ComputeUnit!
  localUnitNonce: Bytes!
  createdAt: BigInt!
  createdEpoch: BigInt!

  # Add fields for filter purpose below.
  provider: Provider!
  peer: Peer!

  capacityCommitmentStatsPerEpoch: CapacityCommitmentStatsPerEpoch!
}

"To represent statistics per epoch. This entity represent evaluation of CommitmentStatsUpdated events during time (epoch)."
type CapacityCommitmentStatsPerEpoch @entity {
  # Set to `capacityCommitment.id.concat(epoch)`
  id: ID!
  capacityCommitment: CapacityCommitment!
  epochStatistic: EpochStatistic!
  "Additional field to support ordering by epoch."
  epoch: BigInt!

  totalFailCount: Int!
  exitedUnitCount: Int!
  activeUnitCount: Int!
  nextAdditionalActiveUnitCount: Int!
  currentCCNextCCFailedEpoch: BigInt!
  submittedProofsCount: Int!

  submittedProofs: [SubmittedProof!]
    @derivedFrom(field: "capacityCommitmentStatsPerEpoch")

  # Add additional seconds stats (that relate from others) below.
  # Relates means that related should be updated first, and stats below strictly after.
  "Should be update after ComputeUnitPerEpochStat.submittedProofsCount reached min proofs border."
  computeUnitsWithMinRequiredProofsSubmittedCounter: Int!
}

"Helper stat model to count success proofs per epoch for a CU."
type ComputeUnitPerEpochStat @entity {
  id: ID! # Set to `computeUnit.id.concat(epoch.id)`
  epochStatistic: EpochStatistic!
  computeUnit: ComputeUnit!

  # To allow query for all CU by the Capacity Commitment.
  capacityCommitment: CapacityCommitment

  # Add per epoch stats below.
  submittedProofsCount: Int!
}

"This model is designed to store epoch related information. Note, that in other models it is more efficient to store epoch as bigint rather than relation to that model (with relation you could complicate your queries by epoch, or you will need to store additional epoch field anyway)."
type EpochStatistic @entity {
  "Epoch number. Note, that for current epoch right boarder is approximate."
  id: ID!
  startBlock: BigInt!
  endBlock: BigInt!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
}
