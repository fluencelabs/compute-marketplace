/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type ParticleStruct = {
  air: PromiseOrValue<string>;
  prevData: PromiseOrValue<string>;
  params: PromiseOrValue<string>;
  callResults: PromiseOrValue<string>;
};

export type ParticleStructOutput = [string, string, string, string] & {
  air: string;
  prevData: string;
  params: string;
  callResults: string;
};

export interface PaymentInterface extends utils.Interface {
  functions: {
    "commitParticle((string,string,string,string))": FunctionFragment;
    "depositToPaymentBalance(uint256)": FunctionFragment;
    "paymentBalance()": FunctionFragment;
    "withdrawFromPaymentBalance(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commitParticle"
      | "depositToPaymentBalance"
      | "paymentBalance"
      | "withdrawFromPaymentBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commitParticle",
    values: [ParticleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToPaymentBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromPaymentBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToPaymentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromPaymentBalance",
    data: BytesLike
  ): Result;

  events: {
    "StatusChanged(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StatusChanged"): EventFragment;
}

export interface StatusChangedEventObject {
  newStatus: number;
}
export type StatusChangedEvent = TypedEvent<[number], StatusChangedEventObject>;

export type StatusChangedEventFilter = TypedEventFilter<StatusChangedEvent>;

export interface Payment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commitParticle(
      particle: ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositToPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paymentBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFromPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  commitParticle(
    particle: ParticleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositToPaymentBalance(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paymentBalance(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFromPaymentBalance(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commitParticle(
      particle: ParticleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    paymentBalance(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "StatusChanged(uint8)"(newStatus?: null): StatusChangedEventFilter;
    StatusChanged(newStatus?: null): StatusChangedEventFilter;
  };

  estimateGas: {
    commitParticle(
      particle: ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositToPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paymentBalance(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitParticle(
      particle: ParticleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositToPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paymentBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromPaymentBalance(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
