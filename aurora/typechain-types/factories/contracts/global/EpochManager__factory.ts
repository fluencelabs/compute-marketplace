/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EpochManager,
  EpochManagerInterface,
} from "../../../contracts/global/EpochManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "epochDuration_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "currentEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "epochDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102113803806102118339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b61015b806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ff0876a1461003b5780637667180814610059575b600080fd5b610043610077565b60405161005091906100aa565b60405180910390f35b61006161007d565b60405161006e91906100aa565b60405180910390f35b60005481565b600080544261008c91906100f4565b905090565b6000819050919050565b6100a481610091565b82525050565b60006020820190506100bf600083018461009b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006100ff82610091565b915061010a83610091565b92508261011a576101196100c5565b5b82820490509291505056fea2646970667358221220a2de701ea789aaee50005e3202c81cfceede1ea3d3260fc463cc42f652357c3264736f6c63430008110033";

type EpochManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EpochManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EpochManager__factory extends ContractFactory {
  constructor(...args: EpochManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    epochDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EpochManager> {
    return super.deploy(
      epochDuration_,
      overrides || {}
    ) as Promise<EpochManager>;
  }
  override getDeployTransaction(
    epochDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(epochDuration_, overrides || {});
  }
  override attach(address: string): EpochManager {
    return super.attach(address) as EpochManager;
  }
  override connect(signer: Signer): EpochManager__factory {
    return super.connect(signer) as EpochManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EpochManagerInterface {
    return new utils.Interface(_abi) as EpochManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EpochManager {
    return new Contract(address, _abi, signerOrProvider) as EpochManager;
  }
}
