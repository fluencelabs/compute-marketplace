/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StatusController,
  StatusControllerInterface,
} from "../../../contracts/Deal/StatusController";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum DealStatus",
        name: "newStatus",
        type: "uint8",
      },
    ],
    name: "StatusChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum DealStatus",
        name: "status_",
        type: "uint8",
      },
    ],
    name: "changeStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startWorkingEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "status",
    outputs: [
      {
        internalType: "enum DealStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610648806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063200d2ed21461004657806395bc953814610064578063f509404914610080575b600080fd5b61004e61009e565b60405161005b919061040b565b60405180910390f35b61007e60048036038101906100799190610450565b6100b4565b005b61008861022d565b6040516100959190610496565b60405180910390f35b60008060009054906101000a900460ff16905090565b60008060009054906101000a900460ff1690508160018111156100da576100d9610394565b5b8160018111156100ed576100ec610394565b5b036100f8575061022a565b81600181111561010b5761010a610394565b5b81600181111561011e5761011d610394565b5b1415801561014f575060018081111561013a57610139610394565b5b82600181111561014d5761014c610394565b5b145b156101615761015c610237565b6101c8565b81600181111561017457610173610394565b5b81600181111561018757610186610394565b5b141580156101b95750600060018111156101a4576101a3610394565b5b8260018111156101b7576101b6610394565b5b145b156101c7576101c661038a565b5b5b816000806101000a81548160ff021916908360018111156101ec576101eb610394565b5b02179055507fafa725e7f44cadb687a7043853fa1a7e7b8f0da74ce87ec546e9420f04da8c1e82604051610220919061040b565b60405180910390a1505b50565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1663a7c1abe06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a69190610521565b73ffffffffffffffffffffffffffffffffffffffff1663e2d2bfe36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610314919061058c565b73ffffffffffffffffffffffffffffffffffffffff1663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa15801561035e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038291906105e5565b600181905550565b6000600181905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106103d4576103d3610394565b5b50565b60008190506103e5826103c3565b919050565b60006103f5826103d7565b9050919050565b610405816103ea565b82525050565b600060208201905061042060008301846103fc565b92915050565b600080fd5b6002811061043857600080fd5b50565b60008135905061044a8161042b565b92915050565b60006020828403121561046657610465610426565b5b60006104748482850161043b565b91505092915050565b6000819050919050565b6104908161047d565b82525050565b60006020820190506104ab6000830184610487565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104dc826104b1565b9050919050565b60006104ee826104d1565b9050919050565b6104fe816104e3565b811461050957600080fd5b50565b60008151905061051b816104f5565b92915050565b60006020828403121561053757610536610426565b5b60006105458482850161050c565b91505092915050565b6000610559826104d1565b9050919050565b6105698161054e565b811461057457600080fd5b50565b60008151905061058681610560565b92915050565b6000602082840312156105a2576105a1610426565b5b60006105b084828501610577565b91505092915050565b6105c28161047d565b81146105cd57600080fd5b50565b6000815190506105df816105b9565b92915050565b6000602082840312156105fb576105fa610426565b5b6000610609848285016105d0565b9150509291505056fea26469706673582212204039b77254ad11d3026a49b2a267a8a268d93789ffb91db353644b5aa5d8767e64736f6c63430008110033";

type StatusControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StatusControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StatusController__factory extends ContractFactory {
  constructor(...args: StatusControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StatusController> {
    return super.deploy(overrides || {}) as Promise<StatusController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StatusController {
    return super.attach(address) as StatusController;
  }
  override connect(signer: Signer): StatusController__factory {
    return super.connect(signer) as StatusController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StatusControllerInterface {
    return new utils.Interface(_abi) as StatusControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StatusController {
    return new Contract(address, _abi, signerOrProvider) as StatusController;
  }
}
