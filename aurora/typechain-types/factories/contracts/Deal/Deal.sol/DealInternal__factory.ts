/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DealInternal,
  DealInternalInterface,
} from "../../../../contracts/Deal/Deal.sol/DealInternal";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Core",
        name: "core_",
        type: "address",
      },
      {
        internalType: "address",
        name: "paymentToken_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pricePerEpoch_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredStake_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minWorkers_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxWorkers_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "targetWorkers_",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "appCID_",
        type: "string",
      },
      {
        internalType: "string[]",
        name: "effectorWasmsCids_",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum DealStatus",
        name: "newStatus",
        type: "uint8",
      },
    ],
    name: "StatusChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "PAYMENT_DURATION_IN_EPOCHS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610adb380380610adb833981810160405281019061003291906105af565b888973ffffffffffffffffffffffffffffffffffffffff1663ac027f976040518163ffffffff1660e01b8152600401602060405180830381865afa15801561007e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a291906106ef565b89898989898989898973ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508873ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508773ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050866000819055508560018190555084600381905550836004819055508260058190555081600290816101789190610933565b50806006908051906020019061018f9291906101a8565b5050505050505050505050505050505050505050610a05565b8280548282559060005260206000209081019282156101f0579160200282015b828111156101ef5782518290816101df9190610933565b50916020019190600101906101c8565b5b5090506101fd9190610201565b5090565b5b8082111561022157600081816102189190610225565b50600101610202565b5090565b50805461023190610756565b6000825580601f106102435750610262565b601f0160209004906000526020600020908101906102619190610265565b5b50565b5b8082111561027e576000816000905550600101610266565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102c182610296565b9050919050565b60006102d3826102b6565b9050919050565b6102e3816102c8565b81146102ee57600080fd5b50565b600081519050610300816102da565b92915050565b61030f816102b6565b811461031a57600080fd5b50565b60008151905061032c81610306565b92915050565b6000819050919050565b61034581610332565b811461035057600080fd5b50565b6000815190506103628161033c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103bb82610372565b810181811067ffffffffffffffff821117156103da576103d9610383565b5b80604052505050565b60006103ed610282565b90506103f982826103b2565b919050565b600067ffffffffffffffff82111561041957610418610383565b5b61042282610372565b9050602081019050919050565b60005b8381101561044d578082015181840152602081019050610432565b60008484015250505050565b600061046c610467846103fe565b6103e3565b9050828152602081018484840111156104885761048761036d565b5b61049384828561042f565b509392505050565b600082601f8301126104b0576104af610368565b5b81516104c0848260208601610459565b91505092915050565b600067ffffffffffffffff8211156104e4576104e3610383565b5b602082029050602081019050919050565b600080fd5b600061050d610508846104c9565b6103e3565b905080838252602082019050602084028301858111156105305761052f6104f5565b5b835b8181101561057757805167ffffffffffffffff81111561055557610554610368565b5b808601610562898261049b565b85526020850194505050602081019050610532565b5050509392505050565b600082601f83011261059657610595610368565b5b81516105a68482602086016104fa565b91505092915050565b60008060008060008060008060006101208a8c0312156105d2576105d161028c565b5b60006105e08c828d016102f1565b99505060206105f18c828d0161031d565b98505060406106028c828d01610353565b97505060606106138c828d01610353565b96505060806106248c828d01610353565b95505060a06106358c828d01610353565b94505060c06106468c828d01610353565b93505060e08a015167ffffffffffffffff81111561066757610666610291565b5b6106738c828d0161049b565b9250506101008a015167ffffffffffffffff81111561069557610694610291565b5b6106a18c828d01610581565b9150509295985092959850929598565b60006106bc826102b6565b9050919050565b6106cc816106b1565b81146106d757600080fd5b50565b6000815190506106e9816106c3565b92915050565b6000602082840312156107055761070461028c565b5b6000610713848285016106da565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061076e57607f821691505b60208210810361078157610780610727565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026107e97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826107ac565b6107f386836107ac565b95508019841693508086168417925050509392505050565b6000819050919050565b600061083061082b61082684610332565b61080b565b610332565b9050919050565b6000819050919050565b61084a83610815565b61085e61085682610837565b8484546107b9565b825550505050565b600090565b610873610866565b61087e818484610841565b505050565b5b818110156108a25761089760008261086b565b600181019050610884565b5050565b601f8211156108e7576108b881610787565b6108c18461079c565b810160208510156108d0578190505b6108e46108dc8561079c565b830182610883565b50505b505050565b600082821c905092915050565b600061090a600019846008026108ec565b1980831691505092915050565b600061092383836108f9565b9150826002028217905092915050565b61093c8261071c565b67ffffffffffffffff81111561095557610954610383565b5b61095f8254610756565b61096a8282856108a6565b600060209050601f83116001811461099d576000841561098b578287015190505b6109958582610917565b8655506109fd565b601f1984166109ab86610787565b60005b828110156109d3578489015182556001820191506020850194506020810190506109ae565b868310156109f057848901516109ec601f8916826108f9565b8355505b6001600288020188555050505b505050505050565b60805160a05160c05160b2610a2960003960005050600050506000505060b26000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806340aca67d14602d575b600080fd5b60336047565b604051603e91906063565b60405180910390f35b600381565b6000819050919050565b605d81604c565b82525050565b6000602082019050607660008301846056565b9291505056fea26469706673582212207d9a4ba41965eafc4f0ba0f8b9a99d79b8ede9ab6edec0865409ec65ddb24e8564736f6c63430008110033";

type DealInternalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DealInternalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DealInternal__factory extends ContractFactory {
  constructor(...args: DealInternalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    core_: PromiseOrValue<string>,
    paymentToken_: PromiseOrValue<string>,
    pricePerEpoch_: PromiseOrValue<BigNumberish>,
    requiredStake_: PromiseOrValue<BigNumberish>,
    minWorkers_: PromiseOrValue<BigNumberish>,
    maxWorkers_: PromiseOrValue<BigNumberish>,
    targetWorkers_: PromiseOrValue<BigNumberish>,
    appCID_: PromiseOrValue<string>,
    effectorWasmsCids_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DealInternal> {
    return super.deploy(
      core_,
      paymentToken_,
      pricePerEpoch_,
      requiredStake_,
      minWorkers_,
      maxWorkers_,
      targetWorkers_,
      appCID_,
      effectorWasmsCids_,
      overrides || {}
    ) as Promise<DealInternal>;
  }
  override getDeployTransaction(
    core_: PromiseOrValue<string>,
    paymentToken_: PromiseOrValue<string>,
    pricePerEpoch_: PromiseOrValue<BigNumberish>,
    requiredStake_: PromiseOrValue<BigNumberish>,
    minWorkers_: PromiseOrValue<BigNumberish>,
    maxWorkers_: PromiseOrValue<BigNumberish>,
    targetWorkers_: PromiseOrValue<BigNumberish>,
    appCID_: PromiseOrValue<string>,
    effectorWasmsCids_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      core_,
      paymentToken_,
      pricePerEpoch_,
      requiredStake_,
      minWorkers_,
      maxWorkers_,
      targetWorkers_,
      appCID_,
      effectorWasmsCids_,
      overrides || {}
    );
  }
  override attach(address: string): DealInternal {
    return super.attach(address) as DealInternal;
  }
  override connect(signer: Signer): DealInternal__factory {
    return super.connect(signer) as DealInternal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DealInternalInterface {
    return new utils.Interface(_abi) as DealInternalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DealInternal {
    return new Contract(address, _abi, signerOrProvider) as DealInternal;
  }
}
