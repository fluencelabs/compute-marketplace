/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ModuleBase,
  ModuleBaseInterface,
} from "../../../../contracts/deal/base/ModuleBase";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b506080516110d361007a6000396000818160ab0152818161013901528181610233015281816102c1015261037101526110d36000f3fe6080604052600436106100345760003560e01c80633659cfe6146100395780634f1ef2861461006257806352d1902d1461007e575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610943565b6100a9565b005b61007c60048036038101906100779190610ab6565b610231565b005b34801561008a57600080fd5b5061009361036d565b6040516100a09190610b2b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012e90610bc9565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610176610426565b73ffffffffffffffffffffffffffffffffffffffff16146101cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c390610c5b565b60405180910390fd5b6101d58161047d565b61022e81600067ffffffffffffffff8111156101f4576101f361098b565b5b6040519080825280601f01601f1916602001820160405280156102265781602001600182028036833780820191505090505b506000610480565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036102bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b690610bc9565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166102fe610426565b73ffffffffffffffffffffffffffffffffffffffff1614610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034b90610c5b565b60405180910390fd5b61035d8261047d565b61036982826001610480565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f490610ced565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60006104547f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6105ee565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b50565b6104ac7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b6105f8565b60000160009054906101000a900460ff16156104d0576104cb83610602565b6105e9565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561053857506040513d601f19601f820116820180604052508101906105359190610d39565b60015b610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e90610dd8565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390610e6a565b60405180910390fd5b506105e88383836106bb565b5b505050565b6000819050919050565b6000819050919050565b61060b816106e7565b61064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190610efc565b60405180910390fd5b806106777f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6105ee565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106c48361070a565b6000825111806106d15750805b156106e2576106e08383610759565b505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61071381610602565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b606061077e838360405180606001604052806027815260200161107760279139610786565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516107b09190610f8d565b600060405180830381855af49150503d80600081146107eb576040519150601f19603f3d011682016040523d82523d6000602084013e6107f0565b606091505b50915091506108018683838761080c565b925050509392505050565b6060831561086e57600083510361086657610826856106e7565b610865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085c90610ff0565b60405180910390fd5b5b829050610879565b6108788383610881565b5b949350505050565b6000825111156108945781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c89190611054565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610910826108e5565b9050919050565b61092081610905565b811461092b57600080fd5b50565b60008135905061093d81610917565b92915050565b600060208284031215610959576109586108db565b5b60006109678482850161092e565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109c38261097a565b810181811067ffffffffffffffff821117156109e2576109e161098b565b5b80604052505050565b60006109f56108d1565b9050610a0182826109ba565b919050565b600067ffffffffffffffff821115610a2157610a2061098b565b5b610a2a8261097a565b9050602081019050919050565b82818337600083830152505050565b6000610a59610a5484610a06565b6109eb565b905082815260208101848484011115610a7557610a74610975565b5b610a80848285610a37565b509392505050565b600082601f830112610a9d57610a9c610970565b5b8135610aad848260208601610a46565b91505092915050565b60008060408385031215610acd57610acc6108db565b5b6000610adb8582860161092e565b925050602083013567ffffffffffffffff811115610afc57610afb6108e0565b5b610b0885828601610a88565b9150509250929050565b6000819050919050565b610b2581610b12565b82525050565b6000602082019050610b406000830184610b1c565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000610bb3602c83610b46565b9150610bbe82610b57565b604082019050919050565b60006020820190508181036000830152610be281610ba6565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000610c45602c83610b46565b9150610c5082610be9565b604082019050919050565b60006020820190508181036000830152610c7481610c38565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000610cd7603883610b46565b9150610ce282610c7b565b604082019050919050565b60006020820190508181036000830152610d0681610cca565b9050919050565b610d1681610b12565b8114610d2157600080fd5b50565b600081519050610d3381610d0d565b92915050565b600060208284031215610d4f57610d4e6108db565b5b6000610d5d84828501610d24565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000610dc2602e83610b46565b9150610dcd82610d66565b604082019050919050565b60006020820190508181036000830152610df181610db5565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000610e54602983610b46565b9150610e5f82610df8565b604082019050919050565b60006020820190508181036000830152610e8381610e47565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000610ee6602d83610b46565b9150610ef182610e8a565b604082019050919050565b60006020820190508181036000830152610f1581610ed9565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610f50578082015181840152602081019050610f35565b60008484015250505050565b6000610f6782610f1c565b610f718185610f27565b9350610f81818560208601610f32565b80840191505092915050565b6000610f998284610f5c565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610fda601d83610b46565b9150610fe582610fa4565b602082019050919050565b6000602082019050818103600083015261100981610fcd565b9050919050565b600081519050919050565b600061102682611010565b6110308185610b46565b9350611040818560208601610f32565b6110498161097a565b840191505092915050565b6000602082019050818103600083015261106e818461101b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122070fd9f892b15bcd8ffe7be9797ab62e1c3713178bf8bb5ef114e8ce4214f078264736f6c63430008110033";

type ModuleBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ModuleBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ModuleBase__factory extends ContractFactory {
  constructor(...args: ModuleBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ModuleBase> {
    return super.deploy(overrides || {}) as Promise<ModuleBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ModuleBase {
    return super.attach(address) as ModuleBase;
  }
  override connect(signer: Signer): ModuleBase__factory {
    return super.connect(signer) as ModuleBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ModuleBaseInterface {
    return new utils.Interface(_abi) as ModuleBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ModuleBase {
    return new Contract(address, _abi, signerOrProvider) as ModuleBase;
  }
}
