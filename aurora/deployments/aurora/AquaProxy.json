{
  "address": "0x95589Ce9145920a228f23E751AA1CAF7948790BB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "aquaVMAddress_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "air",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevData",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "params",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "callResults",
          "type": "string"
        }
      ],
      "name": "VerifyParticle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aquaVMAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aquaVMImplicitAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "particleHash",
          "type": "bytes32"
        }
      ],
      "name": "callback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "near",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "contract IERC20",
          "name": "wNEAR",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "particlesStatuses",
      "outputs": [
        {
          "internalType": "enum AquaProxy.ParticleStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfReprsentativeImplicitAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "air",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prevData",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "params",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callResults",
              "type": "string"
            }
          ],
          "internalType": "struct AquaProxy.Particle",
          "name": "particle",
          "type": "tuple"
        }
      ],
      "name": "verifyParticle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2fcd9ced1212d63d9691f571fca4852f4d237e9cbed4273aebea3baa0c07c63",
  "receipt": {
    "to": null,
    "from": "0x85fbC7b5087cC7b4Fe3Fe97755D8E01c9Fd727D9",
    "contractAddress": "0x95589Ce9145920a228f23E751AA1CAF7948790BB",
    "transactionIndex": 0,
    "gasUsed": "1849569",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd480d892f3b469288d67e09c8256f80da882908cfb29c282438671973f09640a",
    "transactionHash": "0xb2fcd9ced1212d63d9691f571fca4852f4d237e9cbed4273aebea3baa0c07c63",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 104279345,
        "transactionHash": "0xb2fcd9ced1212d63d9691f571fca4852f4d237e9cbed4273aebea3baa0c07c63",
        "address": "0x4861825E75ab14553E5aF711EbbE6873d369d146",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000095589ce9145920a228f23e751aa1caf7948790bb",
          "0x000000000000000000000000516cded1d16af10cad47d6d49128e2eb7d27b372"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xd480d892f3b469288d67e09c8256f80da882908cfb29c282438671973f09640a"
      }
    ],
    "blockNumber": 104279345,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "dev-1666986633374-40574705536935"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d61e53273f3e0ca6e223a4e5bfc299a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"aquaVMAddress_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"air\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevData\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"callResults\",\"type\":\"string\"}],\"name\":\"VerifyParticle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aquaVMAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aquaVMImplicitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"particleHash\",\"type\":\"bytes32\"}],\"name\":\"callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"near\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"wNEAR\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"particlesStatuses\",\"outputs\":[{\"internalType\":\"enum AquaProxy.ParticleStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfReprsentativeImplicitAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"air\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prevData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callResults\",\"type\":\"string\"}],\"internalType\":\"struct AquaProxy.Particle\",\"name\":\"particle\",\"type\":\"tuple\"}],\"name\":\"verifyParticle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AquaProxy.sol\":\"AquaProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/AquaProxy.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"./auroraSDK/AuroraSdk.sol\\\";\\n\\ncontract AquaProxy {\\n    using AuroraSdk for NEAR;\\n    using AuroraSdk for PromiseWithCallback;\\n    using AuroraSdk for PromiseCreateArgs;\\n\\n    enum ParticleStatus {\\n        None,\\n        Pending,\\n        Success,\\n        Failure\\n    }\\n\\n    struct Particle {\\n        string air;\\n        string prevData;\\n        string params;\\n        string callResults;\\n    }\\n\\n    IERC20 constant wNEAR = IERC20(0x4861825E75ab14553E5aF711EbbE6873d369d146);\\n\\n    address public immutable selfReprsentativeImplicitAddress;\\n    address public immutable aquaVMImplicitAddress;\\n\\n    NEAR public near;\\n    string public aquaVMAddress;\\n    mapping(bytes32 => ParticleStatus) public particlesStatuses;\\n\\n    event VerifyParticle(\\n        bytes32 hash,\\n        string air,\\n        string prevData,\\n        string params,\\n        string callResults\\n    );\\n\\n    uint64 constant VS_NEAR_GAS = 30_000_000_000_000;\\n\\n    constructor(string memory aquaVMAddress_) {\\n        aquaVMAddress = aquaVMAddress_;\\n        aquaVMImplicitAddress = AuroraSdk.implicitAuroraAddress(aquaVMAddress);\\n\\n        near = AuroraSdk.initNear(wNEAR);\\n\\n        selfReprsentativeImplicitAddress = AuroraSdk\\n            .nearRepresentitiveImplicitAddress(address(this));\\n    }\\n\\n    function verifyParticle(Particle calldata particle) public {\\n        bytes32 particleHash = keccak256(\\n            abi.encodePacked(\\n                particle.air,\\n                particle.prevData,\\n                particle.params,\\n                particle.callResults\\n            )\\n        );\\n\\n        require(\\n            particlesStatuses[particleHash] == ParticleStatus.None,\\n            \\\"Particle already executed\\\"\\n        );\\n\\n        PromiseCreateArgs memory verifyScriptCall = near.call(\\n            aquaVMAddress,\\n            \\\"verify_script\\\",\\n            abi.encodePacked(\\n                Codec.encode(bytes(particle.air)),\\n                Codec.encode(bytes(particle.prevData)),\\n                Codec.encode(bytes(particle.params)),\\n                Codec.encode(bytes(particle.callResults))\\n            ),\\n            0,\\n            VS_NEAR_GAS\\n        );\\n\\n        PromiseCreateArgs memory callbackPromise = near.auroraCall(\\n            address(this),\\n            abi.encodeWithSelector(this.callback.selector, particleHash),\\n            0,\\n            VS_NEAR_GAS\\n        );\\n\\n        verifyScriptCall.then(callbackPromise).lazy_transact();\\n\\n        particlesStatuses[particleHash] = ParticleStatus.Pending;\\n\\n        emit VerifyParticle(\\n            particleHash,\\n            particle.air,\\n            particle.prevData,\\n            particle.params,\\n            particle.callResults\\n        );\\n    }\\n\\n    function callback(bytes32 particleHash) public {\\n        require(\\n            msg.sender == selfReprsentativeImplicitAddress,\\n            \\\"ERR_ACCESS_DENIED\\\"\\n        );\\n\\n        require(\\n            particlesStatuses[particleHash] == ParticleStatus.Pending,\\n            \\\"Particle already executed\\\"\\n        );\\n\\n        if (\\n            AuroraSdk.promiseResult(0).status != PromiseResultStatus.Successful\\n        ) {\\n            particlesStatuses[particleHash] = ParticleStatus.Failure;\\n        } else {\\n            particlesStatuses[particleHash] = ParticleStatus.Success;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa55af4233be84c093f2f4981d29e4f7f27e37bbd3397b3abbaa235935c511b12\"},\"contracts/auroraSDK/AuroraSdk.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Codec.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Address of Cross Contract Call precompile in Aurora.\\n// It allows scheduling new promises to NEAR contracts.\\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the predecessor account id of the current call.\\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the current account id of the current call.\\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\\n// Addresss of promise result precompile in Aurora.\\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\\n// Address of wNEAR ERC20 on mainnet\\naddress constant wNEAR_MAINNET = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n\\nstruct NEAR {\\n    /// Wether the represenative NEAR account id for this contract\\n    /// has already been created or not. This is required since the\\n    /// first cross contract call requires attaching extra deposit\\n    /// to cover storage staking balance.\\n    bool initialized;\\n    /// Address of wNEAR token contract. It is used to charge the user\\n    /// required tokens for paying NEAR storage fees and attached balance\\n    /// for cross contract calls.\\n    IERC20 wNEAR;\\n}\\n\\nlibrary AuroraSdk {\\n    using Codec for bytes;\\n    using Codec for PromiseCreateArgs;\\n    using Codec for PromiseWithCallback;\\n    using Codec for Borsh.Data;\\n    using Borsh for Borsh.Data;\\n\\n    /// Create an instance of NEAR object. Requires the address at which\\n    /// wNEAR ERC20 token contract is deployed.\\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\\n        NEAR memory near = NEAR(false, wNEAR);\\n        near.wNEAR.approve(\\n            XCC_PRECOMPILE,\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        return near;\\n    }\\n\\n    /// Default configuration for mainnet.\\n    function mainnet() public returns (NEAR memory) {\\n        return initNear(IERC20(wNEAR_MAINNET));\\n    }\\n\\n    /// Compute NEAR represtentative account for the given Aurora address.\\n    /// This is the NEAR account created by the cross contract call precompile.\\n    function nearRepresentative(address account)\\n        public\\n        returns (string memory)\\n    {\\n        return addressSubAccount(account, currentAccountId());\\n    }\\n\\n    /// Prepends the given account ID with the given address (hex-encoded).\\n    function addressSubAccount(address account, string memory accountId)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Utils.bytesToHex(abi.encodePacked((bytes20(account)))),\\n                    \\\".\\\",\\n                    accountId\\n                )\\n            );\\n    }\\n\\n    /// Compute implicity Aurora Address for the given NEAR account.\\n    function implicitAuroraAddress(string memory accountId)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\\n    }\\n\\n    /// Compute the implicit Aurora address of the represenative NEAR account\\n    /// for the given Aurora address. Useful when a contract wants to call\\n    /// itself via a callback using cross contract call precompile.\\n    function nearRepresentitiveImplicitAddress(address account)\\n        public\\n        returns (address)\\n    {\\n        return implicitAuroraAddress(nearRepresentative(account));\\n    }\\n\\n    /// Get the promise result at the specified index.\\n    function promiseResult(uint256 index)\\n        public\\n        returns (PromiseResult memory result)\\n    {\\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE\\n            .call(\\\"\\\");\\n        require(success);\\n\\n        Borsh.Data memory borsh = Borsh.from(returnData);\\n\\n        uint32 length = borsh.decodeU32();\\n        require(index < length, \\\"Index out of bounds\\\");\\n\\n        for (uint256 i = 0; i < index; i++) {\\n            PromiseResultStatus status = PromiseResultStatus(\\n                uint8(borsh.decodeU8())\\n            );\\n            if (status == PromiseResultStatus.Successful) {\\n                borsh.skipBytes();\\n            }\\n        }\\n\\n        result.status = PromiseResultStatus(borsh.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = borsh.decodeBytes();\\n        }\\n    }\\n\\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\\n    function currentAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE\\n            .call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Get the NEAR account id of the predecessor contract.\\n    function predecessorAccountId() public returns (string memory) {\\n        (\\n            bool success,\\n            bytes memory returnData\\n        ) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Crease a base promise. This is not immediately schedule for execution\\n    /// until transact is called. It can be combined with other promises using\\n    /// `then` combinator.\\n    ///\\n    /// Input is not checekd during promise creation. If it is invalid, the\\n    /// transaction will be scheduled either way, but it will fail during execution.\\n    function call(\\n        NEAR storage near,\\n        string memory targetAccountId,\\n        string memory method,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        /// Need to capture nearBalance before we modify it so that we don't\\n        /// double-charge the user for their initialization cost.\\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(\\n            targetAccountId,\\n            method,\\n            args,\\n            nearBalance,\\n            nearGas\\n        );\\n\\n        if (!near.initialized) {\\n            /// If the contract needs to be initialized, we need to attach\\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\\n            nearBalance += 2_000_000_000_000_000_000_000_000;\\n            near.initialized = true;\\n        }\\n\\n        if (nearBalance > 0) {\\n            near.wNEAR.transferFrom(\\n                msg.sender,\\n                address(this),\\n                uint256(nearBalance)\\n            );\\n        }\\n\\n        return promise_args;\\n    }\\n\\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\\n    /// to a controct inside `Aurora`.\\n    function auroraCall(\\n        NEAR storage near,\\n        address target,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        return\\n            call(\\n                near,\\n                currentAccountId(),\\n                \\\"call\\\",\\n                abi.encodePacked(uint8(0), target, uint256(0), args.encode()),\\n                nearBalance,\\n                nearGas\\n            );\\n    }\\n\\n    /// Schedule a base promise to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    function transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    ///\\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\\n    /// https://github.com/ethereum/solidity/issues/869\\n    function transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\\n    /// A separate transaction to execute the scheduled promise is needed.\\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Create a promise with callback from two given promises.\\n    function then(\\n        PromiseCreateArgs memory base,\\n        PromiseCreateArgs memory callback\\n    ) public pure returns (PromiseWithCallback memory) {\\n        return PromiseWithCallback(base, callback);\\n    }\\n}\\n\",\"keccak256\":\"0x8b0085ffaf4b5130088c916ee5af235c7b48a26ffa634f88c9b5d6d930a9c97d\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(\\n                data.ptr + length <= data.end,\\n                \\\"Parse error: unexpected EOI\\\"\\n            );\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a3704c81feec760578cfbfb2ec7038d9dbffda15d3f5706946fecbcd13e869d\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(bytes(nearPromise.targetAccountId)),\\n                encode(bytes(nearPromise.method)),\\n                encode(nearPromise.args),\\n                encodeU128(nearPromise.nearBalance),\\n                encodeU64(nearPromise.nearGas)\\n            );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(nearPromise.base),\\n                encode(nearPromise.callback)\\n            );\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseCreateArgs memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Create),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseWithCallback memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Callback),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data)\\n        public\\n        pure\\n        returns (PromiseResult memory result)\\n    {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(\\n            uint8(data.decodeU8())\\n        );\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa218811f1575083887938428d0d1b4001b26609ae4f98e248e9c66dfd34fcbfe\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant {\\n    /// Basic NEAR promise\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode {\\n    /// Eager mode means that the promise WILL be executed in a single\\n    /// NEAR transaction.\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus {\\n    /// This status should not be reachable.\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xfd72f1cab846359ba751ccf4a0ed670aef5016f3239e60547ae88bee459d8437\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v =\\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v =\\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) |\\n            ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v =\\n            ((v & 0x00000000ffffffff00000000ffffffff) << 32) |\\n            ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v =\\n            ((v &\\n                0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) <<\\n                8) |\\n            ((v &\\n                0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >>\\n                8);\\n        v =\\n            ((v &\\n                0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) <<\\n                16) |\\n            ((v &\\n                0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >>\\n                16);\\n        v =\\n            ((v &\\n                0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) <<\\n                32) |\\n            ((v &\\n                0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >>\\n                32);\\n        v =\\n            ((v &\\n                0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) <<\\n                64) |\\n            ((v &\\n                0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >>\\n                64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end := add(\\n                    res,\\n                    and(\\n                        add(length, 63),\\n                        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\\n                    )\\n                )\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length)\\n        internal\\n        view\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0xff8fdd1fc95ec1ab0f94ababeafdeea46fc110367cfed77c43a17c2f4fd03a9c\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620028353803806200283583398181016040528101906200003791906200043f565b8060019081620000489190620006db565b5073f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC63cb4500e760016040518263ffffffff1660e01b815260040162000083919062000863565b602060405180830381865af4158015620000a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c79190620008ec565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505073f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC6336a80dbc734861825e75ab14553e5af711ebbe6873d369d1466040518263ffffffff1660e01b81526004016200014791906200097f565b6040805180830381865af415801562000164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018a919062000a7c565b6000808201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505073f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC63a33598bf306040518263ffffffff1660e01b81526004016200022e919062000abf565b602060405180830381865af41580156200024c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002729190620008ec565b73ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000adc565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200031582620002ca565b810181811067ffffffffffffffff82111715620003375762000336620002db565b5b80604052505050565b60006200034c620002ac565b90506200035a82826200030a565b919050565b600067ffffffffffffffff8211156200037d576200037c620002db565b5b6200038882620002ca565b9050602081019050919050565b60005b83811015620003b557808201518184015260208101905062000398565b60008484015250505050565b6000620003d8620003d2846200035f565b62000340565b905082815260208101848484011115620003f757620003f6620002c5565b5b6200040484828562000395565b509392505050565b600082601f830112620004245762000423620002c0565b5b815162000436848260208601620003c1565b91505092915050565b600060208284031215620004585762000457620002b6565b5b600082015167ffffffffffffffff811115620004795762000478620002bb565b5b62000487848285016200040c565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004e357607f821691505b602082108103620004f957620004f86200049b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000524565b6200056f868362000524565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005bc620005b6620005b08462000587565b62000591565b62000587565b9050919050565b6000819050919050565b620005d8836200059b565b620005f0620005e782620005c3565b84845462000531565b825550505050565b600090565b62000607620005f8565b62000614818484620005cd565b505050565b5b818110156200063c5762000630600082620005fd565b6001810190506200061a565b5050565b601f8211156200068b576200065581620004ff565b620006608462000514565b8101602085101562000670578190505b620006886200067f8562000514565b83018262000619565b50505b505050565b600082821c905092915050565b6000620006b06000198460080262000690565b1980831691505092915050565b6000620006cb83836200069d565b9150826002028217905092915050565b620006e68262000490565b67ffffffffffffffff811115620007025762000701620002db565b5b6200070e8254620004ca565b6200071b82828562000640565b600060209050601f8311600181146200075357600084156200073e578287015190505b6200074a8582620006bd565b865550620007ba565b601f1984166200076386620004ff565b60005b828110156200078d5784890151825560018201915060208501945060208101905062000766565b86831015620007ad5784890151620007a9601f8916826200069d565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b60008154620007e281620004ca565b620007ee8186620007c2565b945060018216600081146200080c576001811462000823576200085a565b60ff1983168652811515602002860193506200085a565b6200082e85620004ff565b60005b83811015620008525781548189015260018201915060208101905062000831565b808801955050505b50505092915050565b600060208201905081810360008301526200087f8184620007d3565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008b48262000887565b9050919050565b620008c681620008a7565b8114620008d257600080fd5b50565b600081519050620008e681620008bb565b92915050565b600060208284031215620009055762000904620002b6565b5b60006200091584828501620008d5565b91505092915050565b60006200093f62000939620009338462000887565b62000591565b62000887565b9050919050565b600062000953826200091e565b9050919050565b6000620009678262000946565b9050919050565b62000979816200095a565b82525050565b60006020820190506200099660008301846200096e565b92915050565b600080fd5b60008115159050919050565b620009b881620009a1565b8114620009c457600080fd5b50565b600081519050620009d881620009ad565b92915050565b6000620009eb82620008a7565b9050919050565b620009fd81620009de565b811462000a0957600080fd5b50565b60008151905062000a1d81620009f2565b92915050565b60006040828403121562000a3c5762000a3b6200099c565b5b62000a48604062000340565b9050600062000a5a84828501620009c7565b600083015250602062000a708482850162000a0c565b60208301525092915050565b60006040828403121562000a955762000a94620002b6565b5b600062000aa58482850162000a23565b91505092915050565b62000ab981620008a7565b82525050565b600060208201905062000ad6600083018462000aae565b92915050565b60805160a051611d2c62000b0960003960006101650152600081816101a901526108ec0152611d2c6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806390e796211161005b57806390e79621146100ee578063a689408c1461010c578063df13994e14610128578063e602af76146101445761007d565b80634261bab7146100825780634344767e146100a05780637b4dc7a7146100d0575b600080fd5b61008a610163565b6040516100979190610bac565b60405180910390f35b6100ba60048036038101906100b59190610c11565b610187565b6040516100c79190610cb5565b60405180910390f35b6100d86101a7565b6040516100e59190610bac565b60405180910390f35b6100f66101cb565b6040516101039190610d60565b60405180910390f35b61012660048036038101906101219190610da6565b610259565b005b610142600480360381019061013d9190610c11565b6108ea565b005b61014c610b2c565b60405161015a929190610e69565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600180546101d890610ec1565b80601f016020809104026020016040519081016040528092919081815260200182805461020490610ec1565b80156102515780601f1061022657610100808354040283529160200191610251565b820191906000526020600020905b81548152906001019060200180831161023457829003601f168201915b505050505081565b600081806000019061026b9190610f01565b83806020019061027b9190610f01565b85806040019061028b9190610f01565b87806060019061029b9190610f01565b6040516020016102b2989796959493929190610fa3565b604051602081830303815290604052805190602001209050600060038111156102de576102dd610c3e565b5b6002600083815260200190815260200160002060009054906101000a900460ff16600381111561031157610310610c3e565b5b14610351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034890611035565b60405180910390fd5b60008073f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC63925be54d90916001736b1A854C0A2Aec23357d117BDB680184671833Cb6312496a1b88806000019061039c9190610f01565b6040518363ffffffff1660e01b81526004016103b9929190611093565b600060405180830381865af41580156103d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103ff91906111dd565b736b1A854C0A2Aec23357d117BDB680184671833Cb6312496a1b8980602001906104299190610f01565b6040518363ffffffff1660e01b8152600401610446929190611093565b600060405180830381865af4158015610463573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061048c91906111dd565b736b1A854C0A2Aec23357d117BDB680184671833Cb6312496a1b8a80604001906104b69190610f01565b6040518363ffffffff1660e01b81526004016104d3929190611093565b600060405180830381865af41580156104f0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061051991906111dd565b736b1A854C0A2Aec23357d117BDB680184671833Cb6312496a1b8b80606001906105439190610f01565b6040518363ffffffff1660e01b8152600401610560929190611093565b600060405180830381865af415801561057d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105a691906111dd565b6040516020016105b9949392919061126d565b6040516020818303038152906040526000651b48eb57e0006040518663ffffffff1660e01b81526004016105f195949392919061145b565b600060405180830381865af415801561060e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061063791906116b2565b905060008073f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC6331b0e0e490913063df13994e60e01b87604051602401610672919061170a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506000651b48eb57e0006040518663ffffffff1660e01b81526004016106f8959493929190611734565b600060405180830381865af4158015610715573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061073e91906116b2565b90508173f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC63987cbd719091836040518363ffffffff1660e01b815260040161077b9291906118c4565b600060405180830381865af4158015610798573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107c19190611983565b73f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC6372e3f69990916040518263ffffffff1660e01b81526004016107f99190611a94565b60006040518083038186803b15801561081157600080fd5b505af4158015610825573d6000803e3d6000fd5b5050505060016002600085815260200190815260200160002060006101000a81548160ff021916908360038111156108605761085f610c3e565b5b02179055507f1a0dda9a5e7155569c5ea66d5a71404b69149aae44ee8940fefea3053524d1e3838580600001906108979190610f01565b8780602001906108a79190610f01565b8980604001906108b79190610f01565b8b80606001906108c79190610f01565b6040516108dc99989796959493929190611ae3565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90611ba6565b60405180910390fd5b6001600381111561098c5761098b610c3e565b5b6002600083815260200190815260200160002060009054906101000a900460ff1660038111156109bf576109be610c3e565b5b146109ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f690611035565b60405180910390fd5b60016002811115610a1357610a12610c3e565b5b73f7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC6310cdb49360006040518263ffffffff1660e01b8152600401610a4b9190611c01565b600060405180830381865af4158015610a68573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a919190611cad565b600001516002811115610aa757610aa6610c3e565b5b14610aed5760036002600083815260200190815260200160002060006101000a81548160ff02191690836003811115610ae357610ae2610c3e565b5b0217905550610b29565b600280600083815260200190815260200160002060006101000a81548160ff02191690836003811115610b2357610b22610c3e565b5b02179055505b50565b60008060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9682610b6b565b9050919050565b610ba681610b8b565b82525050565b6000602082019050610bc16000830184610b9d565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610bee81610bdb565b8114610bf957600080fd5b50565b600081359050610c0b81610be5565b92915050565b600060208284031215610c2757610c26610bd1565b5b6000610c3584828501610bfc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610c7e57610c7d610c3e565b5b50565b6000819050610c8f82610c6d565b919050565b6000610c9f82610c81565b9050919050565b610caf81610c94565b82525050565b6000602082019050610cca6000830184610ca6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d0a578082015181840152602081019050610cef565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d3282610cd0565b610d3c8185610cdb565b9350610d4c818560208601610cec565b610d5581610d16565b840191505092915050565b60006020820190508181036000830152610d7a8184610d27565b905092915050565b600080fd5b600060808284031215610d9d57610d9c610d82565b5b81905092915050565b600060208284031215610dbc57610dbb610bd1565b5b600082013567ffffffffffffffff811115610dda57610dd9610bd6565b5b610de684828501610d87565b91505092915050565b60008115159050919050565b610e0481610def565b82525050565b6000819050919050565b6000610e2f610e2a610e2584610b6b565b610e0a565b610b6b565b9050919050565b6000610e4182610e14565b9050919050565b6000610e5382610e36565b9050919050565b610e6381610e48565b82525050565b6000604082019050610e7e6000830185610dfb565b610e8b6020830184610e5a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ed957607f821691505b602082108103610eec57610eeb610e92565b5b50919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610f1e57610f1d610ef2565b5b80840192508235915067ffffffffffffffff821115610f4057610f3f610ef7565b5b602083019250600182023603831315610f5c57610f5b610efc565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000610f8a8385610f64565b9350610f97838584610f6f565b82840190509392505050565b6000610fb0828a8c610f7e565b9150610fbd82888a610f7e565b9150610fca828688610f7e565b9150610fd7828486610f7e565b91508190509998505050505050505050565b7f5061727469636c6520616c726561647920657865637574656400000000000000600082015250565b600061101f601983610cdb565b915061102a82610fe9565b602082019050919050565b6000602082019050818103600083015261104e81611012565b9050919050565b600082825260208201905092915050565b60006110728385611055565b935061107f838584610f6f565b61108883610d16565b840190509392505050565b600060208201905081810360008301526110ae818486611066565b90509392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110f982610d16565b810181811067ffffffffffffffff82111715611118576111176110c1565b5b80604052505050565b600061112b610bc7565b905061113782826110f0565b919050565b600067ffffffffffffffff821115611157576111566110c1565b5b61116082610d16565b9050602081019050919050565b600061118061117b8461113c565b611121565b90508281526020810184848401111561119c5761119b6110bc565b5b6111a7848285610cec565b509392505050565b600082601f8301126111c4576111c36110b7565b5b81516111d484826020860161116d565b91505092915050565b6000602082840312156111f3576111f2610bd1565b5b600082015167ffffffffffffffff81111561121157611210610bd6565b5b61121d848285016111af565b91505092915050565b600081519050919050565b600081905092915050565b600061124782611226565b6112518185611231565b9350611261818560208601610cec565b80840191505092915050565b6000611279828761123c565b9150611285828661123c565b9150611291828561123c565b915061129d828461123c565b915081905095945050505050565b8082525050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b600081546112e581610ec1565b6112ef81866112b2565b9450600182166000811461130a576001811461132057611353565b60ff198316865281151560200286019350611353565b611329856112c3565b60005b8381101561134b5781548189015260018201915060208101905061132c565b808801955050505b50505092915050565b7f7665726966795f73637269707400000000000000000000000000000000000000600082015250565b6000611392600d836112b2565b915061139d8261135c565b602082019050919050565b60006113b382611226565b6113bd8185611055565b93506113cd818560208601610cec565b6113d681610d16565b840191505092915050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061142261141d611418846113e1565b610e0a565b6113eb565b9050919050565b61143281611407565b82525050565b600067ffffffffffffffff82169050919050565b61145581611438565b82525050565b600060c08201905061147060008301886112ab565b818103602083015261148281876112d8565b9050818103604083015261149581611385565b905081810360608301526114a981866113a8565b90506114b86080830185611429565b6114c560a083018461144c565b9695505050505050565b600080fd5b600080fd5b600067ffffffffffffffff8211156114f4576114f36110c1565b5b6114fd82610d16565b9050602081019050919050565b600061151d611518846114d9565b611121565b905082815260208101848484011115611539576115386110bc565b5b611544848285610cec565b509392505050565b600082601f830112611561576115606110b7565b5b815161157184826020860161150a565b91505092915050565b611583816113eb565b811461158e57600080fd5b50565b6000815190506115a08161157a565b92915050565b6115af81611438565b81146115ba57600080fd5b50565b6000815190506115cc816115a6565b92915050565b600060a082840312156115e8576115e76114cf565b5b6115f260a0611121565b9050600082015167ffffffffffffffff811115611612576116116114d4565b5b61161e8482850161154c565b600083015250602082015167ffffffffffffffff811115611642576116416114d4565b5b61164e8482850161154c565b602083015250604082015167ffffffffffffffff811115611672576116716114d4565b5b61167e848285016111af565b604083015250606061169284828501611591565b60608301525060806116a6848285016115bd565b60808301525092915050565b6000602082840312156116c8576116c7610bd1565b5b600082015167ffffffffffffffff8111156116e6576116e5610bd6565b5b6116f2848285016115d2565b91505092915050565b61170481610bdb565b82525050565b600060208201905061171f60008301846116fb565b92915050565b61172e81610b8b565b82525050565b600060a08201905061174960008301886112ab565b6117566020830187611725565b818103604083015261176881866113a8565b90506117776060830185611429565b611784608083018461144c565b9695505050505050565b600082825260208201905092915050565b60006117aa82610cd0565b6117b4818561178e565b93506117c4818560208601610cec565b6117cd81610d16565b840191505092915050565b600082825260208201905092915050565b60006117f482611226565b6117fe81856117d8565b935061180e818560208601610cec565b61181781610d16565b840191505092915050565b61182b816113eb565b82525050565b61183a81611438565b82525050565b600060a083016000830151848203600086015261185d828261179f565b91505060208301518482036020860152611877828261179f565b9150506040830151848203604086015261189182826117e9565b91505060608301516118a66060860182611822565b5060808301516118b96080860182611831565b508091505092915050565b600060408201905081810360008301526118de8185611840565b905081810360208301526118f28184611840565b90509392505050565b600060408284031215611911576119106114cf565b5b61191b6040611121565b9050600082015167ffffffffffffffff81111561193b5761193a6114d4565b5b611947848285016115d2565b600083015250602082015167ffffffffffffffff81111561196b5761196a6114d4565b5b611977848285016115d2565b60208301525092915050565b60006020828403121561199957611998610bd1565b5b600082015167ffffffffffffffff8111156119b7576119b6610bd6565b5b6119c3848285016118fb565b91505092915050565b600060a08301600083015184820360008601526119e9828261179f565b91505060208301518482036020860152611a03828261179f565b91505060408301518482036040860152611a1d82826117e9565b9150506060830151611a326060860182611822565b506080830151611a456080860182611831565b508091505092915050565b60006040830160008301518482036000860152611a6d82826119cc565b91505060208301518482036020860152611a8782826119cc565b9150508091505092915050565b60006020820190508181036000830152611aae8184611a50565b905092915050565b6000611ac28385610cdb565b9350611acf838584610f6f565b611ad883610d16565b840190509392505050565b600060a082019050611af8600083018c6116fb565b8181036020830152611b0b818a8c611ab6565b90508181036040830152611b2081888a611ab6565b90508181036060830152611b35818688611ab6565b90508181036080830152611b4a818486611ab6565b90509a9950505050505050505050565b7f4552525f4143434553535f44454e494544000000000000000000000000000000600082015250565b6000611b90601183610cdb565b9150611b9b82611b5a565b602082019050919050565b60006020820190508181036000830152611bbf81611b83565b9050919050565b6000819050919050565b6000611beb611be6611be1846113e1565b610e0a565b611bc6565b9050919050565b611bfb81611bd0565b82525050565b6000602082019050611c166000830184611bf2565b92915050565b60038110611c2957600080fd5b50565b600081519050611c3b81611c1c565b92915050565b600060408284031215611c5757611c566114cf565b5b611c616040611121565b90506000611c7184828501611c2c565b600083015250602082015167ffffffffffffffff811115611c9557611c946114d4565b5b611ca1848285016111af565b60208301525092915050565b600060208284031215611cc357611cc2610bd1565b5b600082015167ffffffffffffffff811115611ce157611ce0610bd6565b5b611ced84828501611c41565b9150509291505056fea26469706673582212206c16fcc37226b30db72c8b5331a949b1816d38af7f6abd100140f4698f2035b764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806390e796211161005b57806390e79621146100ee578063a689408c1461010c578063df13994e14610128578063e602af76146101445761007d565b80634261bab7146100825780634344767e146100a05780637b4dc7a7146100d0575b600080fd5b61008a610163565b6040516100979190610bac565b60405180910390f35b6100ba60048036038101906100b59190610c11565b610187565b6040516100c79190610cb5565b60405180910390f35b6100d86101a7565b6040516100e59190610bac565b60405180910390f35b6100f66101cb565b6040516101039190610d60565b60405180910390f35b61012660048036038101906101219190610da6565b610259565b005b610142600480360381019061013d9190610c11565b6108ea565b005b61014c610b2c565b60405161015a929190610e69565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60026020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600180546101d890610ec1565b80601f016020809104026020016040519081016040528092919081815260200182805461020490610ec1565b80156102515780601f1061022657610100808354040283529160200191610251565b820191906000526020600020905b81548152906001019060200180831161023457829003601f168201915b505050505081565b600081806000019061026b9190610f01565b83806020019061027b9190610f01565b85806040019061028b9190610f01565b87806060019061029b9190610f01565b6040516020016102b2989796959493929190610fa3565b604051602081830303815290604052805190602001209050600060038111156102de576102dd610c3e565b5b6002600083815260200190815260200160002060009054906101000a900460ff16600381111561031157610310610c3e565b5b14610351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034890611035565b60405180910390fd5b60008073__$4c69cf84ba89ae4679f402ef37ecaf7999$__63925be54d9091600173__$1eeb4be544c70bad97b2730d99a1a8c0f3$__6312496a1b88806000019061039c9190610f01565b6040518363ffffffff1660e01b81526004016103b9929190611093565b600060405180830381865af41580156103d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103ff91906111dd565b73__$1eeb4be544c70bad97b2730d99a1a8c0f3$__6312496a1b8980602001906104299190610f01565b6040518363ffffffff1660e01b8152600401610446929190611093565b600060405180830381865af4158015610463573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061048c91906111dd565b73__$1eeb4be544c70bad97b2730d99a1a8c0f3$__6312496a1b8a80604001906104b69190610f01565b6040518363ffffffff1660e01b81526004016104d3929190611093565b600060405180830381865af41580156104f0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061051991906111dd565b73__$1eeb4be544c70bad97b2730d99a1a8c0f3$__6312496a1b8b80606001906105439190610f01565b6040518363ffffffff1660e01b8152600401610560929190611093565b600060405180830381865af415801561057d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105a691906111dd565b6040516020016105b9949392919061126d565b6040516020818303038152906040526000651b48eb57e0006040518663ffffffff1660e01b81526004016105f195949392919061145b565b600060405180830381865af415801561060e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061063791906116b2565b905060008073__$4c69cf84ba89ae4679f402ef37ecaf7999$__6331b0e0e490913063df13994e60e01b87604051602401610672919061170a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506000651b48eb57e0006040518663ffffffff1660e01b81526004016106f8959493929190611734565b600060405180830381865af4158015610715573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061073e91906116b2565b90508173__$4c69cf84ba89ae4679f402ef37ecaf7999$__63987cbd719091836040518363ffffffff1660e01b815260040161077b9291906118c4565b600060405180830381865af4158015610798573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107c19190611983565b73__$4c69cf84ba89ae4679f402ef37ecaf7999$__6372e3f69990916040518263ffffffff1660e01b81526004016107f99190611a94565b60006040518083038186803b15801561081157600080fd5b505af4158015610825573d6000803e3d6000fd5b5050505060016002600085815260200190815260200160002060006101000a81548160ff021916908360038111156108605761085f610c3e565b5b02179055507f1a0dda9a5e7155569c5ea66d5a71404b69149aae44ee8940fefea3053524d1e3838580600001906108979190610f01565b8780602001906108a79190610f01565b8980604001906108b79190610f01565b8b80606001906108c79190610f01565b6040516108dc99989796959493929190611ae3565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90611ba6565b60405180910390fd5b6001600381111561098c5761098b610c3e565b5b6002600083815260200190815260200160002060009054906101000a900460ff1660038111156109bf576109be610c3e565b5b146109ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f690611035565b60405180910390fd5b60016002811115610a1357610a12610c3e565b5b73__$4c69cf84ba89ae4679f402ef37ecaf7999$",
  "libraries": {
    "AuroraSdk": "0xf7478EAeB7E4b09f024cF69B71DAf9fD4a9fC7dC",
    "Borsh": "0x5c6Be943472E6B644e0686c0B873df2E416a4119",
    "Codec": "0x6b1A854C0A2Aec23357d117BDB680184671833Cb",
    "Utils": "0x9621fa6AD3dEC2FeB5AcBf87F8DcE690506a1183"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1364,
        "contract": "contracts/AquaProxy.sol:AquaProxy",
        "label": "near",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(NEAR)2173_storage"
      },
      {
        "astId": 1366,
        "contract": "contracts/AquaProxy.sol:AquaProxy",
        "label": "aquaVMAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1371,
        "contract": "contracts/AquaProxy.sol:AquaProxy",
        "label": "particlesStatuses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_enum(ParticleStatus)1342)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ParticleStatus)1342": {
        "encoding": "inplace",
        "label": "enum AquaProxy.ParticleStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(ParticleStatus)1342)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum AquaProxy.ParticleStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ParticleStatus)1342"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NEAR)2173_storage": {
        "encoding": "inplace",
        "label": "struct NEAR",
        "members": [
          {
            "astId": 2168,
            "contract": "contracts/AquaProxy.sol:AquaProxy",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2172,
            "contract": "contracts/AquaProxy.sol:AquaProxy",
            "label": "wNEAR",
            "offset": 1,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          }
        ],
        "numberOfBytes": "32"
      }
    }
  }
}