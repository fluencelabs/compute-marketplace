{
  "address": "0xE257178d32A9d7ce8D989f81a04FCA1bEC4CE93B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "accountId",
          "type": "string"
        }
      ],
      "name": "addressSubAccount",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accountId",
          "type": "string"
        }
      ],
      "name": "implicitAuroraAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetAccountId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "uint128",
              "name": "nearBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "nearGas",
              "type": "uint64"
            }
          ],
          "internalType": "struct PromiseCreateArgs",
          "name": "base",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetAccountId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "uint128",
              "name": "nearBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "nearGas",
              "type": "uint64"
            }
          ],
          "internalType": "struct PromiseCreateArgs",
          "name": "callback",
          "type": "tuple"
        }
      ],
      "name": "then",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "base",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "callback",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromiseWithCallback",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3055c78116840054792a8c91e6ebe9c089b8719bda968355ee8f3375b117d473",
  "receipt": {
    "to": null,
    "from": "0x85fbC7b5087cC7b4Fe3Fe97755D8E01c9Fd727D9",
    "contractAddress": "0xE257178d32A9d7ce8D989f81a04FCA1bEC4CE93B",
    "transactionIndex": 0,
    "gasUsed": "2394965",
    "logsBloom": "0x
    "blockHash": "0x5d21fdb6907591ad42092894915570fa6dd32871004b9dca0c948822d5c3e92a",
    "transactionHash": "0x3055c78116840054792a8c91e6ebe9c089b8719bda968355ee8f3375b117d473",
    "logs": [],
    "blockNumber": 104686143,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "31f47c90d96eaecf182eb738695ec8b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"accountId\",\"type\":\"string\"}],\"name\":\"addressSubAccount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accountId\",\"type\":\"string\"}],\"name\":\"implicitAuroraAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"base\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"callback\",\"type\":\"tuple\"}],\"name\":\"then\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"base\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"callback\",\"type\":\"tuple\"}],\"internalType\":\"struct PromiseWithCallback\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressSubAccount(address,string)\":{\"notice\":\"Prepends the given account ID with the given address (hex-encoded).\"},\"auroraCall(NEAR storage,address,bytes,uint128,uint64)\":{\"notice\":\"Similar to `call`. It is a wrapper that simplifies the creation of a promise to a controct inside `Aurora`.\"},\"call(NEAR storage,string,string,bytes,uint128,uint64)\":{\"notice\":\"Crease a base promise. This is not immediately schedule for execution until transact is called. It can be combined with other promises using `then` combinator. Input is not checekd during promise creation. If it is invalid, the transaction will be scheduled either way, but it will fail during execution.\"},\"currentAccountId()\":{\"notice\":\"Get the NEAR account id of the current contract. It is the account id of Aurora engine.\"},\"implicitAuroraAddress(string)\":{\"notice\":\"Compute implicity Aurora Address for the given NEAR account.\"},\"initNear(IERC20)\":{\"notice\":\"Create an instance of NEAR object. Requires the address at which wNEAR ERC20 token contract is deployed.\"},\"lazy_transact(PromiseCreateArgs)\":{\"notice\":\"Similar to `transact`, except the promise is not executed as part of the same transaction. A separate transaction to execute the scheduled promise is needed.\"},\"mainnet()\":{\"notice\":\"Default configuration for mainnet.\"},\"nearRepresentative(address)\":{\"notice\":\"Compute NEAR represtentative account for the given Aurora address. This is the NEAR account created by the cross contract call precompile.\"},\"nearRepresentitiveImplicitAddress(address)\":{\"notice\":\"Compute the implicit Aurora address of the represenative NEAR account for the given Aurora address. Useful when a contract wants to call itself via a callback using cross contract call precompile.\"},\"predecessorAccountId()\":{\"notice\":\"Get the NEAR account id of the predecessor contract.\"},\"promiseResult(uint256)\":{\"notice\":\"Get the promise result at the specified index.\"},\"then(PromiseCreateArgs,PromiseCreateArgs)\":{\"notice\":\"Create a promise with callback from two given promises.\"},\"transact(PromiseCreateArgs)\":{\"notice\":\"Schedule a base promise to be executed on NEAR. After this function is called the promise should not be used anymore.\"},\"transact(PromiseWithCallback)\":{\"notice\":\"Schedule a promise with callback to be executed on NEAR. After this function is called the promise should not be used anymore. Duplicated due to lack of generics in solidity. Check relevant issue: https://github.com/ethereum/solidity/issues/869\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auroraSDK/AuroraSdk.sol\":\"AuroraSdk\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/auroraSDK/AuroraSdk.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Codec.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Address of Cross Contract Call precompile in Aurora.\\n// It allows scheduling new promises to NEAR contracts.\\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the predecessor account id of the current call.\\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the current account id of the current call.\\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\\n// Addresss of promise result precompile in Aurora.\\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\\n// Address of wNEAR ERC20 on mainnet\\naddress constant wNEAR_MAINNET = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n\\nstruct NEAR {\\n    /// Wether the represenative NEAR account id for this contract\\n    /// has already been created or not. This is required since the\\n    /// first cross contract call requires attaching extra deposit\\n    /// to cover storage staking balance.\\n    bool initialized;\\n    /// Address of wNEAR token contract. It is used to charge the user\\n    /// required tokens for paying NEAR storage fees and attached balance\\n    /// for cross contract calls.\\n    IERC20 wNEAR;\\n}\\n\\nlibrary AuroraSdk {\\n    using Codec for bytes;\\n    using Codec for PromiseCreateArgs;\\n    using Codec for PromiseWithCallback;\\n    using Codec for Borsh.Data;\\n    using Borsh for Borsh.Data;\\n\\n    /// Create an instance of NEAR object. Requires the address at which\\n    /// wNEAR ERC20 token contract is deployed.\\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\\n        NEAR memory near = NEAR(false, wNEAR);\\n        near.wNEAR.approve(\\n            XCC_PRECOMPILE,\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        return near;\\n    }\\n\\n    /// Default configuration for mainnet.\\n    function mainnet() public returns (NEAR memory) {\\n        return initNear(IERC20(wNEAR_MAINNET));\\n    }\\n\\n    /// Compute NEAR represtentative account for the given Aurora address.\\n    /// This is the NEAR account created by the cross contract call precompile.\\n    function nearRepresentative(address account)\\n        public\\n        returns (string memory)\\n    {\\n        return addressSubAccount(account, currentAccountId());\\n    }\\n\\n    /// Prepends the given account ID with the given address (hex-encoded).\\n    function addressSubAccount(address account, string memory accountId)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Utils.bytesToHex(abi.encodePacked((bytes20(account)))),\\n                    \\\".\\\",\\n                    accountId\\n                )\\n            );\\n    }\\n\\n    /// Compute implicity Aurora Address for the given NEAR account.\\n    function implicitAuroraAddress(string memory accountId)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\\n    }\\n\\n    /// Compute the implicit Aurora address of the represenative NEAR account\\n    /// for the given Aurora address. Useful when a contract wants to call\\n    /// itself via a callback using cross contract call precompile.\\n    function nearRepresentitiveImplicitAddress(address account)\\n        public\\n        returns (address)\\n    {\\n        return implicitAuroraAddress(nearRepresentative(account));\\n    }\\n\\n    /// Get the promise result at the specified index.\\n    function promiseResult(uint256 index)\\n        public\\n        returns (PromiseResult memory result)\\n    {\\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE\\n            .call(\\\"\\\");\\n        require(success);\\n\\n        Borsh.Data memory borsh = Borsh.from(returnData);\\n\\n        uint32 length = borsh.decodeU32();\\n        require(index < length, \\\"Index out of bounds\\\");\\n\\n        for (uint256 i = 0; i < index; i++) {\\n            PromiseResultStatus status = PromiseResultStatus(\\n                uint8(borsh.decodeU8())\\n            );\\n            if (status == PromiseResultStatus.Successful) {\\n                borsh.skipBytes();\\n            }\\n        }\\n\\n        result.status = PromiseResultStatus(borsh.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = borsh.decodeBytes();\\n        }\\n    }\\n\\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\\n    function currentAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE\\n            .call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Get the NEAR account id of the predecessor contract.\\n    function predecessorAccountId() public returns (string memory) {\\n        (\\n            bool success,\\n            bytes memory returnData\\n        ) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Crease a base promise. This is not immediately schedule for execution\\n    /// until transact is called. It can be combined with other promises using\\n    /// `then` combinator.\\n    ///\\n    /// Input is not checekd during promise creation. If it is invalid, the\\n    /// transaction will be scheduled either way, but it will fail during execution.\\n    function call(\\n        NEAR storage near,\\n        string memory targetAccountId,\\n        string memory method,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        /// Need to capture nearBalance before we modify it so that we don't\\n        /// double-charge the user for their initialization cost.\\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(\\n            targetAccountId,\\n            method,\\n            args,\\n            nearBalance,\\n            nearGas\\n        );\\n\\n        if (!near.initialized) {\\n            /// If the contract needs to be initialized, we need to attach\\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\\n            nearBalance += 2_000_000_000_000_000_000_000_000;\\n            near.initialized = true;\\n        }\\n\\n        if (nearBalance > 0) {\\n            near.wNEAR.transferFrom(\\n                msg.sender,\\n                address(this),\\n                uint256(nearBalance)\\n            );\\n        }\\n\\n        return promise_args;\\n    }\\n\\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\\n    /// to a controct inside `Aurora`.\\n    function auroraCall(\\n        NEAR storage near,\\n        address target,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        return\\n            call(\\n                near,\\n                currentAccountId(),\\n                \\\"call\\\",\\n                abi.encodePacked(uint8(0), target, uint256(0), args.encode()),\\n                nearBalance,\\n                nearGas\\n            );\\n    }\\n\\n    /// Schedule a base promise to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    function transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    ///\\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\\n    /// https://github.com/ethereum/solidity/issues/869\\n    function transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\\n    /// A separate transaction to execute the scheduled promise is needed.\\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Create a promise with callback from two given promises.\\n    function then(\\n        PromiseCreateArgs memory base,\\n        PromiseCreateArgs memory callback\\n    ) public pure returns (PromiseWithCallback memory) {\\n        return PromiseWithCallback(base, callback);\\n    }\\n}\\n\",\"keccak256\":\"0x8b0085ffaf4b5130088c916ee5af235c7b48a26ffa634f88c9b5d6d930a9c97d\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(\\n                data.ptr + length <= data.end,\\n                \\\"Parse error: unexpected EOI\\\"\\n            );\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a3704c81feec760578cfbfb2ec7038d9dbffda15d3f5706946fecbcd13e869d\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(bytes(nearPromise.targetAccountId)),\\n                encode(bytes(nearPromise.method)),\\n                encode(nearPromise.args),\\n                encodeU128(nearPromise.nearBalance),\\n                encodeU64(nearPromise.nearGas)\\n            );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(nearPromise.base),\\n                encode(nearPromise.callback)\\n            );\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseCreateArgs memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Create),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseWithCallback memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Callback),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data)\\n        public\\n        pure\\n        returns (PromiseResult memory result)\\n    {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(\\n            uint8(data.decodeU8())\\n        );\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa218811f1575083887938428d0d1b4001b26609ae4f98e248e9c66dfd34fcbfe\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant {\\n    /// Basic NEAR promise\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode {\\n    /// Eager mode means that the promise WILL be executed in a single\\n    /// NEAR transaction.\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus {\\n    /// This status should not be reachable.\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xfd72f1cab846359ba751ccf4a0ed670aef5016f3239e60547ae88bee459d8437\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v =\\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v =\\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) |\\n            ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v =\\n            ((v & 0x00000000ffffffff00000000ffffffff) << 32) |\\n            ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v =\\n            ((v &\\n                0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) <<\\n                8) |\\n            ((v &\\n                0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >>\\n                8);\\n        v =\\n            ((v &\\n                0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) <<\\n                16) |\\n            ((v &\\n                0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >>\\n                16);\\n        v =\\n            ((v &\\n                0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) <<\\n                32) |\\n            ((v &\\n                0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >>\\n                32);\\n        v =\\n            ((v &\\n                0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) <<\\n                64) |\\n            ((v &\\n                0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >>\\n                64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end := add(\\n                    res,\\n                    and(\\n                        add(length, 63),\\n                        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\\n                    )\\n                )\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length)\\n        internal\\n        view\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0xff8fdd1fc95ec1ab0f94ababeafdeea46fc110367cfed77c43a17c2f4fd03a9c\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x612a72610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c8063987cbd71116100a1578063cb4500e711610070578063cb4500e71461037e578063e81b0462146103ae578063f930d037146103d9578063ff23fc6d146104025761010a565b8063987cbd71146102ab578063a32b29fb146102db578063a33598bf14610318578063b4fa7993146103555761010a565b806336a80dbc116100dd57806336a80dbc146101dd57806348ca4f621461021a57806372e3f69914610245578063925be54d1461026e5761010a565b80630d8e909f1461010f57806310cdb493146101385780632bf954531461017557806331b0e0e4146101a0575b600080fd5b81801561011b57600080fd5b5061013660048036038101906101319190611812565b610432565b005b81801561014457600080fd5b5061015f600480360381019061015a9190611891565b61057d565b60405161016c91906119f1565b60405180910390f35b81801561018157600080fd5b5061018a610782565b6040516101979190611a68565b60405180910390f35b8180156101ac57600080fd5b506101c760048036038101906101c29190611b1e565b610817565b6040516101d49190611ca1565b60405180910390f35b8180156101e957600080fd5b5061020460048036038101906101ff9190611d01565b610919565b6040516102119190611dd7565b60405180910390f35b81801561022657600080fd5b5061022f610a13565b60405161023c9190611a68565b60405180910390f35b81801561025157600080fd5b5061026c60048036038101906102679190611e7a565b610aa8565b005b81801561027a57600080fd5b5061029560048036038101906102909190611ec3565b610bf3565b6040516102a29190611ca1565b60405180910390f35b6102c560048036038101906102c09190611fa4565b610d70565b6040516102d291906120e4565b60405180910390f35b8180156102e757600080fd5b5061030260048036038101906102fd9190612106565b610d95565b60405161030f9190611a68565b60405180910390f35b81801561032457600080fd5b5061033f600480360381019061033a9190612106565b610daf565b60405161034c9190612142565b60405180910390f35b81801561036157600080fd5b5061037c60048036038101906103779190611e7a565b610dc9565b005b6103986004803603810190610393919061215d565b610f14565b6040516103a59190612142565b60405180910390f35b8180156103ba57600080fd5b506103c3610f28565b6040516103d09190611dd7565b60405180910390f35b8180156103e557600080fd5b5061040060048036038101906103fb9190611812565b610f52565b005b61041c600480360381019061041791906121a6565b61109d565b6040516104299190611a68565b60405180910390f35b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373F49dEC54E8Fed9D7207E590a592f6367212B7d0C63b1038e71909160016040518363ffffffff1660e01b815260040161049c92919061224a565b600060405180830381865af41580156104b9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104e291906122ea565b6040516104ef919061236f565b6000604051808303816000865af19150503d806000811461052c576040519150601f19603f3d011682016040523d82523d6000602084013e610531565b606091505b50915091508161057857806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f91906123d0565b60405180910390fd5b505050565b6105856113bc565b600080730a3540f79be10ef14890e87c1a0040a68cc6af7173ffffffffffffffffffffffffffffffffffffffff166040516105bf90612418565b6000604051808303816000865af19150503d80600081146105fc576040519150601f19603f3d011682016040523d82523d6000602084013e610601565b606091505b50915091508161061057600080fd5b600061061b82611167565b905060006106288261119f565b90508063ffffffff168610610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066990612479565b60405180910390fd5b60005b868110156106e9576000610688846111c7565b60ff16600281111561069d5761069c6118be565b5b9050600160028111156106b3576106b26118be565b5b8160028111156106c6576106c56118be565b5b036106d5576106d4846111e7565b5b5080806106e1906124c8565b915050610675565b506106f3826111c7565b60ff166002811115610708576107076118be565b5b8560000190600281111561071f5761071e6118be565b5b90816002811115610733576107326118be565b5b815250506001600281111561074b5761074a6118be565b5b85600001516002811115610762576107616118be565b5b036107795761077082611221565b85602001819052505b50505050919050565b606060008073723ffbaba940e75e7bf5f6d61dcbf8d9a4de0fd773ffffffffffffffffffffffffffffffffffffffff166040516107be90612418565b6000604051808303816000865af19150503d80600081146107fb576040519150601f19603f3d011682016040523d82523d6000602084013e610800565b606091505b50915091508161080f57600080fd5b809250505090565b61081f6113e8565b61090e8661082b610a13565b6040518060400160405280600481526020017f63616c6c0000000000000000000000000000000000000000000000000000000081525060008960008a73F49dEC54E8Fed9D7207E590a592f6367212B7d0C6312496a1b90916040518263ffffffff1660e01b815260040161089f919061255a565b600060405180830381865af41580156108bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108e591906122ea565b6040516020016108f89493929190612628565b6040516020818303038152906040528787610bf3565b905095945050505050565b610921611433565b600060405180604001604052806000151581526020018473ffffffffffffffffffffffffffffffffffffffff168152509050806020015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b373516cded1d16af10cad47d6d49128e2eb7d27b3727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109c69291906126bc565b6020604051808303816000875af11580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190612711565b5080915050919050565b606060008073fefae79e4180eb0284f261205e3f8cea737aff5673ffffffffffffffffffffffffffffffffffffffff16604051610a4f90612418565b6000604051808303816000865af19150503d8060008114610a8c576040519150601f19603f3d011682016040523d82523d6000602084013e610a91565b606091505b509150915081610aa057600080fd5b809250505090565b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373F49dEC54E8Fed9D7207E590a592f6367212B7d0C631f42468a909160016040518363ffffffff1660e01b8152600401610b1292919061273e565b600060405180830381865af4158015610b2f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b5891906122ea565b604051610b65919061236f565b6000604051808303816000865af19150503d8060008114610ba2576040519150601f19603f3d011682016040523d82523d6000602084013e610ba7565b606091505b509150915081610bee57806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be591906123d0565b60405180910390fd5b505050565b610bfb6113e8565b60006040518060a00160405280888152602001878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090508760000160009054906101000a900460ff16610c8f576a01a784379d99db4200000084610c6f919061276e565b935060018860000160006101000a81548160ff0219169083151502179055505b6000846fffffffffffffffffffffffffffffffff161115610d62578760000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876fffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401610d1d939291906127c1565b6020604051808303816000875af1158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190612711565b505b809150509695505050505050565b610d78611465565b604051806040016040528084815260200183815250905092915050565b6060610da882610da3610a13565b61109d565b9050919050565b6000610dc2610dbd83610d95565b610f14565b9050919050565b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373F49dEC54E8Fed9D7207E590a592f6367212B7d0C631f42468a909160006040518363ffffffff1660e01b8152600401610e3392919061273e565b600060405180830381865af4158015610e50573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e7991906122ea565b604051610e86919061236f565b6000604051808303816000865af19150503d8060008114610ec3576040519150601f19603f3d011682016040523d82523d6000602084013e610ec8565b606091505b509150915081610f0f57806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0691906123d0565b60405180910390fd5b505050565b6000818051906020012060001c9050919050565b610f30611433565b610f4d734861825e75ab14553e5af711ebbe6873d369d146610919565b905090565b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373F49dEC54E8Fed9D7207E590a592f6367212B7d0C63b1038e71909160006040518363ffffffff1660e01b8152600401610fbc92919061224a565b600060405180830381865af4158015610fd9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061100291906122ea565b60405161100f919061236f565b6000604051808303816000865af19150503d806000811461104c576040519150601f19603f3d011682016040523d82523d6000602084013e611051565b606091505b50915091508161109857806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f91906123d0565b60405180910390fd5b505050565b60607306C09c7bf9F2c07146F77002Df8e4Ea16290e36a63451d89fa8460601b6040516020016110cd9190612845565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016110f8919061255a565b600060405180830381865af4158015611115573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061113e91906128d0565b826040516020016111509291906129a1565b604051602081830303815290604052905092915050565b61116f61148b565b60008290506020810182600001818152505061118a8161126f565b82600001510182602001818152505050919050565b60006111c06111b860048461127a90919063ffffffff16565b60e01c6112b7565b9050919050565b60006111dd60018361127a90919063ffffffff16565b60f81c9050919050565b60006111f28261119f565b63ffffffff16905061120d81836112fb90919063ffffffff16565b808260000181815101915081815250505050565b6060600061122e8361119f565b63ffffffff16905061124981846112fb90919063ffffffff16565b61125783600001518261134c565b91508083600001818151019150818152505050919050565b600081519050919050565b600061128f82846112fb90919063ffffffff16565b61129c836000015161126f565b60001b90508183600001818151019150818152505092915050565b6000600863ff00ff00831663ffffffff16901c600862ff00ff841663ffffffff16901b17915060108263ffffffff16901c60108363ffffffff16901b179050919050565b8160200151818360000151011115611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f90612a1c565b60405180910390fd5b5050565b6060600082146113b65760405190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810180604052828252602082015b6001156113b35784518152602081019050818103156113b35760208501945061138f565b50505b92915050565b6040518060400160405280600060028111156113db576113da6118be565b5b8152602001606081525090565b6040518060a0016040528060608152602001606081526020016060815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6040518060400160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60405180604001604052806114786113e8565b81526020016114856113e8565b81525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611507826114be565b810181811067ffffffffffffffff82111715611526576115256114cf565b5b80604052505050565b60006115396114a5565b905061154582826114fe565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611574576115736114cf565b5b61157d826114be565b9050602081019050919050565b82818337600083830152505050565b60006115ac6115a784611559565b61152f565b9050828152602081018484840111156115c8576115c7611554565b5b6115d384828561158a565b509392505050565b600082601f8301126115f0576115ef61154f565b5b8135611600848260208601611599565b91505092915050565b600067ffffffffffffffff821115611624576116236114cf565b5b61162d826114be565b9050602081019050919050565b600061164d61164884611609565b61152f565b90508281526020810184848401111561166957611668611554565b5b61167484828561158a565b509392505050565b600082601f8301126116915761169061154f565b5b81356116a184826020860161163a565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6116cf816116aa565b81146116da57600080fd5b50565b6000813590506116ec816116c6565b92915050565b600067ffffffffffffffff82169050919050565b61170f816116f2565b811461171a57600080fd5b50565b60008135905061172c81611706565b92915050565b600060a08284031215611748576117476114b9565b5b61175260a061152f565b9050600082013567ffffffffffffffff8111156117725761177161154a565b5b61177e848285016115db565b600083015250602082013567ffffffffffffffff8111156117a2576117a161154a565b5b6117ae848285016115db565b602083015250604082013567ffffffffffffffff8111156117d2576117d161154a565b5b6117de8482850161167c565b60408301525060606117f2848285016116dd565b60608301525060806118068482850161171d565b60808301525092915050565b600060208284031215611828576118276114af565b5b600082013567ffffffffffffffff811115611846576118456114b4565b5b61185284828501611732565b91505092915050565b6000819050919050565b61186e8161185b565b811461187957600080fd5b50565b60008135905061188b81611865565b92915050565b6000602082840312156118a7576118a66114af565b5b60006118b58482850161187c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106118fe576118fd6118be565b5b50565b600081905061190f826118ed565b919050565b600061191f82611901565b9050919050565b61192f81611914565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561196f578082015181840152602081019050611954565b60008484015250505050565b600061198682611935565b6119908185611940565b93506119a0818560208601611951565b6119a9816114be565b840191505092915050565b60006040830160008301516119cc6000860182611926565b50602083015184820360208601526119e4828261197b565b9150508091505092915050565b60006020820190508181036000830152611a0b81846119b4565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000611a3a82611a13565b611a448185611a1e565b9350611a54818560208601611951565b611a5d816114be565b840191505092915050565b60006020820190508181036000830152611a828184611a2f565b905092915050565b6000819050919050565b611a9d81611a8a565b8114611aa857600080fd5b50565b600081359050611aba81611a94565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611aeb82611ac0565b9050919050565b611afb81611ae0565b8114611b0657600080fd5b50565b600081359050611b1881611af2565b92915050565b600080600080600060a08688031215611b3a57611b396114af565b5b6000611b4888828901611aab565b9550506020611b5988828901611b09565b945050604086013567ffffffffffffffff811115611b7a57611b796114b4565b5b611b868882890161167c565b9350506060611b97888289016116dd565b9250506080611ba88882890161171d565b9150509295509295909350565b600082825260208201905092915050565b6000611bd182611a13565b611bdb8185611bb5565b9350611beb818560208601611951565b611bf4816114be565b840191505092915050565b611c08816116aa565b82525050565b611c17816116f2565b82525050565b600060a0830160008301518482036000860152611c3a8282611bc6565b91505060208301518482036020860152611c548282611bc6565b91505060408301518482036040860152611c6e828261197b565b9150506060830151611c836060860182611bff565b506080830151611c966080860182611c0e565b508091505092915050565b60006020820190508181036000830152611cbb8184611c1d565b905092915050565b6000611cce82611ae0565b9050919050565b611cde81611cc3565b8114611ce957600080fd5b50565b600081359050611cfb81611cd5565b92915050565b600060208284031215611d1757611d166114af565b5b6000611d2584828501611cec565b91505092915050565b60008115159050919050565b611d4381611d2e565b82525050565b6000819050919050565b6000611d6e611d69611d6484611ac0565b611d49565b611ac0565b9050919050565b6000611d8082611d53565b9050919050565b6000611d9282611d75565b9050919050565b611da281611d87565b82525050565b604082016000820151611dbe6000850182611d3a565b506020820151611dd16020850182611d99565b50505050565b6000604082019050611dec6000830184611da8565b92915050565b600060408284031215611e0857611e076114b9565b5b611e12604061152f565b9050600082013567ffffffffffffffff811115611e3257611e3161154a565b5b611e3e84828501611732565b600083015250602082013567ffffffffffffffff811115611e6257611e6161154a565b5b611e6e84828501611732565b60208301525092915050565b600060208284031215611e9057611e8f6114af565b5b600082013567ffffffffffffffff811115611eae57611ead6114b4565b5b611eba84828501611df2565b91505092915050565b60008060008060008060c08789031215611ee057611edf6114af565b5b6000611eee89828a01611aab565b965050602087013567ffffffffffffffff811115611f0f57611f0e6114b4565b5b611f1b89828a016115db565b955050604087013567ffffffffffffffff811115611f3c57611f3b6114b4565b5b611f4889828a016115db565b945050606087013567ffffffffffffffff811115611f6957611f686114b4565b5b611f7589828a0161167c565b9350506080611f8689828a016116dd565b92505060a0611f9789828a0161171d565b9150509295509295509295565b60008060408385031215611fbb57611fba6114af565b5b600083013567ffffffffffffffff811115611fd957611fd86114b4565b5b611fe585828601611732565b925050602083013567ffffffffffffffff811115612006576120056114b4565b5b61201285828601611732565b9150509250929050565b600060a08301600083015184820360008601526120398282611bc6565b915050602083015184820360208601526120538282611bc6565b9150506040830151848203604086015261206d828261197b565b91505060608301516120826060860182611bff565b5060808301516120956080860182611c0e565b508091505092915050565b600060408301600083015184820360008601526120bd828261201c565b915050602083015184820360208601526120d7828261201c565b9150508091505092915050565b600060208201905081810360008301526120fe81846120a0565b905092915050565b60006020828403121561211c5761211b6114af565b5b600061212a84828501611b09565b91505092915050565b61213c81611ae0565b82525050565b60006020820190506121576000830184612133565b92915050565b600060208284031215612173576121726114af565b5b600082013567ffffffffffffffff811115612191576121906114b4565b5b61219d848285016115db565b91505092915050565b600080604083850312156121bd576121bc6114af565b5b60006121cb85828601611b09565b925050602083013567ffffffffffffffff8111156121ec576121eb6114b4565b5b6121f8858286016115db565b9150509250929050565b60028110612213576122126118be565b5b50565b600081905061222482612202565b919050565b600061223482612216565b9050919050565b61224481612229565b82525050565b600060408201905081810360008301526122648185611c1d565b9050612273602083018461223b565b9392505050565b600061228d61228884611609565b61152f565b9050828152602081018484840111156122a9576122a8611554565b5b6122b4848285611951565b509392505050565b600082601f8301126122d1576122d061154f565b5b81516122e184826020860161227a565b91505092915050565b600060208284031215612300576122ff6114af565b5b600082015167ffffffffffffffff81111561231e5761231d6114b4565b5b61232a848285016122bc565b91505092915050565b600081905092915050565b600061234982611935565b6123538185612333565b9350612363818560208601611951565b80840191505092915050565b600061237b828461233e565b915081905092915050565b600082825260208201905092915050565b60006123a282611a13565b6123ac8185612386565b93506123bc818560208601611951565b6123c5816114be565b840191505092915050565b600060208201905081810360008301526123ea8184612397565b905092915050565b50565b6000612402600083612333565b915061240d826123f2565b600082019050919050565b6000612423826123f5565b9150819050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000612463601383612386565b915061246e8261242d565b602082019050919050565b6000602082019050818103600083015261249281612456565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124d38261185b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361250557612504612499565b5b600182019050919050565b600082825260208201905092915050565b600061252c82611935565b6125368185612510565b9350612546818560208601611951565b61254f816114be565b840191505092915050565b600060208201905081810360008301526125748184612521565b905092915050565b600060ff82169050919050565b60008160f81b9050919050565b60006125a182612589565b9050919050565b6125b96125b48261257c565b612596565b82525050565b60008160601b9050919050565b60006125d7826125bf565b9050919050565b60006125e9826125cc565b9050919050565b6126016125fc82611ae0565b6125de565b82525050565b6000819050919050565b61262261261d8261185b565b612607565b82525050565b600061263482876125a8565b60018201915061264482866125f0565b6014820191506126548285612611565b602082019150612664828461233e565b915081905095945050505050565b61267b81611ae0565b82525050565b6000819050919050565b60006126a66126a161269c84612681565b611d49565b61185b565b9050919050565b6126b68161268b565b82525050565b60006040820190506126d16000830185612672565b6126de60208301846126ad565b9392505050565b6126ee81611d2e565b81146126f957600080fd5b50565b60008151905061270b816126e5565b92915050565b600060208284031215612727576127266114af565b5b6000612735848285016126fc565b91505092915050565b6000604082019050818103600083015261275881856120a0565b9050612767602083018461223b565b9392505050565b6000612779826116aa565b9150612784836116aa565b925082820190506fffffffffffffffffffffffffffffffff8111156127ac576127ab612499565b5b92915050565b6127bb8161185b565b82525050565b60006060820190506127d66000830186612672565b6127e36020830185612672565b6127f060408301846127b2565b949350505050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b6000819050919050565b61283f61283a826127f8565b612824565b82525050565b6000612851828461282e565b60148201915081905092915050565b600061287361286e84611559565b61152f565b90508281526020810184848401111561288f5761288e611554565b5b61289a848285611951565b509392505050565b600082601f8301126128b7576128b661154f565b5b81516128c7848260208601612860565b91505092915050565b6000602082840312156128e6576128e56114af565b5b600082015167ffffffffffffffff811115612904576129036114b4565b5b612910848285016128a2565b91505092915050565b600081905092915050565b600061292f82611a13565b6129398185612919565b9350612949818560208601611951565b80840191505092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b600061298b600183612919565b915061299682612955565b600182019050919050565b60006129ad8285612924565b91506129b88261297e565b91506129c48284612924565b91508190509392505050565b7f5061727365206572726f723a20756e657870656374656420454f490000000000600082015250565b6000612a06601b83612386565b9150612a11826129d0565b602082019050919050565b60006020820190508181036000830152612a35816129f9565b905091905056fea2646970667358221220a3a536675f3df02bcd7bbfce142dd206aad4abe4e53ed64869dc25c5ea10c3fb64736f6c63430008110033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c8063987cbd71116100a1578063cb4500e711610070578063cb4500e71461037e578063e81b0462146103ae578063f930d037146103d9578063ff23fc6d146104025761010a565b8063987cbd71146102ab578063a32b29fb146102db578063a33598bf14610318578063b4fa7993146103555761010a565b806336a80dbc116100dd57806336a80dbc146101dd57806348ca4f621461021a57806372e3f69914610245578063925be54d1461026e5761010a565b80630d8e909f1461010f57806310cdb493146101385780632bf954531461017557806331b0e0e4146101a0575b600080fd5b81801561011b57600080fd5b5061013660048036038101906101319190611812565b610432565b005b81801561014457600080fd5b5061015f600480360381019061015a9190611891565b61057d565b60405161016c91906119f1565b60405180910390f35b81801561018157600080fd5b5061018a610782565b6040516101979190611a68565b60405180910390f35b8180156101ac57600080fd5b506101c760048036038101906101c29190611b1e565b610817565b6040516101d49190611ca1565b60405180910390f35b8180156101e957600080fd5b5061020460048036038101906101ff9190611d01565b610919565b6040516102119190611dd7565b60405180910390f35b81801561022657600080fd5b5061022f610a13565b60405161023c9190611a68565b60405180910390f35b81801561025157600080fd5b5061026c60048036038101906102679190611e7a565b610aa8565b005b81801561027a57600080fd5b5061029560048036038101906102909190611ec3565b610bf3565b6040516102a29190611ca1565b60405180910390f35b6102c560048036038101906102c09190611fa4565b610d70565b6040516102d291906120e4565b60405180910390f35b8180156102e757600080fd5b5061030260048036038101906102fd9190612106565b610d95565b60405161030f9190611a68565b60405180910390f35b81801561032457600080fd5b5061033f600480360381019061033a9190612106565b610daf565b60405161034c9190612142565b60405180910390f35b81801561036157600080fd5b5061037c60048036038101906103779190611e7a565b610dc9565b005b6103986004803603810190610393919061215d565b610f14565b6040516103a59190612142565b60405180910390f35b8180156103ba57600080fd5b506103c3610f28565b6040516103d09190611dd7565b60405180910390f35b8180156103e557600080fd5b5061040060048036038101906103fb9190611812565b610f52565b005b61041c600480360381019061041791906121a6565b61109d565b6040516104299190611a68565b60405180910390f35b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373__$1eeb4be544c70bad97b2730d99a1a8c0f3$__63b1038e71909160016040518363ffffffff1660e01b815260040161049c92919061224a565b600060405180830381865af41580156104b9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104e291906122ea565b6040516104ef919061236f565b6000604051808303816000865af19150503d806000811461052c576040519150601f19603f3d011682016040523d82523d6000602084013e610531565b606091505b50915091508161057857806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f91906123d0565b60405180910390fd5b505050565b6105856113bc565b600080730a3540f79be10ef14890e87c1a0040a68cc6af7173ffffffffffffffffffffffffffffffffffffffff166040516105bf90612418565b6000604051808303816000865af19150503d80600081146105fc576040519150601f19603f3d011682016040523d82523d6000602084013e610601565b606091505b50915091508161061057600080fd5b600061061b82611167565b905060006106288261119f565b90508063ffffffff168610610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066990612479565b60405180910390fd5b60005b868110156106e9576000610688846111c7565b60ff16600281111561069d5761069c6118be565b5b9050600160028111156106b3576106b26118be565b5b8160028111156106c6576106c56118be565b5b036106d5576106d4846111e7565b5b5080806106e1906124c8565b915050610675565b506106f3826111c7565b60ff166002811115610708576107076118be565b5b8560000190600281111561071f5761071e6118be565b5b90816002811115610733576107326118be565b5b815250506001600281111561074b5761074a6118be565b5b85600001516002811115610762576107616118be565b5b036107795761077082611221565b85602001819052505b50505050919050565b606060008073723ffbaba940e75e7bf5f6d61dcbf8d9a4de0fd773ffffffffffffffffffffffffffffffffffffffff166040516107be90612418565b6000604051808303816000865af19150503d80600081146107fb576040519150601f19603f3d011682016040523d82523d6000602084013e610800565b606091505b50915091508161080f57600080fd5b809250505090565b61081f6113e8565b61090e8661082b610a13565b6040518060400160405280600481526020017f63616c6c0000000000000000000000000000000000000000000000000000000081525060008960008a73__$1eeb4be544c70bad97b2730d99a1a8c0f3$__6312496a1b90916040518263ffffffff1660e01b815260040161089f919061255a565b600060405180830381865af41580156108bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108e591906122ea565b6040516020016108f89493929190612628565b6040516020818303038152906040528787610bf3565b905095945050505050565b610921611433565b600060405180604001604052806000151581526020018473ffffffffffffffffffffffffffffffffffffffff168152509050806020015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b373516cded1d16af10cad47d6d49128e2eb7d27b3727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109c69291906126bc565b6020604051808303816000875af11580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a099190612711565b5080915050919050565b606060008073fefae79e4180eb0284f261205e3f8cea737aff5673ffffffffffffffffffffffffffffffffffffffff16604051610a4f90612418565b6000604051808303816000865af19150503d8060008114610a8c576040519150601f19603f3d011682016040523d82523d6000602084013e610a91565b606091505b509150915081610aa057600080fd5b809250505090565b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373__$1eeb4be544c70bad97b2730d99a1a8c0f3$__631f42468a909160016040518363ffffffff1660e01b8152600401610b1292919061273e565b600060405180830381865af4158015610b2f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b5891906122ea565b604051610b65919061236f565b6000604051808303816000865af19150503d8060008114610ba2576040519150601f19603f3d011682016040523d82523d6000602084013e610ba7565b606091505b509150915081610bee57806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be591906123d0565b60405180910390fd5b505050565b610bfb6113e8565b60006040518060a00160405280888152602001878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681525090508760000160009054906101000a900460ff16610c8f576a01a784379d99db4200000084610c6f919061276e565b935060018860000160006101000a81548160ff0219169083151502179055505b6000846fffffffffffffffffffffffffffffffff161115610d62578760000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876fffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401610d1d939291906127c1565b6020604051808303816000875af1158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190612711565b505b809150509695505050505050565b610d78611465565b604051806040016040528084815260200183815250905092915050565b6060610da882610da3610a13565b61109d565b9050919050565b6000610dc2610dbd83610d95565b610f14565b9050919050565b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373__$1eeb4be544c70bad97b2730d99a1a8c0f3$__631f42468a909160006040518363ffffffff1660e01b8152600401610e3392919061273e565b600060405180830381865af4158015610e50573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e7991906122ea565b604051610e86919061236f565b6000604051808303816000865af19150503d8060008114610ec3576040519150601f19603f3d011682016040523d82523d6000602084013e610ec8565b606091505b509150915081610f0f57806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0691906123d0565b60405180910390fd5b505050565b6000818051906020012060001c9050919050565b610f30611433565b610f4d734861825e75ab14553e5af711ebbe6873d369d146610919565b905090565b60008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff168373__$1eeb4be544c70bad97b2730d99a1a8c0f3$__63b1038e71909160006040518363ffffffff1660e01b8152600401610fbc92919061224a565b600060405180830381865af4158015610fd9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061100291906122ea565b60405161100f919061236f565b6000604051808303816000865af19150503d806000811461104c576040519150601f19603f3d011682016040523d82523d6000602084013e611051565b606091505b50915091508161109857806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f91906123d0565b60405180910390fd5b505050565b606073__$58bab780dba63e3c98a453b4179a529959$__63451d89fa8460601b6040516020016110cd9190612845565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016110f8919061255a565b600060405180830381865af4158015611115573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061113e91906128d0565b826040516020016111509291906129a1565b604051602081830303815290604052905092915050565b61116f61148b565b60008290506020810182600001818152505061118a8161126f565b82600001510182602001818152505050919050565b60006111c06111b860048461127a90919063ffffffff16565b60e01c6112b7565b9050919050565b60006111dd60018361127a90919063ffffffff16565b60f81c9050919050565b60006111f28261119f565b63ffffffff16905061120d81836112fb90919063ffffffff16565b808260000181815101915081815250505050565b6060600061122e8361119f565b63ffffffff16905061124981846112fb90919063ffffffff16565b61125783600001518261134c565b91508083600001818151019150818152505050919050565b600081519050919050565b600061128f82846112fb90919063ffffffff16565b61129c836000015161126f565b60001b90508183600001818151019150818152505092915050565b6000600863ff00ff00831663ffffffff16901c600862ff00ff841663ffffffff16901b17915060108263ffffffff16901c60108363ffffffff16901b179050919050565b8160200151818360000151011115611348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133f90612a1c565b60405180910390fd5b5050565b6060600082146113b65760405190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810180604052828252602082015b6001156113b35784518152602081019050818103156113b35760208501945061138f565b50505b92915050565b6040518060400160405280600060028111156113db576113da6118be565b5b8152602001606081525090565b6040518060a0016040528060608152602001606081526020016060815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6040518060400160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60405180604001604052806114786113e8565b81526020016114856113e8565b81525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611507826114be565b810181811067ffffffffffffffff82111715611526576115256114cf565b5b80604052505050565b60006115396114a5565b905061154582826114fe565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611574576115736114cf565b5b61157d826114be565b9050602081019050919050565b82818337600083830152505050565b60006115ac6115a784611559565b61152f565b9050828152602081018484840111156115c8576115c7611554565b5b6115d384828561158a565b509392505050565b600082601f8301126115f0576115ef61154f565b5b8135611600848260208601611599565b91505092915050565b600067ffffffffffffffff821115611624576116236114cf565b5b61162d826114be565b9050602081019050919050565b600061164d61164884611609565b61152f565b90508281526020810184848401111561166957611668611554565b5b61167484828561158a565b509392505050565b600082601f8301126116915761169061154f565b5b81356116a184826020860161163a565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6116cf816116aa565b81146116da57600080fd5b50565b6000813590506116ec816116c6565b92915050565b600067ffffffffffffffff82169050919050565b61170f816116f2565b811461171a57600080fd5b50565b60008135905061172c81611706565b92915050565b600060a08284031215611748576117476114b9565b5b61175260a061152f565b9050600082013567ffffffffffffffff8111156117725761177161154a565b5b61177e848285016115db565b600083015250602082013567ffffffffffffffff8111156117a2576117a161154a565b5b6117ae848285016115db565b602083015250604082013567ffffffffffffffff8111156117d2576117d161154a565b5b6117de8482850161167c565b60408301525060606117f2848285016116dd565b60608301525060806118068482850161171d565b60808301525092915050565b600060208284031215611828576118276114af565b5b600082013567ffffffffffffffff811115611846576118456114b4565b5b61185284828501611732565b91505092915050565b6000819050919050565b61186e8161185b565b811461187957600080fd5b50565b60008135905061188b81611865565b92915050565b6000602082840312156118a7576118a66114af565b5b60006118b58482850161187c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106118fe576118fd6118be565b5b50565b600081905061190f826118ed565b919050565b600061191f82611901565b9050919050565b61192f81611914565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561196f578082015181840152602081019050611954565b60008484015250505050565b600061198682611935565b6119908185611940565b93506119a0818560208601611951565b6119a9816114be565b840191505092915050565b60006040830160008301516119cc6000860182611926565b50602083015184820360208601526119e4828261197b565b9150508091505092915050565b60006020820190508181036000830152611a0b81846119b4565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000611a3a82611a13565b611a448185611a1e565b9350611a54818560208601611951565b611a5d816114be565b840191505092915050565b60006020820190508181036000830152611a828184611a2f565b905092915050565b6000819050919050565b611a9d81611a8a565b8114611aa857600080fd5b50565b600081359050611aba81611a94565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611aeb82611ac0565b9050919050565b611afb81611ae0565b8114611b0657600080fd5b50565b600081359050611b1881611af2565b92915050565b600080600080600060a08688031215611b3a57611b396114af565b5b6000611b4888828901611aab565b9550506020611b5988828901611b09565b945050604086013567ffffffffffffffff811115611b7a57611b796114b4565b5b611b868882890161167c565b9350506060611b97888289016116dd565b9250506080611ba88882890161171d565b9150509295509295909350565b600082825260208201905092915050565b6000611bd182611a13565b611bdb8185611bb5565b9350611beb818560208601611951565b611bf4816114be565b840191505092915050565b611c08816116aa565b82525050565b611c17816116f2565b82525050565b600060a0830160008301518482036000860152611c3a8282611bc6565b91505060208301518482036020860152611c548282611bc6565b91505060408301518482036040860152611c6e828261197b565b9150506060830151611c836060860182611bff565b506080830151611c966080860182611c0e565b508091505092915050565b60006020820190508181036000830152611cbb8184611c1d565b905092915050565b6000611cce82611ae0565b9050919050565b611cde81611cc3565b8114611ce957600080fd5b50565b600081359050611cfb81611cd5565b92915050565b600060208284031215611d1757611d166114af565b5b6000611d2584828501611cec565b91505092915050565b60008115159050919050565b611d4381611d2e565b82525050565b6000819050919050565b6000611d6e611d69611d6484611ac0565b611d49565b611ac0565b9050919050565b6000611d8082611d53565b9050919050565b6000611d9282611d75565b9050919050565b611da281611d87565b82525050565b604082016000820151611dbe6000850182611d3a565b506020820151611dd16020850182611d99565b50505050565b6000604082019050611dec6000830184611da8565b92915050565b600060408284031215611e0857611e076114b9565b5b611e12604061152f565b9050600082013567ffffffffffffffff811115611e3257611e3161154a565b5b611e3e84828501611732565b600083015250602082013567ffffffffffffffff811115611e6257611e6161154a565b5b611e6e84828501611732565b60208301525092915050565b600060208284031215611e9057611e8f6114af565b5b600082013567ffffffffffffffff811115611eae57611ead6114b4565b5b611eba84828501611df2565b91505092915050565b60008060008060008060c08789031215611ee057611edf6114af565b5b6000611eee89828a01611aab565b965050602087013567ffffffffffffffff811115611f0f57611f0e6114b4565b5b611f1b89828a016115db565b955050604087013567ffffffffffffffff811115611f3c57611f3b6114b4565b5b611f4889828a016115db565b945050606087013567ffffffffffffffff811115611f6957611f686114b4565b5b611f7589828a0161167c565b9350506080611f8689828a016116dd565b92505060a0611f9789828a0161171d565b9150509295509295509295565b60008060408385031215611fbb57611fba6114af565b5b600083013567ffffffffffffffff811115611fd957611fd86114b4565b5b611fe585828601611732565b925050602083013567ffffffffffffffff811115612006576120056114b4565b5b61201285828601611732565b9150509250929050565b600060a08301600083015184820360008601526120398282611bc6565b915050602083015184820360208601526120538282611bc6565b9150506040830151848203604086015261206d828261197b565b91505060608301516120826060860182611bff565b5060808301516120956080860182611c0e565b508091505092915050565b600060408301600083015184820360008601526120bd828261201c565b915050602083015184820360208601526120d7828261201c565b9150508091505092915050565b600060208201905081810360008301526120fe81846120a0565b905092915050565b60006020828403121561211c5761211b6114af565b5b600061212a84828501611b09565b91505092915050565b61213c81611ae0565b82525050565b60006020820190506121576000830184612133565b92915050565b600060208284031215612173576121726114af565b5b600082013567ffffffffffffffff811115612191576121906114b4565b5b61219d848285016115db565b91505092915050565b600080604083850312156121bd576121bc6114af565b5b60006121cb85828601611b09565b925050602083013567ffffffffffffffff8111156121ec576121eb6114b4565b5b6121f8858286016115db565b9150509250929050565b60028110612213576122126118be565b5b50565b600081905061222482612202565b919050565b600061223482612216565b9050919050565b61224481612229565b82525050565b600060408201905081810360008301526122648185611c1d565b9050612273602083018461223b565b9392505050565b600061228d61228884611609565b61152f565b9050828152602081018484840111156122a9576122a8611554565b5b6122b4848285611951565b509392505050565b600082601f8301126122d1576122d061154f565b5b81516122e184826020860161227a565b91505092915050565b600060208284031215612300576122ff6114af565b5b600082015167ffffffffffffffff81111561231e5761231d6114b4565b5b61232a848285016122bc565b91505092915050565b600081905092915050565b600061234982611935565b6123538185612333565b9350612363818560208601611951565b80840191505092915050565b600061237b828461233e565b915081905092915050565b600082825260208201905092915050565b60006123a282611a13565b6123ac8185612386565b93506123bc818560208601611951565b6123c5816114be565b840191505092915050565b600060208201905081810360008301526123ea8184612397565b905092915050565b50565b6000612402600083612333565b915061240d826123f2565b600082019050919050565b6000612423826123f5565b9150819050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000612463601383612386565b915061246e8261242d565b602082019050919050565b6000602082019050818103600083015261249281612456565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124d38261185b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361250557612504612499565b5b600182019050919050565b600082825260208201905092915050565b600061252c82611935565b6125368185612510565b9350612546818560208601611951565b61254f816114be565b840191505092915050565b600060208201905081810360008301526125748184612521565b905092915050565b600060ff82169050919050565b60008160f81b9050919050565b60006125a182612589565b9050919050565b6125b96125b48261257c565b612596565b82525050565b60008160601b9050919050565b60006125d7826125bf565b9050919050565b60006125e9826125cc565b9050919050565b6126016125fc82611ae0565b6125de565b82525050565b6000819050919050565b61262261261d8261185b565b612607565b82525050565b600061263482876125a8565b60018201915061264482866125f0565b6014820191506126548285612611565b602082019150612664828461233e565b915081905095945050505050565b61267b81611ae0565b82525050565b6000819050919050565b60006126a66126a161269c84612681565b611d49565b61185b565b9050919050565b6126b68161268b565b82525050565b60006040820190506126d16000830185612672565b6126de60208301846126ad565b9392505050565b6126ee81611d2e565b81146126f957600080fd5b50565b60008151905061270b816126e5565b92915050565b600060208284031215612727576127266114af565b5b6000612735848285016126fc565b91505092915050565b6000604082019050818103600083015261275881856120a0565b9050612767602083018461223b565b9392505050565b6000612779826116aa565b9150612784836116aa565b925082820190506fffffffffffffffffffffffffffffffff8111156127ac576127ab612499565b5b92915050565b6127bb8161185b565b82525050565b60006060820190506127d66000830186612672565b6127e36020830185612672565b6127f060408301846127b2565b949350505050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b6000819050919050565b61283f61283a826127f8565b612824565b82525050565b6000612851828461282e565b60148201915081905092915050565b600061287361286e84611559565b61152f565b90508281526020810184848401111561288f5761288e611554565b5b61289a848285611951565b509392505050565b600082601f8301126128b7576128b661154f565b5b81516128c7848260208601612860565b91505092915050565b6000602082840312156128e6576128e56114af565b5b600082015167ffffffffffffffff811115612904576129036114b4565b5b612910848285016128a2565b91505092915050565b600081905092915050565b600061292f82611a13565b6129398185612919565b9350612949818560208601611951565b80840191505092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b600061298b600183612919565b915061299682612955565b600182019050919050565b60006129ad8285612924565b91506129b88261297e565b91506129c48284612924565b91508190509392505050565b7f5061727365206572726f723a20756e657870656374656420454f490000000000600082015250565b6000612a06601b83612386565b9150612a11826129d0565b602082019050919050565b60006020820190508181036000830152612a35816129f9565b905091905056fea2646970667358221220a3a536675f3df02bcd7bbfce142dd206aad4abe4e53ed64869dc25c5ea10c3fb64736f6c63430008110033",
  "libraries": {
    "Borsh": "0xAAD65874E9d83795D24Fb39B214F188b970EeCB9",
    "Codec": "0xF49dEC54E8Fed9D7207E590a592f6367212B7d0C",
    "Utils": "0x06C09c7bf9F2c07146F77002Df8e4Ea16290e36a"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressSubAccount(address,string)": {
        "notice": "Prepends the given account ID with the given address (hex-encoded)."
      },
      "auroraCall(NEAR storage,address,bytes,uint128,uint64)": {
        "notice": "Similar to `call`. It is a wrapper that simplifies the creation of a promise to a controct inside `Aurora`."
      },
      "call(NEAR storage,string,string,bytes,uint128,uint64)": {
        "notice": "Crease a base promise. This is not immediately schedule for execution until transact is called. It can be combined with other promises using `then` combinator. Input is not checekd during promise creation. If it is invalid, the transaction will be scheduled either way, but it will fail during execution."
      },
      "currentAccountId()": {
        "notice": "Get the NEAR account id of the current contract. It is the account id of Aurora engine."
      },
      "implicitAuroraAddress(string)": {
        "notice": "Compute implicity Aurora Address for the given NEAR account."
      },
      "initNear(IERC20)": {
        "notice": "Create an instance of NEAR object. Requires the address at which wNEAR ERC20 token contract is deployed."
      },
      "lazy_transact(PromiseCreateArgs)": {
        "notice": "Similar to `transact`, except the promise is not executed as part of the same transaction. A separate transaction to execute the scheduled promise is needed."
      },
      "mainnet()": {
        "notice": "Default configuration for mainnet."
      },
      "nearRepresentative(address)": {
        "notice": "Compute NEAR represtentative account for the given Aurora address. This is the NEAR account created by the cross contract call precompile."
      },
      "nearRepresentitiveImplicitAddress(address)": {
        "notice": "Compute the implicit Aurora address of the represenative NEAR account for the given Aurora address. Useful when a contract wants to call itself via a callback using cross contract call precompile."
      },
      "predecessorAccountId()": {
        "notice": "Get the NEAR account id of the predecessor contract."
      },
      "promiseResult(uint256)": {
        "notice": "Get the promise result at the specified index."
      },
      "then(PromiseCreateArgs,PromiseCreateArgs)": {
        "notice": "Create a promise with callback from two given promises."
      },
      "transact(PromiseCreateArgs)": {
        "notice": "Schedule a base promise to be executed on NEAR. After this function is called the promise should not be used anymore."
      },
      "transact(PromiseWithCallback)": {
        "notice": "Schedule a promise with callback to be executed on NEAR. After this function is called the promise should not be used anymore. Duplicated due to lack of generics in solidity. Check relevant issue: https://github.com/ethereum/solidity/issues/869"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}