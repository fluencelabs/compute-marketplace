{
  "language": "Solidity",
  "sources": {
    "contracts/AquaProxy.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"./auroraSDK/AuroraSdk.sol\";\n\ncontract AquaProxy {\n    using AuroraSdk for NEAR;\n    using AuroraSdk for PromiseWithCallback;\n    using AuroraSdk for PromiseCreateArgs;\n\n    enum ParticleStatus {\n        None,\n        Pending,\n        Success,\n        Failure\n    }\n\n    struct Particle {\n        string air;\n        string prevData;\n        string params;\n        string callResults;\n    }\n\n    IERC20 constant wNEAR = IERC20(0x4861825E75ab14553E5aF711EbbE6873d369d146);\n\n    address public immutable selfReprsentativeImplicitAddress;\n    address public immutable aquaVMImplicitAddress;\n\n    NEAR public near;\n    string public aquaVMAddress;\n    mapping(bytes32 => ParticleStatus) public particlesStatuses;\n\n    event Error(bool isAquaError, bytes message);\n\n    uint64 constant VS_NEAR_GAS = 30_000_000_000_000;\n\n    constructor(string memory aquaVMAddress_) {\n        aquaVMAddress = aquaVMAddress_;\n        aquaVMImplicitAddress = AuroraSdk.implicitAuroraAddress(aquaVMAddress);\n\n        near = AuroraSdk.initNear(wNEAR);\n\n        selfReprsentativeImplicitAddress = AuroraSdk\n            .nearRepresentitiveImplicitAddress(address(this));\n    }\n\n    function verify_script(Particle calldata particle) public returns (bool) {\n        bytes32 particleHash = keccak256(\n            abi.encodePacked(\n                particle.air,\n                particle.prevData,\n                particle.params,\n                particle.callResults\n            )\n        );\n\n        require(\n            particlesStatuses[particleHash] == ParticleStatus.None,\n            \"Particle already executed\"\n        );\n\n        PromiseCreateArgs memory mintOnNear = near.call(\n            aquaVMAddress,\n            \"verify_script\",\n            abi.encodePacked(\n                Codec.encode(bytes(particle.air)),\n                Codec.encode(bytes(particle.prevData)),\n                Codec.encode(bytes(particle.params)),\n                Codec.encode(bytes(particle.callResults))\n            ),\n            0,\n            VS_NEAR_GAS\n        );\n\n        PromiseCreateArgs memory callbackPromise = near.auroraCall(\n            address(this),\n            abi.encodeWithSelector(this.callback.selector, particleHash),\n            0,\n            VS_NEAR_GAS\n        );\n\n        mintOnNear.then(callbackPromise).lazy_transact();\n    }\n\n    function callback(bytes32 particleHash) public {\n        require(\n            msg.sender == selfReprsentativeImplicitAddress,\n            \"ERR_ACCESS_DENIED\"\n        );\n\n        if (\n            AuroraSdk.promiseResult(0).status != PromiseResultStatus.Successful\n        ) {\n            particlesStatuses[particleHash] == ParticleStatus.Failure;\n        } else {\n            particlesStatuses[particleHash] == ParticleStatus.Success;\n        }\n    }\n}\n"
    },
    "contracts/auroraSDK/AuroraSdk.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nimport \"./Borsh.sol\";\nimport \"./Codec.sol\";\nimport \"./Types.sol\";\nimport \"./Utils.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// Address of Cross Contract Call precompile in Aurora.\n// It allows scheduling new promises to NEAR contracts.\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\n// Address of predecessor account id precompile in Aurora.\n// It allows getting the predecessor account id of the current call.\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\n// Address of predecessor account id precompile in Aurora.\n// It allows getting the current account id of the current call.\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\n// Addresss of promise result precompile in Aurora.\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\n// Address of wNEAR ERC20 on mainnet\naddress constant wNEAR_MAINNET = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\n\nstruct NEAR {\n    /// Wether the represenative NEAR account id for this contract\n    /// has already been created or not. This is required since the\n    /// first cross contract call requires attaching extra deposit\n    /// to cover storage staking balance.\n    bool initialized;\n    /// Address of wNEAR token contract. It is used to charge the user\n    /// required tokens for paying NEAR storage fees and attached balance\n    /// for cross contract calls.\n    IERC20 wNEAR;\n}\n\nlibrary AuroraSdk {\n    using Codec for bytes;\n    using Codec for PromiseCreateArgs;\n    using Codec for PromiseWithCallback;\n    using Codec for Borsh.Data;\n    using Borsh for Borsh.Data;\n\n    /// Create an instance of NEAR object. Requires the address at which\n    /// wNEAR ERC20 token contract is deployed.\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\n        NEAR memory near = NEAR(false, wNEAR);\n        near.wNEAR.approve(\n            XCC_PRECOMPILE,\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        );\n        return near;\n    }\n\n    /// Default configuration for mainnet.\n    function mainnet() public returns (NEAR memory) {\n        return initNear(IERC20(wNEAR_MAINNET));\n    }\n\n    /// Compute NEAR represtentative account for the given Aurora address.\n    /// This is the NEAR account created by the cross contract call precompile.\n    function nearRepresentative(address account)\n        public\n        returns (string memory)\n    {\n        return addressSubAccount(account, currentAccountId());\n    }\n\n    /// Prepends the given account ID with the given address (hex-encoded).\n    function addressSubAccount(address account, string memory accountId)\n        public\n        pure\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    Utils.bytesToHex(abi.encodePacked((bytes20(account)))),\n                    \".\",\n                    accountId\n                )\n            );\n    }\n\n    /// Compute implicity Aurora Address for the given NEAR account.\n    function implicitAuroraAddress(string memory accountId)\n        public\n        pure\n        returns (address)\n    {\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\n    }\n\n    /// Compute the implicit Aurora address of the represenative NEAR account\n    /// for the given Aurora address. Useful when a contract wants to call\n    /// itself via a callback using cross contract call precompile.\n    function nearRepresentitiveImplicitAddress(address account)\n        public\n        returns (address)\n    {\n        return implicitAuroraAddress(nearRepresentative(account));\n    }\n\n    /// Get the promise result at the specified index.\n    function promiseResult(uint256 index)\n        public\n        returns (PromiseResult memory result)\n    {\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE\n            .call(\"\");\n        require(success);\n\n        Borsh.Data memory borsh = Borsh.from(returnData);\n\n        uint32 length = borsh.decodeU32();\n        require(index < length, \"Index out of bounds\");\n\n        for (uint256 i = 0; i < index; i++) {\n            PromiseResultStatus status = PromiseResultStatus(\n                uint8(borsh.decodeU8())\n            );\n            if (status == PromiseResultStatus.Successful) {\n                borsh.skipBytes();\n            }\n        }\n\n        result.status = PromiseResultStatus(borsh.decodeU8());\n        if (result.status == PromiseResultStatus.Successful) {\n            result.output = borsh.decodeBytes();\n        }\n    }\n\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\n    function currentAccountId() public returns (string memory) {\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE\n            .call(\"\");\n        require(success);\n        return string(returnData);\n    }\n\n    /// Get the NEAR account id of the predecessor contract.\n    function predecessorAccountId() public returns (string memory) {\n        (\n            bool success,\n            bytes memory returnData\n        ) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\"\");\n        require(success);\n        return string(returnData);\n    }\n\n    /// Crease a base promise. This is not immediately schedule for execution\n    /// until transact is called. It can be combined with other promises using\n    /// `then` combinator.\n    ///\n    /// Input is not checekd during promise creation. If it is invalid, the\n    /// transaction will be scheduled either way, but it will fail during execution.\n    function call(\n        NEAR storage near,\n        string memory targetAccountId,\n        string memory method,\n        bytes memory args,\n        uint128 nearBalance,\n        uint64 nearGas\n    ) public returns (PromiseCreateArgs memory) {\n        /// Need to capture nearBalance before we modify it so that we don't\n        /// double-charge the user for their initialization cost.\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(\n            targetAccountId,\n            method,\n            args,\n            nearBalance,\n            nearGas\n        );\n\n        if (!near.initialized) {\n            /// If the contract needs to be initialized, we need to attach\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\n            nearBalance += 2_000_000_000_000_000_000_000_000;\n            near.initialized = true;\n        }\n\n        if (nearBalance > 0) {\n            near.wNEAR.transferFrom(\n                msg.sender,\n                address(this),\n                uint256(nearBalance)\n            );\n        }\n\n        return promise_args;\n    }\n\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\n    /// to a controct inside `Aurora`.\n    function auroraCall(\n        NEAR storage near,\n        address target,\n        bytes memory args,\n        uint128 nearBalance,\n        uint64 nearGas\n    ) public returns (PromiseCreateArgs memory) {\n        return\n            call(\n                near,\n                currentAccountId(),\n                \"call\",\n                abi.encodePacked(uint8(0), target, uint256(0), args.encode()),\n                nearBalance,\n                nearGas\n            );\n    }\n\n    /// Schedule a base promise to be executed on NEAR. After this function is called\n    /// the promise should not be used anymore.\n    function transact(PromiseCreateArgs memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\n        );\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\n    /// the promise should not be used anymore.\n    ///\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\n    /// https://github.com/ethereum/solidity/issues/869\n    function transact(PromiseWithCallback memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\n        );\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\n    /// A separate transaction to execute the scheduled promise is needed.\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\n        );\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\n        );\n\n        if (!success) {\n            revert(string(returnData));\n        }\n    }\n\n    /// Create a promise with callback from two given promises.\n    function then(\n        PromiseCreateArgs memory base,\n        PromiseCreateArgs memory callback\n    ) public pure returns (PromiseWithCallback memory) {\n        return PromiseWithCallback(base, callback);\n    }\n}\n"
    },
    "contracts/auroraSDK/Borsh.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nimport \"./Utils.sol\";\n\nlibrary Borsh {\n    using Borsh for Data;\n\n    struct Data {\n        uint256 ptr;\n        uint256 end;\n    }\n\n    function from(bytes memory data) internal pure returns (Data memory res) {\n        uint256 ptr;\n        assembly {\n            ptr := data\n        }\n        unchecked {\n            res.ptr = ptr + 32;\n            res.end = res.ptr + Utils.readMemory(ptr);\n        }\n    }\n\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\n    function requireSpace(Data memory data, uint256 length) internal pure {\n        unchecked {\n            require(\n                data.ptr + length <= data.end,\n                \"Parse error: unexpected EOI\"\n            );\n        }\n    }\n\n    function read(Data memory data, uint256 length)\n        internal\n        pure\n        returns (bytes32 res)\n    {\n        data.requireSpace(length);\n        res = bytes32(Utils.readMemory(data.ptr));\n        unchecked {\n            data.ptr += length;\n        }\n        return res;\n    }\n\n    function done(Data memory data) internal pure {\n        require(data.ptr == data.end, \"Parse error: EOI expected\");\n    }\n\n    // Same considerations as for requireSpace.\n    function peekKeccak256(Data memory data, uint256 length)\n        internal\n        pure\n        returns (bytes32)\n    {\n        data.requireSpace(length);\n        return Utils.keccak256Raw(data.ptr, length);\n    }\n\n    // Same considerations as for requireSpace.\n    function peekSha256(Data memory data, uint256 length)\n        internal\n        view\n        returns (bytes32)\n    {\n        data.requireSpace(length);\n        return Utils.sha256Raw(data.ptr, length);\n    }\n\n    function decodeU8(Data memory data) internal pure returns (uint8) {\n        return uint8(bytes1(data.read(1)));\n    }\n\n    function decodeU16(Data memory data) internal pure returns (uint16) {\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\n    }\n\n    function decodeU32(Data memory data) internal pure returns (uint32) {\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\n    }\n\n    function decodeU64(Data memory data) internal pure returns (uint64) {\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\n    }\n\n    function decodeU128(Data memory data) internal pure returns (uint128) {\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\n    }\n\n    function decodeU256(Data memory data) internal pure returns (uint256) {\n        return Utils.swapBytes32(uint256(data.read(32)));\n    }\n\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\n        return bytes20(data.read(20));\n    }\n\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\n        return data.read(32);\n    }\n\n    function decodeBool(Data memory data) internal pure returns (bool) {\n        uint8 res = data.decodeU8();\n        require(res <= 1, \"Parse error: invalid bool\");\n        return res != 0;\n    }\n\n    function skipBytes(Data memory data) internal pure {\n        uint256 length = data.decodeU32();\n        data.requireSpace(length);\n        unchecked {\n            data.ptr += length;\n        }\n    }\n\n    function decodeBytes(Data memory data)\n        internal\n        pure\n        returns (bytes memory res)\n    {\n        uint256 length = data.decodeU32();\n        data.requireSpace(length);\n        res = Utils.memoryToBytes(data.ptr, length);\n        unchecked {\n            data.ptr += length;\n        }\n    }\n}\n"
    },
    "contracts/auroraSDK/Codec.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nimport \"./Borsh.sol\";\nimport \"./Types.sol\";\nimport \"./Utils.sol\";\n\n/// Provide borsh serialization and deserialization for multiple types.\nlibrary Codec {\n    using Borsh for Borsh.Data;\n\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\n        return bytes1(v);\n    }\n\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\n        return bytes2(Utils.swapBytes2(v));\n    }\n\n    function encodeU32(uint32 v) public pure returns (bytes4) {\n        return bytes4(Utils.swapBytes4(v));\n    }\n\n    function encodeU64(uint64 v) public pure returns (bytes8) {\n        return bytes8(Utils.swapBytes8(v));\n    }\n\n    function encodeU128(uint128 v) public pure returns (bytes16) {\n        return bytes16(Utils.swapBytes16(v));\n    }\n\n    /// Encode bytes into borsh. Use this method to encode strings as well.\n    function encode(bytes memory value) public pure returns (bytes memory) {\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\n    }\n\n    /// Encode Execution mode enum into borsh.\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\n        return bytes1(uint8(mode));\n    }\n\n    /// Encode PromiseArgsVariant enum into borsh.\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\n        return bytes1(uint8(mode));\n    }\n\n    /// Encode base promise into borsh.\n    function encode(PromiseCreateArgs memory nearPromise)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encodePacked(\n                encode(bytes(nearPromise.targetAccountId)),\n                encode(bytes(nearPromise.method)),\n                encode(nearPromise.args),\n                encodeU128(nearPromise.nearBalance),\n                encodeU64(nearPromise.nearGas)\n            );\n    }\n\n    /// Encode promise with callback into borsh.\n    function encode(PromiseWithCallback memory nearPromise)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encodePacked(\n                encode(nearPromise.base),\n                encode(nearPromise.callback)\n            );\n    }\n\n    /// Encode create promise using borsh. The encoded data\n    /// uses the same format that the Cross Contract Call precompile expects.\n    function encodeCrossContractCallArgs(\n        PromiseCreateArgs memory nearPromise,\n        ExecutionMode mode\n    ) public pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                encode(mode),\n                encode(PromiseArgsVariant.Create),\n                encode(nearPromise)\n            );\n    }\n\n    /// Encode promise with callback using borsh. The encoded data\n    /// uses the same format that the Cross Contract Call precompile expects.\n    function encodeCrossContractCallArgs(\n        PromiseWithCallback memory nearPromise,\n        ExecutionMode mode\n    ) public pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                encode(mode),\n                encode(PromiseArgsVariant.Callback),\n                encode(nearPromise)\n            );\n    }\n\n    /// Decode promise result using borsh.\n    function decodePromiseResult(Borsh.Data memory data)\n        public\n        pure\n        returns (PromiseResult memory result)\n    {\n        result.status = PromiseResultStatus(data.decodeU8());\n        if (result.status == PromiseResultStatus.Successful) {\n            result.output = data.decodeBytes();\n        }\n    }\n\n    /// Skip promise result from the buffer.\n    function skipPromiseResult(Borsh.Data memory data) public pure {\n        PromiseResultStatus status = PromiseResultStatus(\n            uint8(data.decodeU8())\n        );\n        if (status == PromiseResultStatus.Successful) {\n            data.skipBytes();\n        }\n    }\n}\n"
    },
    "contracts/auroraSDK/Types.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\n/// Basic NEAR promise.\nstruct PromiseCreateArgs {\n    /// Account id of the target contract to be called.\n    string targetAccountId;\n    /// Method in the contract to be called\n    string method;\n    /// Payload to be passed to the method as input.\n    bytes args;\n    /// Amount of NEAR tokens to attach to the call. This will\n    /// be charged from the caller in wNEAR.\n    uint128 nearBalance;\n    /// Amount of gas to attach to the call.\n    uint64 nearGas;\n}\n\nenum PromiseArgsVariant {\n    /// Basic NEAR promise\n    Create,\n    /// NEAR promise with a callback attached.\n    Callback,\n    /// Description of arbitrary NEAR promise. Allows applying combinators\n    /// recursively, multiple action types and batched actions.\n    Recursive\n}\n\n/// Combine two base promises using NEAR combinator `then`.\nstruct PromiseWithCallback {\n    /// Initial promise to be triggered.\n    PromiseCreateArgs base;\n    /// Second promise that is executed after the execution of `base`.\n    /// In particular this promise will have access to the result of\n    /// the `base` promise.\n    PromiseCreateArgs callback;\n}\n\nenum ExecutionMode {\n    /// Eager mode means that the promise WILL be executed in a single\n    /// NEAR transaction.\n    Eager,\n    /// Lazy mode means that the promise WILL be scheduled for execution\n    /// and a separate interaction is required to trigger this execution.\n    Lazy\n}\n\nenum PromiseResultStatus {\n    /// This status should not be reachable.\n    NotReady,\n    /// The promise was executed successfully.\n    Successful,\n    /// The promise execution failed.\n    Failed\n}\n\nstruct PromiseResult {\n    /// Status result of the promise execution.\n    PromiseResultStatus status;\n    /// If the status is successful, output contains the output of the promise.\n    /// Otherwise the output field MUST be ignored.\n    bytes output;\n}\n"
    },
    "contracts/auroraSDK/Utils.sol": {
      "content": "// SPDX-License-Identifier: CC-BY-1.0\n// https://github.com/aurora-is-near/native-erc20-connector\npragma solidity ^0.8.17;\n\nlibrary Utils {\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\n        return (v << 8) | (v >> 8);\n    }\n\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\n        return (v << 16) | (v >> 16);\n    }\n\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\n        return (v << 32) | (v >> 32);\n    }\n\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\n        v =\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\n        v =\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) |\n            ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\n        v =\n            ((v & 0x00000000ffffffff00000000ffffffff) << 32) |\n            ((v & 0xffffffff00000000ffffffff00000000) >> 32);\n        return (v << 64) | (v >> 64);\n    }\n\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\n        v =\n            ((v &\n                0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) <<\n                8) |\n            ((v &\n                0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >>\n                8);\n        v =\n            ((v &\n                0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) <<\n                16) |\n            ((v &\n                0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >>\n                16);\n        v =\n            ((v &\n                0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) <<\n                32) |\n            ((v &\n                0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >>\n                32);\n        v =\n            ((v &\n                0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) <<\n                64) |\n            ((v &\n                0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >>\n                64);\n        return (v << 128) | (v >> 128);\n    }\n\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(ptr)\n        }\n    }\n\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\n        assembly {\n            mstore(ptr, value)\n        }\n    }\n\n    function memoryToBytes(uint256 ptr, uint256 length)\n        internal\n        pure\n        returns (bytes memory res)\n    {\n        if (length != 0) {\n            assembly {\n                // 0x40 is the address of free memory pointer.\n                res := mload(0x40)\n                let end := add(\n                    res,\n                    and(\n                        add(length, 63),\n                        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n                    )\n                )\n                // end = res + 32 + 32 * ceil(length / 32).\n                mstore(0x40, end)\n                mstore(res, length)\n                let destPtr := add(res, 32)\n                // prettier-ignore\n                for {} 1 {} {\n                    mstore(destPtr, mload(ptr))\n                    destPtr := add(destPtr, 32)\n                    if eq(destPtr, end) { break }\n                    ptr := add(ptr, 32)\n                }\n            }\n        }\n    }\n\n    function keccak256Raw(uint256 ptr, uint256 length)\n        internal\n        pure\n        returns (bytes32 res)\n    {\n        assembly {\n            res := keccak256(ptr, length)\n        }\n    }\n\n    function sha256Raw(uint256 ptr, uint256 length)\n        internal\n        view\n        returns (bytes32 res)\n    {\n        assembly {\n            // 2 is the address of SHA256 precompiled contract.\n            // First 64 bytes of memory can be used as scratch space.\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\n            // prettier-ignore\n            for {} iszero(ret) {} {}\n            res := mload(0)\n        }\n    }\n\n    /// Convert array of bytes to hexadecimal string.\n    /// https://ethereum.stackexchange.com/a/126928/45323\n    function bytesToHex(bytes memory buffer)\n        public\n        pure\n        returns (string memory)\n    {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(buffer.length * 2);\n\n        bytes memory _base = \"0123456789abcdef\";\n\n        for (uint256 i = 0; i < buffer.length; i++) {\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n        }\n\n        return string(converted);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/DeveloperFaucet.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./AquaProxy.sol\";\nimport \"./TestERC20.sol\";\n\ncontract DeveloperFaucet {\n    IERC20 public immutable fluenceToken;\n    IERC20 public immutable usdToken;\n\n    constructor() {\n        uint v = 0;\n        unchecked {\n            v--;\n        }\n\n        fluenceToken = new TestERC20(\"Fluence Test Token\", \"FLT\", v);\n        usdToken = new TestERC20(\"USD Test Token\", \"USD\", v);\n    }\n\n    function receiveUSD(address addr, uint value) external {\n        usdToken.transfer(addr, value);\n    }\n\n    function receiveFLT(address addr, uint value) external {\n        fluenceToken.transfer(addr, value);\n    }\n}\n"
    },
    "contracts/TestERC20.sol": {
      "content": "// contracts/GLDToken.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 initialSupply\n    ) ERC20(name_, symbol_) {\n        _mint(msg.sender, initialSupply);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Deal.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./AquaProxy.sol\";\n\ncontract Deal {\n    using SafeERC20 for IERC20;\n\n    struct Validator {\n        uint balance;\n        bool isActive;\n    }\n\n    uint public constant WITHDRAW_TIMEOUT = 1 minutes;\n    uint public constant MIN_STAKE = 10 * 10**18;\n    uint constant SLASH_FACTOR = 100;\n\n    IERC20 public immutable paymentToken;\n    address public immutable daoAddress;\n    AquaProxy public immutable aquaProxy;\n    IERC20 public immutable fluenceToken;\n\n    bool public isStopped;\n    uint public withdrawUnlockTime;\n    bytes32 public airScriptHash;\n    mapping(address => Validator) public validators;\n\n    mapping(uint256 => uint256) private paymentsBitMap;\n\n    constructor(\n        IERC20 paymentToken_,\n        address daoAddress_,\n        AquaProxy aquaProxy_,\n        IERC20 fluenceToken_,\n        bytes32 airScriptHash_\n    ) {\n        daoAddress = daoAddress_;\n        aquaProxy = aquaProxy_;\n        fluenceToken = fluenceToken_;\n\n        paymentToken = paymentToken_;\n        airScriptHash = airScriptHash_;\n    }\n\n    function deposit(uint amount) external {\n        require(block.timestamp > withdrawUnlockTime, \"Deposit is locked\");\n\n        if (!isStopped) {\n            isStopped = true;\n        }\n\n        paymentToken.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    function createWithdrawRequest() external {\n        isStopped = true;\n        withdrawUnlockTime = block.timestamp + WITHDRAW_TIMEOUT;\n    }\n\n    function withdraw() external {\n        require(\n            isStopped && block.timestamp > withdrawUnlockTime,\n            \"Withdraw request is not created or not expired delay\"\n        );\n\n        uint balance = paymentToken.balanceOf(address(this));\n        paymentToken.safeTransfer(msg.sender, balance);\n    }\n\n    function submitGoldenParticle(AquaProxy.Particle calldata particle)\n        external\n    {\n        //verify\n        //spend\n    }\n\n    function stake(uint amount) external {\n        require(amount >= MIN_STAKE, \"Amount is too small\");\n\n        Validator memory validator = validators[msg.sender];\n\n        validator.balance += amount;\n        if (!validator.isActive) {\n            validator.isActive = true;\n        }\n\n        validators[msg.sender] = validator;\n\n        fluenceToken.transferFrom(msg.sender, address(this), amount);\n    }\n\n    function slash(AquaProxy.Particle calldata particle, address account)\n        external\n    {\n        require(\n            keccak256(abi.encodePacked(particle.air)) == airScriptHash,\n            \"Invalid script in particle\"\n        );\n\n        bytes32 particleHash = keccak256(\n            abi.encodePacked(\n                particle.air,\n                particle.prevData,\n                particle.params,\n                particle.callResults\n            )\n        );\n        require(\n            aquaProxy.particlesStatuses(particleHash) ==\n                AquaProxy.ParticleStatus.Failure,\n            \"Particle is not failed\"\n        );\n\n        _slash(account);\n    }\n\n    function _slash(address account) private {\n        Validator memory validator = validators[account];\n\n        uint slashAmount = (validator.balance / 100) * SLASH_FACTOR;\n\n        validator.balance -= slashAmount;\n\n        validators[account] = validator;\n        fluenceToken.transferFrom(address(this), daoAddress, slashAmount);\n    }\n\n    function _exit(address account) private {\n        Validator memory validator = validators[account];\n\n        uint balance = validator.balance;\n        validator.balance = 0;\n\n        validators[account] = validator;\n        fluenceToken.transferFrom(address(this), daoAddress, balance);\n    }\n}\n"
    },
    "contracts/DealFactory.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./AquaProxy.sol\";\nimport \"./Deal.sol\";\n\ncontract DealFactory {\n    //TODO: add editable params\n    address public immutable daoAddress;\n    AquaProxy public immutable aquaProxy;\n    IERC20 public immutable fluenceToken;\n\n    event CreateDeal(address addr);\n\n    constructor(\n        address daoAddress_,\n        AquaProxy aquaProxy_,\n        IERC20 fluenceToken_\n    ) {\n        daoAddress = daoAddress_;\n        aquaProxy = aquaProxy_;\n        fluenceToken = fluenceToken_;\n    }\n\n    function createDeal(IERC20 paymentToken, bytes32 airScriptHash) external {\n        address addr = address(\n            new Deal(\n                paymentToken,\n                daoAddress,\n                aquaProxy,\n                fluenceToken,\n                airScriptHash\n            )\n        );\n\n        emit CreateDeal(addr);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}