{
  "address": "0x280e8ceE3C259864C54a2C890C0Ce8044F4F9891",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoAddress_",
          "type": "address"
        },
        {
          "internalType": "contract AquaProxy",
          "name": "aquaProxy_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "fluenceToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "CreateDeal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aquaProxy",
      "outputs": [
        {
          "internalType": "contract AquaProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "airScriptHash",
          "type": "bytes32"
        }
      ],
      "name": "createDeal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fluenceToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67cf689044ffb4c22f8f9b81de576763b0f801d270e038d21b0ff334759e4e85",
  "receipt": {
    "to": null,
    "from": "0x85fbC7b5087cC7b4Fe3Fe97755D8E01c9Fd727D9",
    "contractAddress": "0x280e8ceE3C259864C54a2C890C0Ce8044F4F9891",
    "transactionIndex": 0,
    "gasUsed": "2002498",
    "logsBloom": "0x
    "blockHash": "0xddb53a262bad453a8d820aeac43bf2e04dd843805c60b5225d74e976bfbf5203",
    "transactionHash": "0x67cf689044ffb4c22f8f9b81de576763b0f801d270e038d21b0ff334759e4e85",
    "logs": [],
    "blockNumber": 104279373,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x85fbC7b5087cC7b4Fe3Fe97755D8E01c9Fd727D9",
    "0x95589Ce9145920a228f23E751AA1CAF7948790BB",
    "0xB1dD17af0dd3ADF52710a506192EA14d36f135b3"
  ],
  "numDeployments": 3,
  "solcInputHash": "9d61e53273f3e0ca6e223a4e5bfc299a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoAddress_\",\"type\":\"address\"},{\"internalType\":\"contract AquaProxy\",\"name\":\"aquaProxy_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"fluenceToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"CreateDeal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aquaProxy\",\"outputs\":[{\"internalType\":\"contract AquaProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"airScriptHash\",\"type\":\"bytes32\"}],\"name\":\"createDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fluenceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DealFactory.sol\":\"DealFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/AquaProxy.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"./auroraSDK/AuroraSdk.sol\\\";\\n\\ncontract AquaProxy {\\n    using AuroraSdk for NEAR;\\n    using AuroraSdk for PromiseWithCallback;\\n    using AuroraSdk for PromiseCreateArgs;\\n\\n    enum ParticleStatus {\\n        None,\\n        Pending,\\n        Success,\\n        Failure\\n    }\\n\\n    struct Particle {\\n        string air;\\n        string prevData;\\n        string params;\\n        string callResults;\\n    }\\n\\n    IERC20 constant wNEAR = IERC20(0x4861825E75ab14553E5aF711EbbE6873d369d146);\\n\\n    address public immutable selfReprsentativeImplicitAddress;\\n    address public immutable aquaVMImplicitAddress;\\n\\n    NEAR public near;\\n    string public aquaVMAddress;\\n    mapping(bytes32 => ParticleStatus) public particlesStatuses;\\n\\n    event VerifyParticle(\\n        bytes32 hash,\\n        string air,\\n        string prevData,\\n        string params,\\n        string callResults\\n    );\\n\\n    uint64 constant VS_NEAR_GAS = 30_000_000_000_000;\\n\\n    constructor(string memory aquaVMAddress_) {\\n        aquaVMAddress = aquaVMAddress_;\\n        aquaVMImplicitAddress = AuroraSdk.implicitAuroraAddress(aquaVMAddress);\\n\\n        near = AuroraSdk.initNear(wNEAR);\\n\\n        selfReprsentativeImplicitAddress = AuroraSdk\\n            .nearRepresentitiveImplicitAddress(address(this));\\n    }\\n\\n    function verifyParticle(Particle calldata particle) public {\\n        bytes32 particleHash = keccak256(\\n            abi.encodePacked(\\n                particle.air,\\n                particle.prevData,\\n                particle.params,\\n                particle.callResults\\n            )\\n        );\\n\\n        require(\\n            particlesStatuses[particleHash] == ParticleStatus.None,\\n            \\\"Particle already executed\\\"\\n        );\\n\\n        PromiseCreateArgs memory verifyScriptCall = near.call(\\n            aquaVMAddress,\\n            \\\"verify_script\\\",\\n            abi.encodePacked(\\n                Codec.encode(bytes(particle.air)),\\n                Codec.encode(bytes(particle.prevData)),\\n                Codec.encode(bytes(particle.params)),\\n                Codec.encode(bytes(particle.callResults))\\n            ),\\n            0,\\n            VS_NEAR_GAS\\n        );\\n\\n        PromiseCreateArgs memory callbackPromise = near.auroraCall(\\n            address(this),\\n            abi.encodeWithSelector(this.callback.selector, particleHash),\\n            0,\\n            VS_NEAR_GAS\\n        );\\n\\n        verifyScriptCall.then(callbackPromise).lazy_transact();\\n\\n        particlesStatuses[particleHash] = ParticleStatus.Pending;\\n\\n        emit VerifyParticle(\\n            particleHash,\\n            particle.air,\\n            particle.prevData,\\n            particle.params,\\n            particle.callResults\\n        );\\n    }\\n\\n    function callback(bytes32 particleHash) public {\\n        require(\\n            msg.sender == selfReprsentativeImplicitAddress,\\n            \\\"ERR_ACCESS_DENIED\\\"\\n        );\\n\\n        require(\\n            particlesStatuses[particleHash] == ParticleStatus.Pending,\\n            \\\"Particle already executed\\\"\\n        );\\n\\n        if (\\n            AuroraSdk.promiseResult(0).status != PromiseResultStatus.Successful\\n        ) {\\n            particlesStatuses[particleHash] = ParticleStatus.Failure;\\n        } else {\\n            particlesStatuses[particleHash] = ParticleStatus.Success;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa55af4233be84c093f2f4981d29e4f7f27e37bbd3397b3abbaa235935c511b12\"},\"contracts/Deal.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./AquaProxy.sol\\\";\\n\\ncontract Deal {\\n    using SafeERC20 for IERC20;\\n\\n    struct Validator {\\n        uint balance;\\n        bool isActive;\\n    }\\n\\n    uint public constant WITHDRAW_TIMEOUT = 1 minutes;\\n    uint public constant MIN_STAKE = 10 * 10**18;\\n    uint constant SLASH_FACTOR = 100;\\n\\n    IERC20 public immutable paymentToken;\\n    address public immutable daoAddress;\\n    AquaProxy public immutable aquaProxy;\\n    IERC20 public immutable fluenceToken;\\n\\n    bool public isStopped;\\n    uint public withdrawUnlockTime;\\n    bytes32 public airScriptHash;\\n    mapping(address => Validator) public validators;\\n\\n    mapping(uint256 => uint256) private paymentsBitMap;\\n\\n    constructor(\\n        IERC20 paymentToken_,\\n        address daoAddress_,\\n        AquaProxy aquaProxy_,\\n        IERC20 fluenceToken_,\\n        bytes32 airScriptHash_\\n    ) {\\n        daoAddress = daoAddress_;\\n        aquaProxy = aquaProxy_;\\n        fluenceToken = fluenceToken_;\\n\\n        paymentToken = paymentToken_;\\n        airScriptHash = airScriptHash_;\\n    }\\n\\n    function deposit(uint amount) external {\\n        require(block.timestamp > withdrawUnlockTime, \\\"Deposit is locked\\\");\\n\\n        if (!isStopped) {\\n            isStopped = true;\\n        }\\n\\n        paymentToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function createWithdrawRequest() external {\\n        isStopped = true;\\n        withdrawUnlockTime = block.timestamp + WITHDRAW_TIMEOUT;\\n    }\\n\\n    function withdraw() external {\\n        require(\\n            isStopped && block.timestamp > withdrawUnlockTime,\\n            \\\"Withdraw request is not created or not expired delay\\\"\\n        );\\n\\n        uint balance = paymentToken.balanceOf(address(this));\\n        paymentToken.safeTransfer(msg.sender, balance);\\n    }\\n\\n    function submitGoldenParticle(AquaProxy.Particle calldata particle)\\n        external\\n    {\\n        //verify\\n        //spend\\n    }\\n\\n    function stake(uint amount) external {\\n        require(amount >= MIN_STAKE, \\\"Amount is too small\\\");\\n\\n        Validator memory validator = validators[msg.sender];\\n\\n        validator.balance += amount;\\n        if (!validator.isActive) {\\n            validator.isActive = true;\\n        }\\n\\n        validators[msg.sender] = validator;\\n\\n        fluenceToken.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function slash(AquaProxy.Particle calldata particle, address account)\\n        external\\n    {\\n        require(\\n            keccak256(abi.encodePacked(particle.air)) == airScriptHash,\\n            \\\"Invalid script in particle\\\"\\n        );\\n\\n        bytes32 particleHash = keccak256(\\n            abi.encodePacked(\\n                particle.air,\\n                particle.prevData,\\n                particle.params,\\n                particle.callResults\\n            )\\n        );\\n        require(\\n            aquaProxy.particlesStatuses(particleHash) ==\\n                AquaProxy.ParticleStatus.Failure,\\n            \\\"Particle is not failed\\\"\\n        );\\n\\n        _slash(account);\\n    }\\n\\n    function _slash(address account) private {\\n        Validator memory validator = validators[account];\\n\\n        uint slashAmount = (validator.balance / 100) * SLASH_FACTOR;\\n\\n        validator.balance -= slashAmount;\\n\\n        validators[account] = validator;\\n        fluenceToken.transferFrom(address(this), daoAddress, slashAmount);\\n    }\\n\\n    function _exit(address account) private {\\n        Validator memory validator = validators[account];\\n\\n        uint balance = validator.balance;\\n        validator.balance = 0;\\n\\n        validators[account] = validator;\\n        fluenceToken.transferFrom(address(this), daoAddress, balance);\\n    }\\n}\\n\",\"keccak256\":\"0x80ab342f3dfaedd3c0488eb20a5e580f27c5f6cbfd2e606b3139775d4430345d\"},\"contracts/DealFactory.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./AquaProxy.sol\\\";\\nimport \\\"./Deal.sol\\\";\\n\\ncontract DealFactory {\\n    //TODO: add editable params\\n    address public immutable daoAddress;\\n    AquaProxy public immutable aquaProxy;\\n    IERC20 public immutable fluenceToken;\\n\\n    event CreateDeal(address addr);\\n\\n    constructor(\\n        address daoAddress_,\\n        AquaProxy aquaProxy_,\\n        IERC20 fluenceToken_\\n    ) {\\n        daoAddress = daoAddress_;\\n        aquaProxy = aquaProxy_;\\n        fluenceToken = fluenceToken_;\\n    }\\n\\n    function createDeal(IERC20 paymentToken, bytes32 airScriptHash) external {\\n        address addr = address(\\n            new Deal(\\n                paymentToken,\\n                daoAddress,\\n                aquaProxy,\\n                fluenceToken,\\n                airScriptHash\\n            )\\n        );\\n\\n        emit CreateDeal(addr);\\n    }\\n}\\n\",\"keccak256\":\"0xdf8a1587dbd08553efe92418c35017e426e169ef08d022ba1a281db78b4532d0\"},\"contracts/auroraSDK/AuroraSdk.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Codec.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Address of Cross Contract Call precompile in Aurora.\\n// It allows scheduling new promises to NEAR contracts.\\naddress constant XCC_PRECOMPILE = 0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the predecessor account id of the current call.\\naddress constant PREDECESSOR_ACCOUNT_ID_PRECOMPILE = 0x723FfBAbA940e75E7BF5F6d61dCbf8d9a4De0fD7;\\n// Address of predecessor account id precompile in Aurora.\\n// It allows getting the current account id of the current call.\\naddress constant CURRENT_ACCOUNT_ID_PRECOMPILE = 0xfeFAe79E4180Eb0284F261205E3F8CEA737afF56;\\n// Addresss of promise result precompile in Aurora.\\naddress constant PROMISE_RESULT_PRECOMPILE = 0x0A3540F79BE10EF14890e87c1A0040A68Cc6AF71;\\n// Address of wNEAR ERC20 on mainnet\\naddress constant wNEAR_MAINNET = 0x4861825E75ab14553E5aF711EbbE6873d369d146;\\n\\nstruct NEAR {\\n    /// Wether the represenative NEAR account id for this contract\\n    /// has already been created or not. This is required since the\\n    /// first cross contract call requires attaching extra deposit\\n    /// to cover storage staking balance.\\n    bool initialized;\\n    /// Address of wNEAR token contract. It is used to charge the user\\n    /// required tokens for paying NEAR storage fees and attached balance\\n    /// for cross contract calls.\\n    IERC20 wNEAR;\\n}\\n\\nlibrary AuroraSdk {\\n    using Codec for bytes;\\n    using Codec for PromiseCreateArgs;\\n    using Codec for PromiseWithCallback;\\n    using Codec for Borsh.Data;\\n    using Borsh for Borsh.Data;\\n\\n    /// Create an instance of NEAR object. Requires the address at which\\n    /// wNEAR ERC20 token contract is deployed.\\n    function initNear(IERC20 wNEAR) public returns (NEAR memory) {\\n        NEAR memory near = NEAR(false, wNEAR);\\n        near.wNEAR.approve(\\n            XCC_PRECOMPILE,\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n        return near;\\n    }\\n\\n    /// Default configuration for mainnet.\\n    function mainnet() public returns (NEAR memory) {\\n        return initNear(IERC20(wNEAR_MAINNET));\\n    }\\n\\n    /// Compute NEAR represtentative account for the given Aurora address.\\n    /// This is the NEAR account created by the cross contract call precompile.\\n    function nearRepresentative(address account)\\n        public\\n        returns (string memory)\\n    {\\n        return addressSubAccount(account, currentAccountId());\\n    }\\n\\n    /// Prepends the given account ID with the given address (hex-encoded).\\n    function addressSubAccount(address account, string memory accountId)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Utils.bytesToHex(abi.encodePacked((bytes20(account)))),\\n                    \\\".\\\",\\n                    accountId\\n                )\\n            );\\n    }\\n\\n    /// Compute implicity Aurora Address for the given NEAR account.\\n    function implicitAuroraAddress(string memory accountId)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(uint256(keccak256(bytes(accountId)))));\\n    }\\n\\n    /// Compute the implicit Aurora address of the represenative NEAR account\\n    /// for the given Aurora address. Useful when a contract wants to call\\n    /// itself via a callback using cross contract call precompile.\\n    function nearRepresentitiveImplicitAddress(address account)\\n        public\\n        returns (address)\\n    {\\n        return implicitAuroraAddress(nearRepresentative(account));\\n    }\\n\\n    /// Get the promise result at the specified index.\\n    function promiseResult(uint256 index)\\n        public\\n        returns (PromiseResult memory result)\\n    {\\n        (bool success, bytes memory returnData) = PROMISE_RESULT_PRECOMPILE\\n            .call(\\\"\\\");\\n        require(success);\\n\\n        Borsh.Data memory borsh = Borsh.from(returnData);\\n\\n        uint32 length = borsh.decodeU32();\\n        require(index < length, \\\"Index out of bounds\\\");\\n\\n        for (uint256 i = 0; i < index; i++) {\\n            PromiseResultStatus status = PromiseResultStatus(\\n                uint8(borsh.decodeU8())\\n            );\\n            if (status == PromiseResultStatus.Successful) {\\n                borsh.skipBytes();\\n            }\\n        }\\n\\n        result.status = PromiseResultStatus(borsh.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = borsh.decodeBytes();\\n        }\\n    }\\n\\n    /// Get the NEAR account id of the current contract. It is the account id of Aurora engine.\\n    function currentAccountId() public returns (string memory) {\\n        (bool success, bytes memory returnData) = CURRENT_ACCOUNT_ID_PRECOMPILE\\n            .call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Get the NEAR account id of the predecessor contract.\\n    function predecessorAccountId() public returns (string memory) {\\n        (\\n            bool success,\\n            bytes memory returnData\\n        ) = PREDECESSOR_ACCOUNT_ID_PRECOMPILE.call(\\\"\\\");\\n        require(success);\\n        return string(returnData);\\n    }\\n\\n    /// Crease a base promise. This is not immediately schedule for execution\\n    /// until transact is called. It can be combined with other promises using\\n    /// `then` combinator.\\n    ///\\n    /// Input is not checekd during promise creation. If it is invalid, the\\n    /// transaction will be scheduled either way, but it will fail during execution.\\n    function call(\\n        NEAR storage near,\\n        string memory targetAccountId,\\n        string memory method,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        /// Need to capture nearBalance before we modify it so that we don't\\n        /// double-charge the user for their initialization cost.\\n        PromiseCreateArgs memory promise_args = PromiseCreateArgs(\\n            targetAccountId,\\n            method,\\n            args,\\n            nearBalance,\\n            nearGas\\n        );\\n\\n        if (!near.initialized) {\\n            /// If the contract needs to be initialized, we need to attach\\n            /// 2 NEAR (= 2 * 10^24 yoctoNEAR) to the promise.\\n            nearBalance += 2_000_000_000_000_000_000_000_000;\\n            near.initialized = true;\\n        }\\n\\n        if (nearBalance > 0) {\\n            near.wNEAR.transferFrom(\\n                msg.sender,\\n                address(this),\\n                uint256(nearBalance)\\n            );\\n        }\\n\\n        return promise_args;\\n    }\\n\\n    /// Similar to `call`. It is a wrapper that simplifies the creation of a promise\\n    /// to a controct inside `Aurora`.\\n    function auroraCall(\\n        NEAR storage near,\\n        address target,\\n        bytes memory args,\\n        uint128 nearBalance,\\n        uint64 nearGas\\n    ) public returns (PromiseCreateArgs memory) {\\n        return\\n            call(\\n                near,\\n                currentAccountId(),\\n                \\\"call\\\",\\n                abi.encodePacked(uint8(0), target, uint256(0), args.encode()),\\n                nearBalance,\\n                nearGas\\n            );\\n    }\\n\\n    /// Schedule a base promise to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    function transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Schedule a promise with callback to be executed on NEAR. After this function is called\\n    /// the promise should not be used anymore.\\n    ///\\n    /// Duplicated due to lack of generics in solidity. Check relevant issue:\\n    /// https://github.com/ethereum/solidity/issues/869\\n    function transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Similar to `transact`, except the promise is not executed as part of the same transaction.\\n    /// A separate transaction to execute the scheduled promise is needed.\\n    function lazy_transact(PromiseCreateArgs memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    function lazy_transact(PromiseWithCallback memory nearPromise) public {\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            nearPromise.encodeCrossContractCallArgs(ExecutionMode.Lazy)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n    }\\n\\n    /// Create a promise with callback from two given promises.\\n    function then(\\n        PromiseCreateArgs memory base,\\n        PromiseCreateArgs memory callback\\n    ) public pure returns (PromiseWithCallback memory) {\\n        return PromiseWithCallback(base, callback);\\n    }\\n}\\n\",\"keccak256\":\"0x8b0085ffaf4b5130088c916ee5af235c7b48a26ffa634f88c9b5d6d930a9c97d\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(\\n                data.ptr + length <= data.end,\\n                \\\"Parse error: unexpected EOI\\\"\\n            );\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a3704c81feec760578cfbfb2ec7038d9dbffda15d3f5706946fecbcd13e869d\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(bytes(nearPromise.targetAccountId)),\\n                encode(bytes(nearPromise.method)),\\n                encode(nearPromise.args),\\n                encodeU128(nearPromise.nearBalance),\\n                encodeU64(nearPromise.nearGas)\\n            );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(nearPromise.base),\\n                encode(nearPromise.callback)\\n            );\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseCreateArgs memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Create),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseWithCallback memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Callback),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data)\\n        public\\n        pure\\n        returns (PromiseResult memory result)\\n    {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(\\n            uint8(data.decodeU8())\\n        );\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa218811f1575083887938428d0d1b4001b26609ae4f98e248e9c66dfd34fcbfe\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant {\\n    /// Basic NEAR promise\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode {\\n    /// Eager mode means that the promise WILL be executed in a single\\n    /// NEAR transaction.\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus {\\n    /// This status should not be reachable.\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xfd72f1cab846359ba751ccf4a0ed670aef5016f3239e60547ae88bee459d8437\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v =\\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v =\\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) |\\n            ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v =\\n            ((v & 0x00000000ffffffff00000000ffffffff) << 32) |\\n            ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v =\\n            ((v &\\n                0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) <<\\n                8) |\\n            ((v &\\n                0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >>\\n                8);\\n        v =\\n            ((v &\\n                0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) <<\\n                16) |\\n            ((v &\\n                0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >>\\n                16);\\n        v =\\n            ((v &\\n                0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) <<\\n                32) |\\n            ((v &\\n                0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >>\\n                32);\\n        v =\\n            ((v &\\n                0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) <<\\n                64) |\\n            ((v &\\n                0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >>\\n                64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end := add(\\n                    res,\\n                    and(\\n                        add(length, 63),\\n                        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\\n                    )\\n                )\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length)\\n        internal\\n        view\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0xff8fdd1fc95ec1ab0f94ababeafdeea46fc110367cfed77c43a17c2f4fd03a9c\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632131c68c1461005157806335064b721461006f57806385079cd71461008b578063ac027f97146100a9575b600080fd5b6100596100c7565b604051610066919061025e565b60405180910390f35b610089600480360381019061008491906102f2565b6100eb565b005b6100936101c7565b6040516100a09190610391565b60405180910390f35b6100b16101eb565b6040516100be91906103cd565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008560405161015e9061020f565b61016c9594939291906103f7565b604051809103906000f080158015610188573d6000803e3d6000fd5b5090507f941e9b54a9a5b7a0112e23820aeeee3827703e73e627960d41b59b8e82258897816040516101ba919061025e565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b611ece806200044b83390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102488261021d565b9050919050565b6102588161023d565b82525050565b6000602082019050610273600083018461024f565b92915050565b600080fd5b60006102898261023d565b9050919050565b6102998161027e565b81146102a457600080fd5b50565b6000813590506102b681610290565b92915050565b6000819050919050565b6102cf816102bc565b81146102da57600080fd5b50565b6000813590506102ec816102c6565b92915050565b6000806040838503121561030957610308610279565b5b6000610317858286016102a7565b9250506020610328858286016102dd565b9150509250929050565b6000819050919050565b600061035761035261034d8461021d565b610332565b61021d565b9050919050565b60006103698261033c565b9050919050565b600061037b8261035e565b9050919050565b61038b81610370565b82525050565b60006020820190506103a66000830184610382565b92915050565b60006103b78261035e565b9050919050565b6103c7816103ac565b82525050565b60006020820190506103e260008301846103be565b92915050565b6103f1816102bc565b82525050565b600060a08201905061040c60008301886103be565b610419602083018761024f565b6104266040830186610382565b61043360608301856103be565b61044060808301846103e8565b969550505050505056fe6101006040523480156200001257600080fd5b5060405162001ece38038062001ece833981810160405281019062000038919062000249565b8373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806002819055505050505050620002d1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014c826200011f565b9050919050565b600062000160826200013f565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b620001a3816200013f565b8114620001af57600080fd5b50565b600081519050620001c38162000198565b92915050565b6000620001d6826200013f565b9050919050565b620001e881620001c9565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b6000819050919050565b62000223816200020e565b81146200022f57600080fd5b50565b600081519050620002438162000218565b92915050565b600080600080600060a086880312156200026857620002676200011a565b5b6000620002788882890162000181565b95505060206200028b88828901620001b2565b94505060406200029e88828901620001f7565b9350506060620002b18882890162000181565b9250506080620002c48882890162000232565b9150509295509295909350565b60805160a05160c05160e051611b926200033c6000396000818161081e015281816108c30152610b8d0152600081816105a1015261069b0152600081816102fe0152610bca015260008181610322015281816103a801528181610449015261095e0152611b926000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806385079cd711610097578063cb1c2b5c11610066578063cb1c2b5c1461023f578063e4029e6f1461025d578063f890ab0414610279578063fa52c7d81461029757610100565b806385079cd7146101cb578063a694fc3a146101e9578063ac027f9714610205578063b6b55f251461022357610100565b806335769738116100d357806335769738146101695780633ccfd60b146101875780633f683b6a1461019157806376c1521e146101af57610100565b806306761d3e1461010557806311f25e89146101235780632131c68c1461012d5780633013ce291461014b575b600080fd5b61010d6102c8565b60405161011a9190610f70565b60405180910390f35b61012b6102cd565b005b6101356102fc565b6040516101429190610fcc565b60405180910390f35b610153610320565b6040516101609190611046565b60405180910390f35b610171610344565b60405161017e9190610f70565b60405180910390f35b61018f61034a565b005b610199610490565b6040516101a6919061107c565b60405180910390f35b6101c960048036038101906101c491906110f1565b6104a1565b005b6101d3610699565b6040516101e0919061116e565b60405180910390f35b61020360048036038101906101fe91906111b5565b6106bd565b005b61020d6108c1565b60405161021a9190611046565b60405180910390f35b61023d600480360381019061023891906111b5565b6108e5565b005b6102476109a6565b6040516102549190610f70565b60405180910390f35b610277600480360381019061027291906111e2565b6109b2565b005b6102816109b5565b60405161028e9190611244565b60405180910390f35b6102b160048036038101906102ac919061125f565b6109bb565b6040516102bf92919061128c565b60405180910390f35b603c81565b60016000806101000a81548160ff021916908315150217905550603c426102f491906112e4565b600181905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60008054906101000a900460ff168015610365575060015442115b6103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b9061139b565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103ff9190610fcc565b602060405180830381865afa15801561041c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044091906113d0565b905061048d33827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109ec9092919063ffffffff16565b50565b60008054906101000a900460ff1681565b6002548280600001906104b4919061140c565b6040516020016104c59291906114ae565b604051602081830303815290604052805190602001201461051b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051290611513565b60405180910390fd5b600082806000019061052d919061140c565b84806020019061053d919061140c565b86806040019061054d919061140c565b88806060019061055d919061140c565b604051602001610574989796959493929190611533565b60405160208183030381529060405280519060200120905060038081111561059f5761059e611579565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634344767e836040518263ffffffff1660e01b81526004016105f89190611244565b602060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063991906115cd565b600381111561064b5761064a611579565b5b1461068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290611646565b60405180910390fd5b61069482610a72565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b678ac7230489e80000811015610708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ff906116b2565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff1615151515815250509050818160000181815161078d91906112e4565b9150818152505080602001516107af5760018160200190151590811515815250505b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610879939291906116d2565b6020604051808303816000875af1158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc9190611735565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001544211610929576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610920906117ae565b60405180910390fd5b60008054906101000a900460ff166109565760016000806101000a81548160ff0219169083151502179055505b6109a33330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610c51909392919063ffffffff16565b50565b678ac7230489e8000081565b50565b60025481565b60036020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16905082565b610a6d8363a9059cbb60e01b8484604051602401610a0b9291906117ce565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cda565b505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820160009054906101000a900460ff161515151581525050905060006064808360000151610af99190611826565b610b039190611857565b90508082600001818151610b179190611899565b9150818152505081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083151502179055509050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd307f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401610c08939291906116d2565b6020604051808303816000875af1158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b9190611735565b50505050565b610cd4846323b872dd60e01b858585604051602401610c72939291906116d2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610cda565b50505050565b6000610d3c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610da19092919063ffffffff16565b9050600081511115610d9c5780806020019051810190610d5c9190611735565b610d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d929061193f565b60405180910390fd5b5b505050565b6060610db08484600085610db9565b90509392505050565b606082471015610dfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df5906119d1565b60405180910390fd5b610e0785610ecd565b610e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3d90611a3d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e6f9190611ace565b60006040518083038185875af1925050503d8060008114610eac576040519150601f19603f3d011682016040523d82523d6000602084013e610eb1565b606091505b5091509150610ec1828286610ef0565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610f0057829050610f50565b600083511115610f135782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f479190611b3a565b60405180910390fd5b9392505050565b6000819050919050565b610f6a81610f57565b82525050565b6000602082019050610f856000830184610f61565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fb682610f8b565b9050919050565b610fc681610fab565b82525050565b6000602082019050610fe16000830184610fbd565b92915050565b6000819050919050565b600061100c61100761100284610f8b565b610fe7565b610f8b565b9050919050565b600061101e82610ff1565b9050919050565b600061103082611013565b9050919050565b61104081611025565b82525050565b600060208201905061105b6000830184611037565b92915050565b60008115159050919050565b61107681611061565b82525050565b6000602082019050611091600083018461106d565b92915050565b600080fd5b600080fd5b600080fd5b6000608082840312156110bc576110bb6110a1565b5b81905092915050565b6110ce81610fab565b81146110d957600080fd5b50565b6000813590506110eb816110c5565b92915050565b6000806040838503121561110857611107611097565b5b600083013567ffffffffffffffff8111156111265761112561109c565b5b611132858286016110a6565b9250506020611143858286016110dc565b9150509250929050565b600061115882611013565b9050919050565b6111688161114d565b82525050565b6000602082019050611183600083018461115f565b92915050565b61119281610f57565b811461119d57600080fd5b50565b6000813590506111af81611189565b92915050565b6000602082840312156111cb576111ca611097565b5b60006111d9848285016111a0565b91505092915050565b6000602082840312156111f8576111f7611097565b5b600082013567ffffffffffffffff8111156112165761121561109c565b5b611222848285016110a6565b91505092915050565b6000819050919050565b61123e8161122b565b82525050565b60006020820190506112596000830184611235565b92915050565b60006020828403121561127557611274611097565b5b6000611283848285016110dc565b91505092915050565b60006040820190506112a16000830185610f61565b6112ae602083018461106d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ef82610f57565b91506112fa83610f57565b9250828201905080821115611312576113116112b5565b5b92915050565b600082825260208201905092915050565b7f57697468647261772072657175657374206973206e6f7420637265617465642060008201527f6f72206e6f7420657870697265642064656c6179000000000000000000000000602082015250565b6000611385603483611318565b915061139082611329565b604082019050919050565b600060208201905081810360008301526113b481611378565b9050919050565b6000815190506113ca81611189565b92915050565b6000602082840312156113e6576113e5611097565b5b60006113f4848285016113bb565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611429576114286113fd565b5b80840192508235915067ffffffffffffffff82111561144b5761144a611402565b5b60208301925060018202360383131561146757611466611407565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000611495838561146f565b93506114a283858461147a565b82840190509392505050565b60006114bb828486611489565b91508190509392505050565b7f496e76616c69642073637269707420696e207061727469636c65000000000000600082015250565b60006114fd601a83611318565b9150611508826114c7565b602082019050919050565b6000602082019050818103600083015261152c816114f0565b9050919050565b6000611540828a8c611489565b915061154d82888a611489565b915061155a828688611489565b9150611567828486611489565b91508190509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106115b557600080fd5b50565b6000815190506115c7816115a8565b92915050565b6000602082840312156115e3576115e2611097565b5b60006115f1848285016115b8565b91505092915050565b7f5061727469636c65206973206e6f74206661696c656400000000000000000000600082015250565b6000611630601683611318565b915061163b826115fa565b602082019050919050565b6000602082019050818103600083015261165f81611623565b9050919050565b7f416d6f756e7420697320746f6f20736d616c6c00000000000000000000000000600082015250565b600061169c601383611318565b91506116a782611666565b602082019050919050565b600060208201905081810360008301526116cb8161168f565b9050919050565b60006060820190506116e76000830186610fbd565b6116f46020830185610fbd565b6117016040830184610f61565b949350505050565b61171281611061565b811461171d57600080fd5b50565b60008151905061172f81611709565b92915050565b60006020828403121561174b5761174a611097565b5b600061175984828501611720565b91505092915050565b7f4465706f736974206973206c6f636b6564000000000000000000000000000000600082015250565b6000611798601183611318565b91506117a382611762565b602082019050919050565b600060208201905081810360008301526117c78161178b565b9050919050565b60006040820190506117e36000830185610fbd565b6117f06020830184610f61565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061183182610f57565b915061183c83610f57565b92508261184c5761184b6117f7565b5b828204905092915050565b600061186282610f57565b915061186d83610f57565b925082820261187b81610f57565b91508282048414831517611892576118916112b5565b5b5092915050565b60006118a482610f57565b91506118af83610f57565b92508282039050818111156118c7576118c66112b5565b5b92915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611929602a83611318565b9150611934826118cd565b604082019050919050565b600060208201905081810360008301526119588161191c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006119bb602683611318565b91506119c68261195f565b604082019050919050565b600060208201905081810360008301526119ea816119ae565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a27601d83611318565b9150611a32826119f1565b602082019050919050565b60006020820190508181036000830152611a5681611a1a565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611a91578082015181840152602081019050611a76565b60008484015250505050565b6000611aa882611a5d565b611ab28185611a68565b9350611ac2818560208601611a73565b80840191505092915050565b6000611ada8284611a9d565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611b0c82611ae5565b611b168185611318565b9350611b26818560208601611a73565b611b2f81611af0565b840191505092915050565b60006020820190508181036000830152611b548184611b01565b90509291505056fea2646970667358221220e0c8aec6cdd46349c88d49f72637591df215ba93a9553efa68d23c3fed903d0d64736f6c63430008110033a26469706673582212202d480a9fa55b259bcd84b5582a05b5421a68e1e3a8e07d13e3b5e0cd443a2afb64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}