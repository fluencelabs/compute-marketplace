{
  "address": "0x9621fa6AD3dEC2FeB5AcBf87F8DcE690506a1183",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "buffer",
          "type": "bytes"
        }
      ],
      "name": "bytesToHex",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc854d4cdbb5ccab869682b9b312925d329c85f7d22ce8bba4e0c787e08624f46",
  "receipt": {
    "to": null,
    "from": "0x85fbC7b5087cC7b4Fe3Fe97755D8E01c9Fd727D9",
    "contractAddress": "0x9621fa6AD3dEC2FeB5AcBf87F8DcE690506a1183",
    "transactionIndex": 0,
    "gasUsed": "418453",
    "logsBloom": "0x
    "blockHash": "0xc3ad883e3316306af94c940886313f19f02c188a157860a2d299dd1fc41cd6c1",
    "transactionHash": "0xc854d4cdbb5ccab869682b9b312925d329c85f7d22ce8bba4e0c787e08624f46",
    "logs": [],
    "blockNumber": 104278486,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c5e3b42c77e1294d9559998939c7f5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"buffer\",\"type\":\"bytes\"}],\"name\":\"bytesToHex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bytesToHex(bytes)\":{\"notice\":\"Convert array of bytes to hexadecimal string. https://ethereum.stackexchange.com/a/126928/45323\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auroraSDK/Utils.sol\":\"Utils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/auroraSDK/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v =\\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v =\\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) |\\n            ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v =\\n            ((v & 0x00000000ffffffff00000000ffffffff) << 32) |\\n            ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v =\\n            ((v &\\n                0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) <<\\n                8) |\\n            ((v &\\n                0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >>\\n                8);\\n        v =\\n            ((v &\\n                0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) <<\\n                16) |\\n            ((v &\\n                0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >>\\n                16);\\n        v =\\n            ((v &\\n                0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) <<\\n                32) |\\n            ((v &\\n                0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >>\\n                32);\\n        v =\\n            ((v &\\n                0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) <<\\n                64) |\\n            ((v &\\n                0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >>\\n                64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end := add(\\n                    res,\\n                    and(\\n                        add(length, 63),\\n                        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\\n                    )\\n                )\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length)\\n        internal\\n        view\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0xff8fdd1fc95ec1ab0f94ababeafdeea46fc110367cfed77c43a17c2f4fd03a9c\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x6106a1610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063451d89fa1461003a575b600080fd5b610054600480360381019061004f91906103ca565b61006a565b6040516100619190610492565b60405180910390f35b606060006002835161007c91906104ed565b67ffffffffffffffff8111156100955761009461029f565b5b6040519080825280601f01601f1916602001820160405280156100c75781602001600182028036833780820191505090505b50905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b8451811015610265578182518683815181106101265761012561052f565b5b602001015160f81c60f81b60f81c60ff16610141919061058d565b815181106101525761015161052f565b5b602001015160f81c60f81b8360028361016b91906104ed565b8151811061017c5761017b61052f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508182518683815181106101c1576101c061052f565b5b602001015160f81c60f81b60f81c60ff166101dc91906105be565b815181106101ed576101ec61052f565b5b602001015160f81c60f81b83600160028461020891906104ed565b61021291906105ef565b815181106102235761022261052f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061025d90610623565b915050610107565b508192505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102d78261028e565b810181811067ffffffffffffffff821117156102f6576102f561029f565b5b80604052505050565b6000610309610270565b905061031582826102ce565b919050565b600067ffffffffffffffff8211156103355761033461029f565b5b61033e8261028e565b9050602081019050919050565b82818337600083830152505050565b600061036d6103688461031a565b6102ff565b90508281526020810184848401111561038957610388610289565b5b61039484828561034b565b509392505050565b600082601f8301126103b1576103b0610284565b5b81356103c184826020860161035a565b91505092915050565b6000602082840312156103e0576103df61027a565b5b600082013567ffffffffffffffff8111156103fe576103fd61027f565b5b61040a8482850161039c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561044d578082015181840152602081019050610432565b60008484015250505050565b600061046482610413565b61046e818561041e565b935061047e81856020860161042f565b6104878161028e565b840191505092915050565b600060208201905081810360008301526104ac8184610459565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104f8826104b4565b9150610503836104b4565b9250828202610511816104b4565b91508282048414831517610528576105276104be565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610598826104b4565b91506105a3836104b4565b9250826105b3576105b261055e565b5b828204905092915050565b60006105c9826104b4565b91506105d4836104b4565b9250826105e4576105e361055e565b5b828206905092915050565b60006105fa826104b4565b9150610605836104b4565b925082820190508082111561061d5761061c6104be565b5b92915050565b600061062e826104b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106605761065f6104be565b5b60018201905091905056fea26469706673582212204cf23517e7b6dd3b3b3f786e2eabb135f15ad28294d30debb07ce348ec3904cd64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063451d89fa1461003a575b600080fd5b610054600480360381019061004f91906103ca565b61006a565b6040516100619190610492565b60405180910390f35b606060006002835161007c91906104ed565b67ffffffffffffffff8111156100955761009461029f565b5b6040519080825280601f01601f1916602001820160405280156100c75781602001600182028036833780820191505090505b50905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b8451811015610265578182518683815181106101265761012561052f565b5b602001015160f81c60f81b60f81c60ff16610141919061058d565b815181106101525761015161052f565b5b602001015160f81c60f81b8360028361016b91906104ed565b8151811061017c5761017b61052f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508182518683815181106101c1576101c061052f565b5b602001015160f81c60f81b60f81c60ff166101dc91906105be565b815181106101ed576101ec61052f565b5b602001015160f81c60f81b83600160028461020891906104ed565b61021291906105ef565b815181106102235761022261052f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061025d90610623565b915050610107565b508192505050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102d78261028e565b810181811067ffffffffffffffff821117156102f6576102f561029f565b5b80604052505050565b6000610309610270565b905061031582826102ce565b919050565b600067ffffffffffffffff8211156103355761033461029f565b5b61033e8261028e565b9050602081019050919050565b82818337600083830152505050565b600061036d6103688461031a565b6102ff565b90508281526020810184848401111561038957610388610289565b5b61039484828561034b565b509392505050565b600082601f8301126103b1576103b0610284565b5b81356103c184826020860161035a565b91505092915050565b6000602082840312156103e0576103df61027a565b5b600082013567ffffffffffffffff8111156103fe576103fd61027f565b5b61040a8482850161039c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561044d578082015181840152602081019050610432565b60008484015250505050565b600061046482610413565b61046e818561041e565b935061047e81856020860161042f565b6104878161028e565b840191505092915050565b600060208201905081810360008301526104ac8184610459565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104f8826104b4565b9150610503836104b4565b9250828202610511816104b4565b91508282048414831517610528576105276104be565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610598826104b4565b91506105a3836104b4565b9250826105b3576105b261055e565b5b828204905092915050565b60006105c9826104b4565b91506105d4836104b4565b9250826105e4576105e361055e565b5b828206905092915050565b60006105fa826104b4565b9150610605836104b4565b925082820190508082111561061d5761061c6104be565b5b92915050565b600061062e826104b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106605761065f6104be565b5b60018201905091905056fea26469706673582212204cf23517e7b6dd3b3b3f786e2eabb135f15ad28294d30debb07ce348ec3904cd64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bytesToHex(bytes)": {
        "notice": "Convert array of bytes to hexadecimal string. https://ethereum.stackexchange.com/a/126928/45323"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}