{
  "address": "0xF49dEC54E8Fed9D7207E590a592f6367212B7d0C",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ptr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct Borsh.Data",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "decodePromiseResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum PromiseResultStatus",
              "name": "status",
              "type": "PromiseResultStatus"
            },
            {
              "internalType": "bytes",
              "name": "output",
              "type": "bytes"
            }
          ],
          "internalType": "struct PromiseResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ExecutionMode",
          "name": "mode",
          "type": "ExecutionMode"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PromiseArgsVariant",
          "name": "mode",
          "type": "PromiseArgsVariant"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetAccountId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "uint128",
              "name": "nearBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "nearGas",
              "type": "uint64"
            }
          ],
          "internalType": "struct PromiseCreateArgs",
          "name": "nearPromise",
          "type": "tuple"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "base",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "callback",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromiseWithCallback",
          "name": "nearPromise",
          "type": "tuple"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "base",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "targetAccountId",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "method",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "args",
                  "type": "bytes"
                },
                {
                  "internalType": "uint128",
                  "name": "nearBalance",
                  "type": "uint128"
                },
                {
                  "internalType": "uint64",
                  "name": "nearGas",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PromiseCreateArgs",
              "name": "callback",
              "type": "tuple"
            }
          ],
          "internalType": "struct PromiseWithCallback",
          "name": "nearPromise",
          "type": "tuple"
        },
        {
          "internalType": "enum ExecutionMode",
          "name": "mode",
          "type": "ExecutionMode"
        }
      ],
      "name": "encodeCrossContractCallArgs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "targetAccountId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            },
            {
              "internalType": "uint128",
              "name": "nearBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "nearGas",
              "type": "uint64"
            }
          ],
          "internalType": "struct PromiseCreateArgs",
          "name": "nearPromise",
          "type": "tuple"
        },
        {
          "internalType": "enum ExecutionMode",
          "name": "mode",
          "type": "ExecutionMode"
        }
      ],
      "name": "encodeCrossContractCallArgs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "v",
          "type": "uint128"
        }
      ],
      "name": "encodeU128",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "v",
          "type": "uint32"
        }
      ],
      "name": "encodeU32",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "v",
          "type": "uint64"
        }
      ],
      "name": "encodeU64",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ptr",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            }
          ],
          "internalType": "struct Borsh.Data",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "skipPromiseResult",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x371646ab14d9c7b20b6dc05cbecef5931e9f110f443a811272b14d694873073f",
  "receipt": {
    "to": null,
    "from": "0x85fbC7b5087cC7b4Fe3Fe97755D8E01c9Fd727D9",
    "contractAddress": "0xF49dEC54E8Fed9D7207E590a592f6367212B7d0C",
    "transactionIndex": 0,
    "gasUsed": "1315886",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa72bc126fbd67f268ed4ae82b9c06b53044fc1f366dc4599c7d2c818c8c8555d",
    "transactionHash": "0x371646ab14d9c7b20b6dc05cbecef5931e9f110f443a811272b14d694873073f",
    "logs": [],
    "blockNumber": 104686135,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "31f47c90d96eaecf182eb738695ec8b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct Borsh.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"decodePromiseResult\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PromiseResultStatus\",\"name\":\"status\",\"type\":\"PromiseResultStatus\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"}],\"internalType\":\"struct PromiseResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ExecutionMode\",\"name\":\"mode\",\"type\":\"ExecutionMode\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PromiseArgsVariant\",\"name\":\"mode\",\"type\":\"PromiseArgsVariant\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"nearPromise\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"base\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"callback\",\"type\":\"tuple\"}],\"internalType\":\"struct PromiseWithCallback\",\"name\":\"nearPromise\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"base\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"callback\",\"type\":\"tuple\"}],\"internalType\":\"struct PromiseWithCallback\",\"name\":\"nearPromise\",\"type\":\"tuple\"},{\"internalType\":\"enum ExecutionMode\",\"name\":\"mode\",\"type\":\"ExecutionMode\"}],\"name\":\"encodeCrossContractCallArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"targetAccountId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"nearBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"nearGas\",\"type\":\"uint64\"}],\"internalType\":\"struct PromiseCreateArgs\",\"name\":\"nearPromise\",\"type\":\"tuple\"},{\"internalType\":\"enum ExecutionMode\",\"name\":\"mode\",\"type\":\"ExecutionMode\"}],\"name\":\"encodeCrossContractCallArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"v\",\"type\":\"uint128\"}],\"name\":\"encodeU128\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"v\",\"type\":\"uint32\"}],\"name\":\"encodeU32\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"v\",\"type\":\"uint64\"}],\"name\":\"encodeU64\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"internalType\":\"struct Borsh.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"skipPromiseResult\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decodePromiseResult(Borsh.Data)\":{\"notice\":\"Decode promise result using borsh.\"},\"encode(ExecutionMode)\":{\"notice\":\"Encode Execution mode enum into borsh.\"},\"encode(PromiseArgsVariant)\":{\"notice\":\"Encode PromiseArgsVariant enum into borsh.\"},\"encode(PromiseCreateArgs)\":{\"notice\":\"Encode base promise into borsh.\"},\"encode(PromiseWithCallback)\":{\"notice\":\"Encode promise with callback into borsh.\"},\"encode(bytes)\":{\"notice\":\"Encode bytes into borsh. Use this method to encode strings as well.\"},\"encodeCrossContractCallArgs(PromiseCreateArgs,ExecutionMode)\":{\"notice\":\"Encode create promise using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects.\"},\"encodeCrossContractCallArgs(PromiseWithCallback,ExecutionMode)\":{\"notice\":\"Encode promise with callback using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects.\"},\"skipPromiseResult(Borsh.Data)\":{\"notice\":\"Skip promise result from the buffer.\"}},\"notice\":\"Provide borsh serialization and deserialization for multiple types.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/auroraSDK/Codec.sol\":\"Codec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/auroraSDK/Borsh.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Utils.sol\\\";\\n\\nlibrary Borsh {\\n    using Borsh for Data;\\n\\n    struct Data {\\n        uint256 ptr;\\n        uint256 end;\\n    }\\n\\n    function from(bytes memory data) internal pure returns (Data memory res) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := data\\n        }\\n        unchecked {\\n            res.ptr = ptr + 32;\\n            res.end = res.ptr + Utils.readMemory(ptr);\\n        }\\n    }\\n\\n    // This function assumes that length is reasonably small, so that data.ptr + length will not overflow. In the current code, length is always less than 2^32.\\n    function requireSpace(Data memory data, uint256 length) internal pure {\\n        unchecked {\\n            require(\\n                data.ptr + length <= data.end,\\n                \\\"Parse error: unexpected EOI\\\"\\n            );\\n        }\\n    }\\n\\n    function read(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        data.requireSpace(length);\\n        res = bytes32(Utils.readMemory(data.ptr));\\n        unchecked {\\n            data.ptr += length;\\n        }\\n        return res;\\n    }\\n\\n    function done(Data memory data) internal pure {\\n        require(data.ptr == data.end, \\\"Parse error: EOI expected\\\");\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekKeccak256(Data memory data, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.keccak256Raw(data.ptr, length);\\n    }\\n\\n    // Same considerations as for requireSpace.\\n    function peekSha256(Data memory data, uint256 length)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        data.requireSpace(length);\\n        return Utils.sha256Raw(data.ptr, length);\\n    }\\n\\n    function decodeU8(Data memory data) internal pure returns (uint8) {\\n        return uint8(bytes1(data.read(1)));\\n    }\\n\\n    function decodeU16(Data memory data) internal pure returns (uint16) {\\n        return Utils.swapBytes2(uint16(bytes2(data.read(2))));\\n    }\\n\\n    function decodeU32(Data memory data) internal pure returns (uint32) {\\n        return Utils.swapBytes4(uint32(bytes4(data.read(4))));\\n    }\\n\\n    function decodeU64(Data memory data) internal pure returns (uint64) {\\n        return Utils.swapBytes8(uint64(bytes8(data.read(8))));\\n    }\\n\\n    function decodeU128(Data memory data) internal pure returns (uint128) {\\n        return Utils.swapBytes16(uint128(bytes16(data.read(16))));\\n    }\\n\\n    function decodeU256(Data memory data) internal pure returns (uint256) {\\n        return Utils.swapBytes32(uint256(data.read(32)));\\n    }\\n\\n    function decodeBytes20(Data memory data) internal pure returns (bytes20) {\\n        return bytes20(data.read(20));\\n    }\\n\\n    function decodeBytes32(Data memory data) internal pure returns (bytes32) {\\n        return data.read(32);\\n    }\\n\\n    function decodeBool(Data memory data) internal pure returns (bool) {\\n        uint8 res = data.decodeU8();\\n        require(res <= 1, \\\"Parse error: invalid bool\\\");\\n        return res != 0;\\n    }\\n\\n    function skipBytes(Data memory data) internal pure {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n\\n    function decodeBytes(Data memory data)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        uint256 length = data.decodeU32();\\n        data.requireSpace(length);\\n        res = Utils.memoryToBytes(data.ptr, length);\\n        unchecked {\\n            data.ptr += length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a3704c81feec760578cfbfb2ec7038d9dbffda15d3f5706946fecbcd13e869d\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Codec.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Borsh.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// Provide borsh serialization and deserialization for multiple types.\\nlibrary Codec {\\n    using Borsh for Borsh.Data;\\n\\n    function encodeU8(uint8 v) internal pure returns (bytes1) {\\n        return bytes1(v);\\n    }\\n\\n    function encodeU16(uint16 v) internal pure returns (bytes2) {\\n        return bytes2(Utils.swapBytes2(v));\\n    }\\n\\n    function encodeU32(uint32 v) public pure returns (bytes4) {\\n        return bytes4(Utils.swapBytes4(v));\\n    }\\n\\n    function encodeU64(uint64 v) public pure returns (bytes8) {\\n        return bytes8(Utils.swapBytes8(v));\\n    }\\n\\n    function encodeU128(uint128 v) public pure returns (bytes16) {\\n        return bytes16(Utils.swapBytes16(v));\\n    }\\n\\n    /// Encode bytes into borsh. Use this method to encode strings as well.\\n    function encode(bytes memory value) public pure returns (bytes memory) {\\n        return abi.encodePacked(encodeU32(uint32(value.length)), bytes(value));\\n    }\\n\\n    /// Encode Execution mode enum into borsh.\\n    function encode(ExecutionMode mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode PromiseArgsVariant enum into borsh.\\n    function encode(PromiseArgsVariant mode) public pure returns (bytes1) {\\n        return bytes1(uint8(mode));\\n    }\\n\\n    /// Encode base promise into borsh.\\n    function encode(PromiseCreateArgs memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(bytes(nearPromise.targetAccountId)),\\n                encode(bytes(nearPromise.method)),\\n                encode(nearPromise.args),\\n                encodeU128(nearPromise.nearBalance),\\n                encodeU64(nearPromise.nearGas)\\n            );\\n    }\\n\\n    /// Encode promise with callback into borsh.\\n    function encode(PromiseWithCallback memory nearPromise)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                encode(nearPromise.base),\\n                encode(nearPromise.callback)\\n            );\\n    }\\n\\n    /// Encode create promise using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseCreateArgs memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Create),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Encode promise with callback using borsh. The encoded data\\n    /// uses the same format that the Cross Contract Call precompile expects.\\n    function encodeCrossContractCallArgs(\\n        PromiseWithCallback memory nearPromise,\\n        ExecutionMode mode\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                encode(mode),\\n                encode(PromiseArgsVariant.Callback),\\n                encode(nearPromise)\\n            );\\n    }\\n\\n    /// Decode promise result using borsh.\\n    function decodePromiseResult(Borsh.Data memory data)\\n        public\\n        pure\\n        returns (PromiseResult memory result)\\n    {\\n        result.status = PromiseResultStatus(data.decodeU8());\\n        if (result.status == PromiseResultStatus.Successful) {\\n            result.output = data.decodeBytes();\\n        }\\n    }\\n\\n    /// Skip promise result from the buffer.\\n    function skipPromiseResult(Borsh.Data memory data) public pure {\\n        PromiseResultStatus status = PromiseResultStatus(\\n            uint8(data.decodeU8())\\n        );\\n        if (status == PromiseResultStatus.Successful) {\\n            data.skipBytes();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa218811f1575083887938428d0d1b4001b26609ae4f98e248e9c66dfd34fcbfe\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant {\\n    /// Basic NEAR promise\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode {\\n    /// Eager mode means that the promise WILL be executed in a single\\n    /// NEAR transaction.\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus {\\n    /// This status should not be reachable.\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0xfd72f1cab846359ba751ccf4a0ed670aef5016f3239e60547ae88bee459d8437\",\"license\":\"CC-BY-1.0\"},\"contracts/auroraSDK/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector\\npragma solidity ^0.8.17;\\n\\nlibrary Utils {\\n    function swapBytes2(uint16 v) internal pure returns (uint16) {\\n        return (v << 8) | (v >> 8);\\n    }\\n\\n    function swapBytes4(uint32 v) internal pure returns (uint32) {\\n        v = ((v & 0x00ff00ff) << 8) | ((v & 0xff00ff00) >> 8);\\n        return (v << 16) | (v >> 16);\\n    }\\n\\n    function swapBytes8(uint64 v) internal pure returns (uint64) {\\n        v = ((v & 0x00ff00ff00ff00ff) << 8) | ((v & 0xff00ff00ff00ff00) >> 8);\\n        v = ((v & 0x0000ffff0000ffff) << 16) | ((v & 0xffff0000ffff0000) >> 16);\\n        return (v << 32) | (v >> 32);\\n    }\\n\\n    function swapBytes16(uint128 v) internal pure returns (uint128) {\\n        v =\\n            ((v & 0x00ff00ff00ff00ff00ff00ff00ff00ff) << 8) |\\n            ((v & 0xff00ff00ff00ff00ff00ff00ff00ff00) >> 8);\\n        v =\\n            ((v & 0x0000ffff0000ffff0000ffff0000ffff) << 16) |\\n            ((v & 0xffff0000ffff0000ffff0000ffff0000) >> 16);\\n        v =\\n            ((v & 0x00000000ffffffff00000000ffffffff) << 32) |\\n            ((v & 0xffffffff00000000ffffffff00000000) >> 32);\\n        return (v << 64) | (v >> 64);\\n    }\\n\\n    function swapBytes32(uint256 v) internal pure returns (uint256) {\\n        v =\\n            ((v &\\n                0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff) <<\\n                8) |\\n            ((v &\\n                0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00) >>\\n                8);\\n        v =\\n            ((v &\\n                0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff) <<\\n                16) |\\n            ((v &\\n                0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000) >>\\n                16);\\n        v =\\n            ((v &\\n                0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff) <<\\n                32) |\\n            ((v &\\n                0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000) >>\\n                32);\\n        v =\\n            ((v &\\n                0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff) <<\\n                64) |\\n            ((v &\\n                0xffffffffffffffff0000000000000000ffffffffffffffff0000000000000000) >>\\n                64);\\n        return (v << 128) | (v >> 128);\\n    }\\n\\n    function readMemory(uint256 ptr) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(ptr)\\n        }\\n    }\\n\\n    function writeMemory(uint256 ptr, uint256 value) internal pure {\\n        assembly {\\n            mstore(ptr, value)\\n        }\\n    }\\n\\n    function memoryToBytes(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        if (length != 0) {\\n            assembly {\\n                // 0x40 is the address of free memory pointer.\\n                res := mload(0x40)\\n                let end := add(\\n                    res,\\n                    and(\\n                        add(length, 63),\\n                        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\\n                    )\\n                )\\n                // end = res + 32 + 32 * ceil(length / 32).\\n                mstore(0x40, end)\\n                mstore(res, length)\\n                let destPtr := add(res, 32)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    mstore(destPtr, mload(ptr))\\n                    destPtr := add(destPtr, 32)\\n                    if eq(destPtr, end) { break }\\n                    ptr := add(ptr, 32)\\n                }\\n            }\\n        }\\n    }\\n\\n    function keccak256Raw(uint256 ptr, uint256 length)\\n        internal\\n        pure\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            res := keccak256(ptr, length)\\n        }\\n    }\\n\\n    function sha256Raw(uint256 ptr, uint256 length)\\n        internal\\n        view\\n        returns (bytes32 res)\\n    {\\n        assembly {\\n            // 2 is the address of SHA256 precompiled contract.\\n            // First 64 bytes of memory can be used as scratch space.\\n            let ret := staticcall(gas(), 2, ptr, length, 0, 32)\\n            // If the call to SHA256 precompile ran out of gas, burn any gas that remains.\\n            // prettier-ignore\\n            for {} iszero(ret) {} {}\\n            res := mload(0)\\n        }\\n    }\\n\\n    /// Convert array of bytes to hexadecimal string.\\n    /// https://ethereum.stackexchange.com/a/126928/45323\\n    function bytesToHex(bytes memory buffer)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(converted);\\n    }\\n}\\n\",\"keccak256\":\"0xff8fdd1fc95ec1ab0f94ababeafdeea46fc110367cfed77c43a17c2f4fd03a9c\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x6116e4610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80635e2eab261161007b5780635e2eab26146101e35780637c8b7bce146102135780637d7436f5146102435780637f08bf971461025f578063b1038e711461028f578063c733ea97146102bf576100be565b806308c0b37c146100c35780630a245d1b146100f35780630acbdd891461012357806312496a1b146101535780631f42468a14610183578063231be077146101b3575b600080fd5b6100dd60048036038101906100d89190610a2e565b6102ef565b6040516100ea9190610a96565b60405180910390f35b61010d60048036038101906101089190610ad6565b610304565b60405161011a9190610b3e565b60405180910390f35b61013d60048036038101906101389190610b7e565b610323565b60405161014a9190610b3e565b60405180910390f35b61016d60048036038101906101689190610cf1565b610342565b60405161017a9190610db9565b60405180910390f35b61019d60048036038101906101989190611076565b610376565b6040516101aa9190610db9565b60405180910390f35b6101cd60048036038101906101c891906110d2565b6103bd565b6040516101da9190610db9565b60405180910390f35b6101fd60048036038101906101f891906111a1565b61042a565b60405161020a91906112cc565b60405180910390f35b61022d600480360381019061022891906112ee565b6104c6565b60405161023a9190610db9565b60405180910390f35b61025d600480360381019061025891906111a1565b610509565b005b61027960048036038101906102749190611337565b610565565b604051610286919061139f565b60405180910390f35b6102a960048036038101906102a491906113ba565b61057a565b6040516102b69190610db9565b60405180910390f35b6102d960048036038101906102d49190611416565b6105c1565b6040516102e6919061147e565b60405180910390f35b60006102fa826105d6565b60e01b9050919050565b6000816001811115610319576103186111ce565b5b60f81b9050919050565b6000816002811115610338576103376111ce565b5b60f81b9050919050565b606061034e82516102ef565b826040516020016103609291906114f6565b6040516020818303038152906040529050919050565b606061038182610304565b61038b6001610323565b610394856104c6565b6040516020016103a69392919061153f565b604051602081830303815290604052905092915050565b60606103cc8260000151610342565b6103d98360200151610342565b6103e68460400151610342565b6103f385606001516105c1565b6104008660800151610565565b6040516020016104149594939291906115ba565b6040516020818303038152906040529050919050565b6104326109b2565b61043b8261061a565b60ff1660028111156104505761044f6111ce565b5b81600001906002811115610467576104666111ce565b5b9081600281111561047b5761047a6111ce565b5b8152505060016002811115610493576104926111ce565b5b816000015160028111156104aa576104a96111ce565b5b036104c1576104b88261063a565b81602001819052505b919050565b60606104d582600001516103bd565b6104e283602001516103bd565b6040516020016104f392919061160d565b6040516020818303038152906040529050919050565b60006105148261061a565b60ff166002811115610529576105286111ce565b5b90506001600281111561053f5761053e6111ce565b5b816002811115610552576105516111ce565b5b036105615761056082610688565b5b5050565b6000610570826106c2565b60c01b9050919050565b606061058582610304565b61058f6000610323565b610598856103bd565b6040516020016105aa9392919061153f565b604051602081830303815290604052905092915050565b60006105cc82610751565b60801b9050919050565b6000600863ff00ff00831663ffffffff16901c600862ff00ff841663ffffffff16901b17915060108263ffffffff16901c60108363ffffffff16901b179050919050565b600061063060018361088190919063ffffffff16565b60f81c9050919050565b60606000610647836108be565b63ffffffff16905061066281846108e690919063ffffffff16565b610670836000015182610937565b91508083600001818151019150818152505050919050565b6000610693826108be565b63ffffffff1690506106ae81836108e690919063ffffffff16565b808260000181815101915081815250505050565b6000600867ff00ff00ff00ff00831667ffffffffffffffff16901c600866ff00ff00ff00ff841667ffffffffffffffff16901b179150601067ffff0000ffff0000831667ffffffffffffffff16901c601065ffff0000ffff841667ffffffffffffffff16901b17915060208267ffffffffffffffff16901c60208367ffffffffffffffff16901b179050919050565b600060086fff00ff00ff00ff00ff00ff00ff00ff0083166fffffffffffffffffffffffffffffffff16901c60086eff00ff00ff00ff00ff00ff00ff00ff84166fffffffffffffffffffffffffffffffff16901b17915060106fffff0000ffff0000ffff0000ffff000083166fffffffffffffffffffffffffffffffff16901c60106dffff0000ffff0000ffff0000ffff84166fffffffffffffffffffffffffffffffff16901b17915060206fffffffff00000000ffffffff0000000083166fffffffffffffffffffffffffffffffff16901c60206bffffffff00000000ffffffff84166fffffffffffffffffffffffffffffffff16901b1791506040826fffffffffffffffffffffffffffffffff16901c6040836fffffffffffffffffffffffffffffffff16901b179050919050565b600061089682846108e690919063ffffffff16565b6108a383600001516109a7565b60001b90508183600001818151019150818152505092915050565b60006108df6108d760048461088190919063ffffffff16565b60e01c6105d6565b9050919050565b8160200151818360000151011115610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a9061168e565b60405180910390fd5b5050565b6060600082146109a15760405190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810180604052828252602082015b60011561099e57845181526020810190508181031561099e5760208501945061097a565b50505b92915050565b600081519050919050565b6040518060400160405280600060028111156109d1576109d06111ce565b5b8152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b610a0b816109f2565b8114610a1657600080fd5b50565b600081359050610a2881610a02565b92915050565b600060208284031215610a4457610a436109e8565b5b6000610a5284828501610a19565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610a9081610a5b565b82525050565b6000602082019050610aab6000830184610a87565b92915050565b60028110610abe57600080fd5b50565b600081359050610ad081610ab1565b92915050565b600060208284031215610aec57610aeb6109e8565b5b6000610afa84828501610ac1565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b610b3881610b03565b82525050565b6000602082019050610b536000830184610b2f565b92915050565b60038110610b6657600080fd5b50565b600081359050610b7881610b59565b92915050565b600060208284031215610b9457610b936109e8565b5b6000610ba284828501610b69565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bfe82610bb5565b810181811067ffffffffffffffff82111715610c1d57610c1c610bc6565b5b80604052505050565b6000610c306109de565b9050610c3c8282610bf5565b919050565b600067ffffffffffffffff821115610c5c57610c5b610bc6565b5b610c6582610bb5565b9050602081019050919050565b82818337600083830152505050565b6000610c94610c8f84610c41565b610c26565b905082815260208101848484011115610cb057610caf610bb0565b5b610cbb848285610c72565b509392505050565b600082601f830112610cd857610cd7610bab565b5b8135610ce8848260208601610c81565b91505092915050565b600060208284031215610d0757610d066109e8565b5b600082013567ffffffffffffffff811115610d2557610d246109ed565b5b610d3184828501610cc3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d74578082015181840152602081019050610d59565b60008484015250505050565b6000610d8b82610d3a565b610d958185610d45565b9350610da5818560208601610d56565b610dae81610bb5565b840191505092915050565b60006020820190508181036000830152610dd38184610d80565b905092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115610e0057610dff610bc6565b5b610e0982610bb5565b9050602081019050919050565b6000610e29610e2484610de5565b610c26565b905082815260208101848484011115610e4557610e44610bb0565b5b610e50848285610c72565b509392505050565b600082601f830112610e6d57610e6c610bab565b5b8135610e7d848260208601610e16565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610eab81610e86565b8114610eb657600080fd5b50565b600081359050610ec881610ea2565b92915050565b600067ffffffffffffffff82169050919050565b610eeb81610ece565b8114610ef657600080fd5b50565b600081359050610f0881610ee2565b92915050565b600060a08284031215610f2457610f23610ddb565b5b610f2e60a0610c26565b9050600082013567ffffffffffffffff811115610f4e57610f4d610de0565b5b610f5a84828501610e58565b600083015250602082013567ffffffffffffffff811115610f7e57610f7d610de0565b5b610f8a84828501610e58565b602083015250604082013567ffffffffffffffff811115610fae57610fad610de0565b5b610fba84828501610cc3565b6040830152506060610fce84828501610eb9565b6060830152506080610fe284828501610ef9565b60808301525092915050565b60006040828403121561100457611003610ddb565b5b61100e6040610c26565b9050600082013567ffffffffffffffff81111561102e5761102d610de0565b5b61103a84828501610f0e565b600083015250602082013567ffffffffffffffff81111561105e5761105d610de0565b5b61106a84828501610f0e565b60208301525092915050565b6000806040838503121561108d5761108c6109e8565b5b600083013567ffffffffffffffff8111156110ab576110aa6109ed565b5b6110b785828601610fee565b92505060206110c885828601610ac1565b9150509250929050565b6000602082840312156110e8576110e76109e8565b5b600082013567ffffffffffffffff811115611106576111056109ed565b5b61111284828501610f0e565b91505092915050565b6000819050919050565b61112e8161111b565b811461113957600080fd5b50565b60008135905061114b81611125565b92915050565b60006040828403121561116757611166610ddb565b5b6111716040610c26565b905060006111818482850161113c565b60008301525060206111958482850161113c565b60208301525092915050565b6000604082840312156111b7576111b66109e8565b5b60006111c584828501611151565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061120e5761120d6111ce565b5b50565b600081905061121f826111fd565b919050565b600061122f82611211565b9050919050565b61123f81611224565b82525050565b600082825260208201905092915050565b600061126182610d3a565b61126b8185611245565b935061127b818560208601610d56565b61128481610bb5565b840191505092915050565b60006040830160008301516112a76000860182611236565b50602083015184820360208601526112bf8282611256565b9150508091505092915050565b600060208201905081810360008301526112e6818461128f565b905092915050565b600060208284031215611304576113036109e8565b5b600082013567ffffffffffffffff811115611322576113216109ed565b5b61132e84828501610fee565b91505092915050565b60006020828403121561134d5761134c6109e8565b5b600061135b84828501610ef9565b91505092915050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b61139981611364565b82525050565b60006020820190506113b46000830184611390565b92915050565b600080604083850312156113d1576113d06109e8565b5b600083013567ffffffffffffffff8111156113ef576113ee6109ed565b5b6113fb85828601610f0e565b925050602061140c85828601610ac1565b9150509250929050565b60006020828403121561142c5761142b6109e8565b5b600061143a84828501610eb9565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b61147881611443565b82525050565b6000602082019050611493600083018461146f565b92915050565b6000819050919050565b6114b46114af82610a5b565b611499565b82525050565b600081905092915050565b60006114d082610d3a565b6114da81856114ba565b93506114ea818560208601610d56565b80840191505092915050565b600061150282856114a3565b60048201915061151282846114c5565b91508190509392505050565b6000819050919050565b61153961153482610b03565b61151e565b82525050565b600061154b8286611528565b60018201915061155b8285611528565b60018201915061156b82846114c5565b9150819050949350505050565b6000819050919050565b61159361158e82611443565b611578565b82525050565b6000819050919050565b6115b46115af82611364565b611599565b82525050565b60006115c682886114c5565b91506115d282876114c5565b91506115de82866114c5565b91506115ea8285611582565b6010820191506115fa82846115a3565b6008820191508190509695505050505050565b600061161982856114c5565b915061162582846114c5565b91508190509392505050565b600082825260208201905092915050565b7f5061727365206572726f723a20756e657870656374656420454f490000000000600082015250565b6000611678601b83611631565b915061168382611642565b602082019050919050565b600060208201905081810360008301526116a78161166b565b905091905056fea26469706673582212207e819350b1bd0443b022f757cac39d675403ab1c1463ff1c178becc58741606d64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100be5760003560e01c80635e2eab261161007b5780635e2eab26146101e35780637c8b7bce146102135780637d7436f5146102435780637f08bf971461025f578063b1038e711461028f578063c733ea97146102bf576100be565b806308c0b37c146100c35780630a245d1b146100f35780630acbdd891461012357806312496a1b146101535780631f42468a14610183578063231be077146101b3575b600080fd5b6100dd60048036038101906100d89190610a2e565b6102ef565b6040516100ea9190610a96565b60405180910390f35b61010d60048036038101906101089190610ad6565b610304565b60405161011a9190610b3e565b60405180910390f35b61013d60048036038101906101389190610b7e565b610323565b60405161014a9190610b3e565b60405180910390f35b61016d60048036038101906101689190610cf1565b610342565b60405161017a9190610db9565b60405180910390f35b61019d60048036038101906101989190611076565b610376565b6040516101aa9190610db9565b60405180910390f35b6101cd60048036038101906101c891906110d2565b6103bd565b6040516101da9190610db9565b60405180910390f35b6101fd60048036038101906101f891906111a1565b61042a565b60405161020a91906112cc565b60405180910390f35b61022d600480360381019061022891906112ee565b6104c6565b60405161023a9190610db9565b60405180910390f35b61025d600480360381019061025891906111a1565b610509565b005b61027960048036038101906102749190611337565b610565565b604051610286919061139f565b60405180910390f35b6102a960048036038101906102a491906113ba565b61057a565b6040516102b69190610db9565b60405180910390f35b6102d960048036038101906102d49190611416565b6105c1565b6040516102e6919061147e565b60405180910390f35b60006102fa826105d6565b60e01b9050919050565b6000816001811115610319576103186111ce565b5b60f81b9050919050565b6000816002811115610338576103376111ce565b5b60f81b9050919050565b606061034e82516102ef565b826040516020016103609291906114f6565b6040516020818303038152906040529050919050565b606061038182610304565b61038b6001610323565b610394856104c6565b6040516020016103a69392919061153f565b604051602081830303815290604052905092915050565b60606103cc8260000151610342565b6103d98360200151610342565b6103e68460400151610342565b6103f385606001516105c1565b6104008660800151610565565b6040516020016104149594939291906115ba565b6040516020818303038152906040529050919050565b6104326109b2565b61043b8261061a565b60ff1660028111156104505761044f6111ce565b5b81600001906002811115610467576104666111ce565b5b9081600281111561047b5761047a6111ce565b5b8152505060016002811115610493576104926111ce565b5b816000015160028111156104aa576104a96111ce565b5b036104c1576104b88261063a565b81602001819052505b919050565b60606104d582600001516103bd565b6104e283602001516103bd565b6040516020016104f392919061160d565b6040516020818303038152906040529050919050565b60006105148261061a565b60ff166002811115610529576105286111ce565b5b90506001600281111561053f5761053e6111ce565b5b816002811115610552576105516111ce565b5b036105615761056082610688565b5b5050565b6000610570826106c2565b60c01b9050919050565b606061058582610304565b61058f6000610323565b610598856103bd565b6040516020016105aa9392919061153f565b604051602081830303815290604052905092915050565b60006105cc82610751565b60801b9050919050565b6000600863ff00ff00831663ffffffff16901c600862ff00ff841663ffffffff16901b17915060108263ffffffff16901c60108363ffffffff16901b179050919050565b600061063060018361088190919063ffffffff16565b60f81c9050919050565b60606000610647836108be565b63ffffffff16905061066281846108e690919063ffffffff16565b610670836000015182610937565b91508083600001818151019150818152505050919050565b6000610693826108be565b63ffffffff1690506106ae81836108e690919063ffffffff16565b808260000181815101915081815250505050565b6000600867ff00ff00ff00ff00831667ffffffffffffffff16901c600866ff00ff00ff00ff841667ffffffffffffffff16901b179150601067ffff0000ffff0000831667ffffffffffffffff16901c601065ffff0000ffff841667ffffffffffffffff16901b17915060208267ffffffffffffffff16901c60208367ffffffffffffffff16901b179050919050565b600060086fff00ff00ff00ff00ff00ff00ff00ff0083166fffffffffffffffffffffffffffffffff16901c60086eff00ff00ff00ff00ff00ff00ff00ff84166fffffffffffffffffffffffffffffffff16901b17915060106fffff0000ffff0000ffff0000ffff000083166fffffffffffffffffffffffffffffffff16901c60106dffff0000ffff0000ffff0000ffff84166fffffffffffffffffffffffffffffffff16901b17915060206fffffffff00000000ffffffff0000000083166fffffffffffffffffffffffffffffffff16901c60206bffffffff00000000ffffffff84166fffffffffffffffffffffffffffffffff16901b1791506040826fffffffffffffffffffffffffffffffff16901c6040836fffffffffffffffffffffffffffffffff16901b179050919050565b600061089682846108e690919063ffffffff16565b6108a383600001516109a7565b60001b90508183600001818151019150818152505092915050565b60006108df6108d760048461088190919063ffffffff16565b60e01c6105d6565b9050919050565b8160200151818360000151011115610933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092a9061168e565b60405180910390fd5b5050565b6060600082146109a15760405190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810180604052828252602082015b60011561099e57845181526020810190508181031561099e5760208501945061097a565b50505b92915050565b600081519050919050565b6040518060400160405280600060028111156109d1576109d06111ce565b5b8152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b610a0b816109f2565b8114610a1657600080fd5b50565b600081359050610a2881610a02565b92915050565b600060208284031215610a4457610a436109e8565b5b6000610a5284828501610a19565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610a9081610a5b565b82525050565b6000602082019050610aab6000830184610a87565b92915050565b60028110610abe57600080fd5b50565b600081359050610ad081610ab1565b92915050565b600060208284031215610aec57610aeb6109e8565b5b6000610afa84828501610ac1565b91505092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b610b3881610b03565b82525050565b6000602082019050610b536000830184610b2f565b92915050565b60038110610b6657600080fd5b50565b600081359050610b7881610b59565b92915050565b600060208284031215610b9457610b936109e8565b5b6000610ba284828501610b69565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bfe82610bb5565b810181811067ffffffffffffffff82111715610c1d57610c1c610bc6565b5b80604052505050565b6000610c306109de565b9050610c3c8282610bf5565b919050565b600067ffffffffffffffff821115610c5c57610c5b610bc6565b5b610c6582610bb5565b9050602081019050919050565b82818337600083830152505050565b6000610c94610c8f84610c41565b610c26565b905082815260208101848484011115610cb057610caf610bb0565b5b610cbb848285610c72565b509392505050565b600082601f830112610cd857610cd7610bab565b5b8135610ce8848260208601610c81565b91505092915050565b600060208284031215610d0757610d066109e8565b5b600082013567ffffffffffffffff811115610d2557610d246109ed565b5b610d3184828501610cc3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d74578082015181840152602081019050610d59565b60008484015250505050565b6000610d8b82610d3a565b610d958185610d45565b9350610da5818560208601610d56565b610dae81610bb5565b840191505092915050565b60006020820190508181036000830152610dd38184610d80565b905092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115610e0057610dff610bc6565b5b610e0982610bb5565b9050602081019050919050565b6000610e29610e2484610de5565b610c26565b905082815260208101848484011115610e4557610e44610bb0565b5b610e50848285610c72565b509392505050565b600082601f830112610e6d57610e6c610bab565b5b8135610e7d848260208601610e16565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610eab81610e86565b8114610eb657600080fd5b50565b600081359050610ec881610ea2565b92915050565b600067ffffffffffffffff82169050919050565b610eeb81610ece565b8114610ef657600080fd5b50565b600081359050610f0881610ee2565b92915050565b600060a08284031215610f2457610f23610ddb565b5b610f2e60a0610c26565b9050600082013567ffffffffffffffff811115610f4e57610f4d610de0565b5b610f5a84828501610e58565b600083015250602082013567ffffffffffffffff811115610f7e57610f7d610de0565b5b610f8a84828501610e58565b602083015250604082013567ffffffffffffffff811115610fae57610fad610de0565b5b610fba84828501610cc3565b6040830152506060610fce84828501610eb9565b6060830152506080610fe284828501610ef9565b60808301525092915050565b60006040828403121561100457611003610ddb565b5b61100e6040610c26565b9050600082013567ffffffffffffffff81111561102e5761102d610de0565b5b61103a84828501610f0e565b600083015250602082013567ffffffffffffffff81111561105e5761105d610de0565b5b61106a84828501610f0e565b60208301525092915050565b6000806040838503121561108d5761108c6109e8565b5b600083013567ffffffffffffffff8111156110ab576110aa6109ed565b5b6110b785828601610fee565b92505060206110c885828601610ac1565b9150509250929050565b6000602082840312156110e8576110e76109e8565b5b600082013567ffffffffffffffff811115611106576111056109ed565b5b61111284828501610f0e565b91505092915050565b6000819050919050565b61112e8161111b565b811461113957600080fd5b50565b60008135905061114b81611125565b92915050565b60006040828403121561116757611166610ddb565b5b6111716040610c26565b905060006111818482850161113c565b60008301525060206111958482850161113c565b60208301525092915050565b6000604082840312156111b7576111b66109e8565b5b60006111c584828501611151565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061120e5761120d6111ce565b5b50565b600081905061121f826111fd565b919050565b600061122f82611211565b9050919050565b61123f81611224565b82525050565b600082825260208201905092915050565b600061126182610d3a565b61126b8185611245565b935061127b818560208601610d56565b61128481610bb5565b840191505092915050565b60006040830160008301516112a76000860182611236565b50602083015184820360208601526112bf8282611256565b9150508091505092915050565b600060208201905081810360008301526112e6818461128f565b905092915050565b600060208284031215611304576113036109e8565b5b600082013567ffffffffffffffff811115611322576113216109ed565b5b61132e84828501610fee565b91505092915050565b60006020828403121561134d5761134c6109e8565b5b600061135b84828501610ef9565b91505092915050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b61139981611364565b82525050565b60006020820190506113b46000830184611390565b92915050565b600080604083850312156113d1576113d06109e8565b5b600083013567ffffffffffffffff8111156113ef576113ee6109ed565b5b6113fb85828601610f0e565b925050602061140c85828601610ac1565b9150509250929050565b60006020828403121561142c5761142b6109e8565b5b600061143a84828501610eb9565b91505092915050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b61147881611443565b82525050565b6000602082019050611493600083018461146f565b92915050565b6000819050919050565b6114b46114af82610a5b565b611499565b82525050565b600081905092915050565b60006114d082610d3a565b6114da81856114ba565b93506114ea818560208601610d56565b80840191505092915050565b600061150282856114a3565b60048201915061151282846114c5565b91508190509392505050565b6000819050919050565b61153961153482610b03565b61151e565b82525050565b600061154b8286611528565b60018201915061155b8285611528565b60018201915061156b82846114c5565b9150819050949350505050565b6000819050919050565b61159361158e82611443565b611578565b82525050565b6000819050919050565b6115b46115af82611364565b611599565b82525050565b60006115c682886114c5565b91506115d282876114c5565b91506115de82866114c5565b91506115ea8285611582565b6010820191506115fa82846115a3565b6008820191508190509695505050505050565b600061161982856114c5565b915061162582846114c5565b91508190509392505050565b600082825260208201905092915050565b7f5061727365206572726f723a20756e657870656374656420454f490000000000600082015250565b6000611678601b83611631565b915061168382611642565b602082019050919050565b600060208201905081810360008301526116a78161166b565b905091905056fea26469706673582212207e819350b1bd0443b022f757cac39d675403ab1c1463ff1c178becc58741606d64736f6c63430008110033",
  "libraries": {
    "Borsh": "0xAAD65874E9d83795D24Fb39B214F188b970EeCB9",
    "Utils": "0x06C09c7bf9F2c07146F77002Df8e4Ea16290e36a"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decodePromiseResult(Borsh.Data)": {
        "notice": "Decode promise result using borsh."
      },
      "encode(ExecutionMode)": {
        "notice": "Encode Execution mode enum into borsh."
      },
      "encode(PromiseArgsVariant)": {
        "notice": "Encode PromiseArgsVariant enum into borsh."
      },
      "encode(PromiseCreateArgs)": {
        "notice": "Encode base promise into borsh."
      },
      "encode(PromiseWithCallback)": {
        "notice": "Encode promise with callback into borsh."
      },
      "encode(bytes)": {
        "notice": "Encode bytes into borsh. Use this method to encode strings as well."
      },
      "encodeCrossContractCallArgs(PromiseCreateArgs,ExecutionMode)": {
        "notice": "Encode create promise using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects."
      },
      "encodeCrossContractCallArgs(PromiseWithCallback,ExecutionMode)": {
        "notice": "Encode promise with callback using borsh. The encoded data uses the same format that the Cross Contract Call precompile expects."
      },
      "skipPromiseResult(Borsh.Data)": {
        "notice": "Skip promise result from the buffer."
      }
    },
    "notice": "Provide borsh serialization and deserialization for multiple types.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}