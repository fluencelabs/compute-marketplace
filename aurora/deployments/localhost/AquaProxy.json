{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nearAddress_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "air",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prevData",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "params",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "callResults",
              "type": "string"
            }
          ],
          "internalType": "struct AquaProxy.Particle",
          "name": "particle",
          "type": "tuple"
        }
      ],
      "name": "isValidScript",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xabcbc30144af9b1fc743d7398d1f9bbf0489808c2e820125a13bc0e025aeb8fc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "458265",
    "logsBloom": "0x
    "blockHash": "0x52e9362e8454f02427c01f333914d15afc4505235ed7c9ffbc4dc9fcb170cf3f",
    "transactionHash": "0xabcbc30144af9b1fc743d7398d1f9bbf0489808c2e820125a13bc0e025aeb8fc",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "458265",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "123"
  ],
  "numDeployments": 1,
  "solcInputHash": "b12768a7a818c9c8aebada3c5cbb5c58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nearAddress_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"air\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prevData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"params\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"callResults\",\"type\":\"string\"}],\"internalType\":\"struct AquaProxy.Particle\",\"name\":\"particle\",\"type\":\"tuple\"}],\"name\":\"isValidScript\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AquaProxy.sol\":\"AquaProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AquaProxy.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"./AuroraSDK/Types.sol\\\";\\n\\ncontract AquaProxy {\\n    struct Particle {\\n        string air;\\n        string prevData;\\n        string params;\\n        string callResults;\\n    }\\n\\n    address constant XCC_PRECOMPILE =\\n        0x516Cded1D16af10CAd47D6D49128E2eB7d27b372;\\n    uint64 constant VS_NEAR_GAS = 300_000_000_000_000;\\n\\n    string nearAddress;\\n\\n    constructor(string memory nearAddress_) {\\n        nearAddress = nearAddress_;\\n    }\\n\\n    function isValidScript(Particle calldata particle) public returns (bool) {\\n        PromiseCreateArgs memory nearPromise = PromiseCreateArgs(\\n            nearAddress,\\n            \\\"verify_script\\\",\\n            abi.encodePacked(\\n                bytes(particle.air).length,\\n                particle.air,\\n                bytes(particle.prevData).length,\\n                particle.prevData,\\n                bytes(particle.params).length,\\n                particle.params,\\n                bytes(particle.callResults).length,\\n                particle.callResults\\n            ),\\n            0,\\n            VS_NEAR_GAS\\n        );\\n\\n        (bool success, bytes memory returnData) = XCC_PRECOMPILE.call(\\n            \\\"\\\" //   nearPromise.encodeCrossContractCallArgs(ExecutionMode.Eager)\\n        );\\n\\n        if (!success) {\\n            revert(string(returnData));\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4bdf22c5a06f485d9f4abcbf3ac655127145e1d1001f6b60b76b8699b93802b8\"},\"contracts/AuroraSDK/Types.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-1.0\\n// https://github.com/aurora-is-near/native-erc20-connector/tree/270355763784f7086f215880fba7ff1616949bd8/aurora-locker\\npragma solidity ^0.8.17;\\n\\n/// Basic NEAR promise.\\nstruct PromiseCreateArgs {\\n    /// Account id of the target contract to be called.\\n    string targetAccountId;\\n    /// Method in the contract to be called\\n    string method;\\n    /// Payload to be passed to the method as input.\\n    bytes args;\\n    /// Amount of NEAR tokens to attach to the call. This will\\n    /// be charged from the caller in wNEAR.\\n    uint128 nearBalance;\\n    /// Amount of gas to attach to the call.\\n    uint64 nearGas;\\n}\\n\\nenum PromiseArgsVariant {\\n    /// Basic NEAR promise\\n    Create,\\n    /// NEAR promise with a callback attached.\\n    Callback,\\n    /// Description of arbitrary NEAR promise. Allows applying combinators\\n    /// recursively, multiple action types and batched actions.\\n    Recursive\\n}\\n\\n/// Combine two base promises using NEAR combinator `then`.\\nstruct PromiseWithCallback {\\n    /// Initial promise to be triggered.\\n    PromiseCreateArgs base;\\n    /// Second promise that is executed after the execution of `base`.\\n    /// In particular this promise will have access to the result of\\n    /// the `base` promise.\\n    PromiseCreateArgs callback;\\n}\\n\\nenum ExecutionMode {\\n    /// Eager mode means that the promise WILL be executed in a single\\n    /// NEAR transaction.\\n    Eager,\\n    /// Lazy mode means that the promise WILL be scheduled for execution\\n    /// and a separate interaction is required to trigger this execution.\\n    Lazy\\n}\\n\\nenum PromiseResultStatus {\\n    /// This status should not be reachable.\\n    NotReady,\\n    /// The promise was executed successfully.\\n    Successful,\\n    /// The promise execution failed.\\n    Failed\\n}\\n\\nstruct PromiseResult {\\n    /// Status result of the promise execution.\\n    PromiseResultStatus status;\\n    /// If the status is successful, output contains the output of the promise.\\n    /// Otherwise the output field MUST be ignored.\\n    bytes output;\\n}\\n\",\"keccak256\":\"0x31b9106a405f4a068bd2334510dc53514a1e4ff873900bdfc5f2675fedf4f175\",\"license\":\"CC-BY-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000c0638038062000c068339818101604052810190620000379190620001e3565b80600090816200004891906200047f565b505062000566565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000b9826200006e565b810181811067ffffffffffffffff82111715620000db57620000da6200007f565b5b80604052505050565b6000620000f062000050565b9050620000fe8282620000ae565b919050565b600067ffffffffffffffff8211156200012157620001206200007f565b5b6200012c826200006e565b9050602081019050919050565b60005b83811015620001595780820151818401526020810190506200013c565b60008484015250505050565b60006200017c620001768462000103565b620000e4565b9050828152602081018484840111156200019b576200019a62000069565b5b620001a884828562000139565b509392505050565b600082601f830112620001c857620001c762000064565b5b8151620001da84826020860162000165565b91505092915050565b600060208284031215620001fc57620001fb6200005a565b5b600082015167ffffffffffffffff8111156200021d576200021c6200005f565b5b6200022b84828501620001b0565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028757607f821691505b6020821081036200029d576200029c6200023f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002c8565b620003138683620002c8565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003606200035a62000354846200032b565b62000335565b6200032b565b9050919050565b6000819050919050565b6200037c836200033f565b620003946200038b8262000367565b848454620002d5565b825550505050565b600090565b620003ab6200039c565b620003b881848462000371565b505050565b5b81811015620003e057620003d4600082620003a1565b600181019050620003be565b5050565b601f8211156200042f57620003f981620002a3565b6200040484620002b8565b8101602085101562000414578190505b6200042c6200042385620002b8565b830182620003bd565b50505b505050565b600082821c905092915050565b6000620004546000198460080262000434565b1980831691505092915050565b60006200046f838362000441565b9150826002028217905092915050565b6200048a8262000234565b67ffffffffffffffff811115620004a657620004a56200007f565b5b620004b282546200026e565b620004bf828285620003e4565b600060209050601f831160018114620004f75760008415620004e2578287015190505b620004ee858262000461565b8655506200055e565b601f1984166200050786620002a3565b60005b8281101562000531578489015182556001820191506020850194506020810190506200050a565b868310156200055157848901516200054d601f89168262000441565b8355505b6001600288020188555050505b505050505050565b61069080620005766000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d5897b7a14610030575b600080fd5b61004a6004803603810190610045919061031d565b610060565b6040516100579190610381565b60405180910390f35b6000806040518060a001604052806000805461007b906103cb565b80601f01602080910402602001604051908101604052809291908181526020018280546100a7906103cb565b80156100f45780601f106100c9576101008083540402835291602001916100f4565b820191906000526020600020905b8154815290600101906020018083116100d757829003601f168201915b505050505081526020016040518060400160405280600d81526020017f7665726966795f736372697074000000000000000000000000000000000000008152508152602001848060000190610149919061040b565b905085806000019061015b919061040b565b87806020019061016b919061040b565b905088806020019061017d919061040b565b8a806040019061018d919061040b565b90508b806040019061019f919061040b565b8d80606001906101af919061040b565b90508e80606001906101c1919061040b565b6040516020016101dc9c9b9a999897969594939291906104d8565b604051602081830303815290604052815260200160006fffffffffffffffffffffffffffffffff168152602001660110d9316ec00067ffffffffffffffff16815250905060008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff1660405161025a90610593565b6000604051808303816000865af19150503d8060008114610297576040519150601f19603f3d011682016040523d82523d6000602084013e61029c565b606091505b5091509150816102e357806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102da9190610638565b60405180910390fd5b60019350505050919050565b600080fd5b600080fd5b600080fd5b600060808284031215610314576103136102f9565b5b81905092915050565b600060208284031215610333576103326102ef565b5b600082013567ffffffffffffffff811115610351576103506102f4565b5b61035d848285016102fe565b91505092915050565b60008115159050919050565b61037b81610366565b82525050565b60006020820190506103966000830184610372565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103e357607f821691505b6020821081036103f6576103f561039c565b5b50919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610428576104276103fc565b5b80840192508235915067ffffffffffffffff82111561044a57610449610401565b5b60208301925060018202360383131561046657610465610406565b5b509250929050565b6000819050919050565b6000819050919050565b61049361048e8261046e565b610478565b82525050565b600081905092915050565b82818337600083830152505050565b60006104bf8385610499565b93506104cc8385846104a4565b82840190509392505050565b60006104e4828f610482565b6020820191506104f5828d8f6104b3565b9150610501828c610482565b602082019150610512828a8c6104b3565b915061051e8289610482565b60208201915061052f8287896104b3565b915061053b8286610482565b60208201915061054c8284866104b3565b91508190509d9c50505050505050505050505050565b600081905092915050565b50565b600061057d600083610562565b91506105888261056d565b600082019050919050565b600061059e82610570565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105e25780820151818401526020810190506105c7565b60008484015250505050565b6000601f19601f8301169050919050565b600061060a826105a8565b61061481856105b3565b93506106248185602086016105c4565b61062d816105ee565b840191505092915050565b6000602082019050818103600083015261065281846105ff565b90509291505056fea264697066735822122029e636f17566ea30e46f4dd7a2db662bc639ff3347af36a6985430752fb980c164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d5897b7a14610030575b600080fd5b61004a6004803603810190610045919061031d565b610060565b6040516100579190610381565b60405180910390f35b6000806040518060a001604052806000805461007b906103cb565b80601f01602080910402602001604051908101604052809291908181526020018280546100a7906103cb565b80156100f45780601f106100c9576101008083540402835291602001916100f4565b820191906000526020600020905b8154815290600101906020018083116100d757829003601f168201915b505050505081526020016040518060400160405280600d81526020017f7665726966795f736372697074000000000000000000000000000000000000008152508152602001848060000190610149919061040b565b905085806000019061015b919061040b565b87806020019061016b919061040b565b905088806020019061017d919061040b565b8a806040019061018d919061040b565b90508b806040019061019f919061040b565b8d80606001906101af919061040b565b90508e80606001906101c1919061040b565b6040516020016101dc9c9b9a999897969594939291906104d8565b604051602081830303815290604052815260200160006fffffffffffffffffffffffffffffffff168152602001660110d9316ec00067ffffffffffffffff16815250905060008073516cded1d16af10cad47d6d49128e2eb7d27b37273ffffffffffffffffffffffffffffffffffffffff1660405161025a90610593565b6000604051808303816000865af19150503d8060008114610297576040519150601f19603f3d011682016040523d82523d6000602084013e61029c565b606091505b5091509150816102e357806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102da9190610638565b60405180910390fd5b60019350505050919050565b600080fd5b600080fd5b600080fd5b600060808284031215610314576103136102f9565b5b81905092915050565b600060208284031215610333576103326102ef565b5b600082013567ffffffffffffffff811115610351576103506102f4565b5b61035d848285016102fe565b91505092915050565b60008115159050919050565b61037b81610366565b82525050565b60006020820190506103966000830184610372565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103e357607f821691505b6020821081036103f6576103f561039c565b5b50919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610428576104276103fc565b5b80840192508235915067ffffffffffffffff82111561044a57610449610401565b5b60208301925060018202360383131561046657610465610406565b5b509250929050565b6000819050919050565b6000819050919050565b61049361048e8261046e565b610478565b82525050565b600081905092915050565b82818337600083830152505050565b60006104bf8385610499565b93506104cc8385846104a4565b82840190509392505050565b60006104e4828f610482565b6020820191506104f5828d8f6104b3565b9150610501828c610482565b602082019150610512828a8c6104b3565b915061051e8289610482565b60208201915061052f8287896104b3565b915061053b8286610482565b60208201915061054c8284866104b3565b91508190509d9c50505050505050505050505050565b600081905092915050565b50565b600061057d600083610562565b91506105888261056d565b600082019050919050565b600061059e82610570565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105e25780820151818401526020810190506105c7565b60008484015250505050565b6000601f19601f8301169050919050565b600061060a826105a8565b61061481856105b3565b93506106248185602086016105c4565b61062d816105ee565b840191505092915050565b6000602082019050818103600083015261065281846105ff565b90509291505056fea264697066735822122029e636f17566ea30e46f4dd7a2db662bc639ff3347af36a6985430752fb980c164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1342,
        "contract": "contracts/AquaProxy.sol:AquaProxy",
        "label": "nearAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}